; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct.timeval = type { i64, i64 }
%struct.rusage = type { %struct.timeval, %struct.timeval, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon, %union.anon }
%union.anon = type { i64 }
%struct.timezone = type { i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@oos = local_unnamed_addr constant double 0x3FC5555555555555, align 8
@.str = private unnamed_addr constant [18 x i8] c"Usage: %s <size>\0A\00", align 1
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0) }, align 8
@.str.2 = private unnamed_addr constant [44 x i8] c"size: %d  time: %lf  iter: %d  MLUP/s: %lf\0A\00", align 1
@1 = private unnamed_addr constant %ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0) }, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"%s.%d.bbfout\00", align 1
@.str.1.4 = private unnamed_addr constant [17 x i8] c"hello world  %s\0A\00", align 1
@.str.2.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.3.6 = private unnamed_addr constant [17 x i8] c"open file wrong\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%ld\09\00", align 1

; Function Attrs: norecurse nounwind readnone uwtable
define void @dummy_(double* nocapture, double* nocapture) local_unnamed_addr #0 {
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable
define void @dummy(double* nocapture, double* nocapture) local_unnamed_addr #0 {
  ret void
}

; Function Attrs: nounwind uwtable
define void @timing_(double* nocapture, double* nocapture) local_unnamed_addr #1 {
  tail call void @timing(double* %0, double* %1)
  ret void
}

; Function Attrs: nounwind uwtable
define void @timing(double* nocapture, double* nocapture) local_unnamed_addr #1 {
  %3 = alloca %struct.timeval, align 8
  %4 = alloca %struct.rusage, align 8
  %5 = bitcast %struct.timeval* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #10
  %6 = bitcast %struct.rusage* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %6) #10
  %7 = call i32 @gettimeofday(%struct.timeval* nonnull %3, %struct.timezone* null) #10
  %8 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i64 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !2
  %10 = sitofp i64 %9 to double
  %11 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i64 0, i32 1
  %12 = load i64, i64* %11, align 8, !tbaa !7
  %13 = sitofp i64 %12 to double
  %14 = fdiv double %13, 1.000000e+06
  %15 = fadd double %14, %10
  store double %15, double* %0, align 8, !tbaa !8
  %16 = call i32 @getrusage(i32 0, %struct.rusage* nonnull %4) #10
  %17 = getelementptr inbounds %struct.rusage, %struct.rusage* %4, i64 0, i32 0, i32 0
  %18 = load i64, i64* %17, align 8, !tbaa !10
  %19 = sitofp i64 %18 to double
  %20 = getelementptr inbounds %struct.rusage, %struct.rusage* %4, i64 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !12
  %22 = sitofp i64 %21 to double
  %23 = fdiv double %22, 1.000000e+06
  %24 = fadd double %23, %19
  store double %24, double* %1, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %6) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #2

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @getrusage(i32, %struct.rusage*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #2

; Function Attrs: norecurse nounwind uwtable
define void @jacobi_line(double* nocapture, double* nocapture readonly, double* nocapture readonly, double* nocapture readonly, double* nocapture readonly, double* nocapture readonly, double* nocapture readonly, i32) local_unnamed_addr #4 {
  %9 = icmp sgt i32 %7, 2
  br i1 %9, label %10, label %43

; <label>:10:                                     ; preds = %8
  %11 = add nsw i32 %7, -1
  %12 = zext i32 %11 to i64
  br label %13

; <label>:13:                                     ; preds = %13, %10
  %14 = phi i64 [ 1, %10 ], [ %24, %13 ]
  %15 = getelementptr inbounds double, double* %6, i64 %14
  %16 = load double, double* %15, align 8, !tbaa !8
  %17 = getelementptr inbounds double, double* %1, i64 %14
  %18 = load double, double* %17, align 8, !tbaa !8
  %19 = fmul double %16, %18
  %20 = add nsw i64 %14, -1
  %21 = getelementptr inbounds double, double* %1, i64 %20
  %22 = load double, double* %21, align 8, !tbaa !8
  %23 = fadd double %19, %22
  %24 = add nuw nsw i64 %14, 1
  %25 = getelementptr inbounds double, double* %1, i64 %24
  %26 = load double, double* %25, align 8, !tbaa !8
  %27 = fadd double %23, %26
  %28 = getelementptr inbounds double, double* %2, i64 %14
  %29 = load double, double* %28, align 8, !tbaa !8
  %30 = fadd double %27, %29
  %31 = getelementptr inbounds double, double* %3, i64 %14
  %32 = load double, double* %31, align 8, !tbaa !8
  %33 = fadd double %30, %32
  %34 = getelementptr inbounds double, double* %4, i64 %14
  %35 = load double, double* %34, align 8, !tbaa !8
  %36 = fadd double %33, %35
  %37 = getelementptr inbounds double, double* %5, i64 %14
  %38 = load double, double* %37, align 8, !tbaa !8
  %39 = fadd double %36, %38
  %40 = fdiv double %39, 6.000000e+00
  %41 = getelementptr inbounds double, double* %0, i64 %14
  store double %40, double* %41, align 8, !tbaa !8
  %42 = icmp eq i64 %24, %12
  br i1 %42, label %43, label %13

; <label>:43:                                     ; preds = %13, %8
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8** nocapture readonly) local_unnamed_addr #1 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [2 x double*], align 16
  %12 = alloca double*, align 8
  %13 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #10
  %14 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #10
  %15 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #10
  %16 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #10
  %17 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
  %18 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
  %19 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
  %20 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
  %21 = bitcast [2 x double*]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #10
  %22 = bitcast double** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #10
  %23 = icmp eq i32 %0, 2
  br i1 %23, label %27, label %24

; <label>:24:                                     ; preds = %2
  %25 = load i8*, i8** %1, align 8, !tbaa !13
  %26 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %25)
  tail call void @exit(i32 1) #11
  unreachable

; <label>:27:                                     ; preds = %2
  %28 = getelementptr inbounds i8*, i8** %1, i64 1
  %29 = load i8*, i8** %28, align 8, !tbaa !13
  %30 = tail call i32 @atoi(i8* %29) #12
  store i32 %30, i32* %7, align 4, !tbaa !15
  %31 = sext i32 %30 to i64
  %32 = shl nsw i64 %31, 3
  %33 = mul i64 %32, %31
  %34 = mul i64 %33, %31
  %35 = tail call noalias i8* @malloc(i64 %34) #10
  %36 = bitcast [2 x double*]* %11 to i8**
  store i8* %35, i8** %36, align 16, !tbaa !13
  %37 = tail call noalias i8* @malloc(i64 %34) #10
  %38 = getelementptr inbounds [2 x double*], [2 x double*]* %11, i64 0, i64 1
  %39 = bitcast double** %38 to i8**
  store i8* %37, i8** %39, align 8, !tbaa !13
  %40 = tail call noalias i8* @malloc(i64 %34) #10
  %41 = bitcast double** %12 to i8**
  store i8* %40, i8** %41, align 8, !tbaa !13
  store i32 0, i32* %9, align 4, !tbaa !15
  store i32 1, i32* %10, align 4, !tbaa !15
  store i32 0, i32* %8, align 4, !tbaa !15
  %42 = icmp sgt i32 %30, 0
  br i1 %42, label %43, label %78

; <label>:43:                                     ; preds = %27
  %44 = getelementptr inbounds [2 x double*], [2 x double*]* %11, i64 0, i64 0
  %45 = load double*, double** %44, align 16
  %46 = load double*, double** %38, align 8
  %47 = load double*, double** %12, align 8
  %48 = zext i32 %30 to i64
  %49 = zext i32 %30 to i64
  br label %50

; <label>:50:                                     ; preds = %43, %74
  %51 = phi i32 [ 0, %43 ], [ %75, %74 ]
  %52 = mul nsw i32 %51, %30
  %53 = sitofp i32 %51 to double
  br label %54

; <label>:54:                                     ; preds = %50, %71
  %55 = phi i64 [ 0, %50 ], [ %72, %71 ]
  %56 = trunc i64 %55 to i32
  %57 = add i32 %52, %56
  %58 = mul i32 %57, %30
  %59 = trunc i64 %55 to i32
  %60 = sitofp i32 %59 to double
  %61 = fadd double %53, %60
  %62 = sext i32 %58 to i64
  br label %63

; <label>:63:                                     ; preds = %63, %54
  %64 = phi i64 [ 0, %54 ], [ %69, %63 ]
  %65 = add nsw i64 %64, %62
  %66 = getelementptr inbounds double, double* %45, i64 %65
  store double %61, double* %66, align 8, !tbaa !8
  %67 = getelementptr inbounds double, double* %46, i64 %65
  store double %61, double* %67, align 8, !tbaa !8
  %68 = getelementptr inbounds double, double* %47, i64 %65
  store double %61, double* %68, align 8, !tbaa !8
  %69 = add nuw nsw i64 %64, 1
  %70 = icmp eq i64 %69, %48
  br i1 %70, label %71, label %63

; <label>:71:                                     ; preds = %63
  %72 = add nuw nsw i64 %55, 1
  %73 = icmp eq i64 %72, %49
  br i1 %73, label %74, label %54

; <label>:74:                                     ; preds = %71
  %75 = add nuw nsw i32 %51, 1
  %76 = icmp eq i32 %75, %30
  br i1 %76, label %77, label %50

; <label>:77:                                     ; preds = %74
  store i32 %30, i32* %8, align 4, !tbaa !15
  br label %78

; <label>:78:                                     ; preds = %77, %27
  call void @timing(double* nonnull %3, double* nonnull %5) #10
  br label %79

; <label>:79:                                     ; preds = %79, %78
  %80 = phi i32 [ 0, %78 ], [ %81, %79 ]
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, [2 x double*]*, i32*, i32*, double**)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %8, i32* nonnull %7, [2 x double*]* nonnull %11, i32* nonnull %10, i32* nonnull %9, double** nonnull %12) #10
  %81 = add nuw nsw i32 %80, 1
  %82 = icmp eq i32 %81, 100
  br i1 %82, label %83, label %79

; <label>:83:                                     ; preds = %79
  call void @timing(double* nonnull %4, double* nonnull %6) #10
  %84 = load double, double* %4, align 8, !tbaa !8
  %85 = load double, double* %3, align 8, !tbaa !8
  %86 = fsub double %84, %85
  %87 = load i32, i32* %7, align 4, !tbaa !15
  %88 = add nsw i32 %87, -2
  %89 = sitofp i32 %88 to double
  %90 = fmul double %89, 1.000000e+02
  %91 = fmul double %90, %89
  %92 = fmul double %91, %89
  %93 = fdiv double %92, %86
  %94 = fdiv double %93, 1.000000e+06
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i32 %87, double %86, i32 100, double %94)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #10
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #10
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #3

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind readonly uwtable
define available_externally i32 @atoi(i8* nonnull) local_unnamed_addr #6 {
  %2 = tail call i64 @strtol(i8* nocapture nonnull %0, i8** null, i32 10) #10
  %3 = trunc i64 %2 to i32
  ret i32 %3
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readnone dereferenceable(4), i32* nocapture readonly dereferenceable(4), [2 x double*]* nocapture readonly dereferenceable(16), i32* nocapture readonly dereferenceable(4), i32* nocapture readonly dereferenceable(4), double** nocapture readonly dereferenceable(8)) #1 {
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = load i32, i32* %3, align 4, !tbaa !15
  %14 = add nsw i32 %13, -3
  %15 = icmp sgt i32 %13, 2
  br i1 %15, label %16, label %74

; <label>:16:                                     ; preds = %8
  %17 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #10
  store i32 0, i32* %9, align 4, !tbaa !15
  %18 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #10
  store i32 %14, i32* %10, align 4, !tbaa !15
  %19 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #10
  store i32 1, i32* %11, align 4, !tbaa !15
  %20 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #10
  store i32 0, i32* %12, align 4, !tbaa !15
  %21 = load i32, i32* %0, align 4, !tbaa !15
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %21, i32 34, i32* nonnull %12, i32* nonnull %9, i32* nonnull %10, i32* nonnull %11, i32 1, i32 1) #10
  %22 = load i32, i32* %10, align 4, !tbaa !15
  %23 = icmp sgt i32 %22, %14
  %24 = select i1 %23, i32 %14, i32 %22
  store i32 %24, i32* %10, align 4, !tbaa !15
  %25 = load i32, i32* %9, align 4, !tbaa !15
  %26 = icmp sgt i32 %25, %24
  br i1 %26, label %73, label %27

; <label>:27:                                     ; preds = %16
  br label %28

; <label>:28:                                     ; preds = %27, %70
  %29 = phi i32 [ %30, %70 ], [ %25, %27 ]
  %30 = add nsw i32 %29, 1
  %31 = load i32, i32* %3, align 4, !tbaa !15
  %32 = icmp sgt i32 %31, 2
  br i1 %32, label %33, label %70

; <label>:33:                                     ; preds = %28
  br label %34

; <label>:34:                                     ; preds = %33, %34
  %35 = phi i32 [ %67, %34 ], [ %31, %33 ]
  %36 = phi i32 [ %66, %34 ], [ 1, %33 ]
  %37 = mul nsw i32 %35, %30
  %38 = add i32 %37, %36
  %39 = mul i32 %38, %35
  %40 = load i32, i32* %5, align 4, !tbaa !15
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [2 x double*], [2 x double*]* %4, i64 0, i64 %41
  %43 = load double*, double** %42, align 8, !tbaa !13
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds double, double* %43, i64 %44
  %46 = load i32, i32* %6, align 4, !tbaa !15
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [2 x double*], [2 x double*]* %4, i64 0, i64 %47
  %49 = load double*, double** %48, align 8, !tbaa !13
  %50 = getelementptr inbounds double, double* %49, i64 %44
  %51 = add nsw i32 %39, %35
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds double, double* %49, i64 %52
  %54 = sub nsw i32 %39, %35
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double, double* %49, i64 %55
  %57 = mul nsw i32 %35, %35
  %58 = add nsw i32 %39, %57
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds double, double* %49, i64 %59
  %61 = sub nsw i32 %39, %57
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds double, double* %49, i64 %62
  %64 = load double*, double** %7, align 8, !tbaa !13
  %65 = getelementptr inbounds double, double* %64, i64 %44
  call void @jacobi_line(double* %45, double* %50, double* %53, double* %56, double* %60, double* %63, double* %65, i32 %35)
  %66 = add nuw nsw i32 %36, 1
  %67 = load i32, i32* %3, align 4, !tbaa !15
  %68 = add nsw i32 %67, -1
  %69 = icmp slt i32 %66, %68
  br i1 %69, label %34, label %70

; <label>:70:                                     ; preds = %34, %28
  %71 = load i32, i32* %10, align 4, !tbaa !15
  %72 = icmp slt i32 %29, %71
  br i1 %72, label %28, label %73

; <label>:73:                                     ; preds = %70, %16
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %21) #10
  br label %74

; <label>:74:                                     ; preds = %73, %8
  %75 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #10
  %76 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %76) #10
  %77 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77) #10
  %78 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78) #10
  ret void
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

declare void @__kmpc_for_static_fini(%ident_t*, i32) local_unnamed_addr

; Function Attrs: nounwind
declare i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #3

; Function Attrs: noinline optnone uwtable
define void @_Z18WriteOpenMPProfilePll(i64*, i64) #7 {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca [150 x i8], align 16
  %6 = alloca [100 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct._IO_FILE*, align 8
  %9 = alloca i32, align 4
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  %10 = call i32 @getpid() #10
  store i32 %10, i32* %7, align 4
  %11 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %12 = call i32 @gethostname(i8* %11, i64 99) #10
  %13 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %15 = load i32, i32* %7, align 4
  %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i8* %14, i32 %15) #10
  %17 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.4, i32 0, i32 0), i8* %17)
  %19 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %20 = call %struct._IO_FILE* @fopen(i8* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2.5, i32 0, i32 0))
  store %struct._IO_FILE* %20, %struct._IO_FILE** %8, align 8
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %22 = icmp eq %struct._IO_FILE* %21, null
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3.6, i32 0, i32 0))
  br label %45

; <label>:25:                                     ; preds = %2
  store i32 0, i32* %9, align 4
  br label %26

; <label>:26:                                     ; preds = %39, %25
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %4, align 8
  %30 = icmp slt i64 %28, %29
  br i1 %30, label %31, label %42

; <label>:31:                                     ; preds = %26
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %33 = load i64*, i64** %3, align 8
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i64, i64* %33, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i64 %37)
  br label %39

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %9, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %9, align 4
  br label %26

; <label>:42:                                     ; preds = %26
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %44 = call i32 @fclose(%struct._IO_FILE* %43)
  br label %45

; <label>:45:                                     ; preds = %42, %23
  ret void
}

; Function Attrs: nounwind
declare i32 @getpid() #8

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #8

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #8

declare %struct._IO_FILE* @fopen(i8*, i8*) #9

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #9

declare i32 @fclose(%struct._IO_FILE*) #9

attributes #0 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readonly }

!llvm.ident = !{!0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !4, i64 0}
!3 = !{!"timeval", !4, i64 0, !4, i64 8}
!4 = !{!"long", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!3, !4, i64 8}
!8 = !{!9, !9, i64 0}
!9 = !{!"double", !5, i64 0}
!10 = !{!11, !4, i64 0}
!11 = !{!"rusage", !3, i64 0, !3, i64 16, !5, i64 32, !5, i64 40, !5, i64 48, !5, i64 56, !5, i64 64, !5, i64 72, !5, i64 80, !5, i64 88, !5, i64 96, !5, i64 104, !5, i64 112, !5, i64 120, !5, i64 128, !5, i64 136}
!12 = !{!11, !4, i64 8}
!13 = !{!14, !14, i64 0}
!14 = !{!"any pointer", !5, i64 0}
!15 = !{!16, !16, i64 0}
!16 = !{!"int", !5, i64 0}
