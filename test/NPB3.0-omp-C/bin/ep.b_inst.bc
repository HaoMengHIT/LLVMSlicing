; ModuleID = 'ep.b_new.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@.gomp_critical_user_.var = common global [8 x i32] zeroinitializer
@elapsed = common local_unnamed_addr global [64 x double] zeroinitializer, align 16
@start = common local_unnamed_addr global [64 x double] zeroinitializer, align 16
@main.dum = private unnamed_addr constant [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@str = private unnamed_addr constant [74 x i8] c"\0A\0A NAS Parallel Benchmarks 3.0 structured OpenMP C version - EP Benchmark\00"
@.str.1 = private unnamed_addr constant [7 x i8] c"%12.0f\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c" Number of random numbers generated: %13s\0A\00", align 1
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@x = internal thread_local global [131072 x double] zeroinitializer, align 16
@q = internal unnamed_addr global [10 x double] zeroinitializer, align 16
@wtime_.sec = internal unnamed_addr global i32 -1, align 4
@1 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@2 = private unnamed_addr constant %ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@3 = private unnamed_addr constant %ident_t { i32 0, i32 18, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@.str.3 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@.str.1.1 = private unnamed_addr constant [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", align 1
@.str.2.2 = private unnamed_addr constant [46 x i8] c" Class           =                        %c\0A\00", align 1
@.str.3.3 = private unnamed_addr constant [37 x i8] c" Size            =             %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c" Size            =              %3dx%3dx%3d\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c" Threads         =             %12d\0A\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c" Time in seconds =             %12.2f\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c" Mop/s total     =             %12.2f\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@str.23 = private unnamed_addr constant [44 x i8] c" Verification    =               SUCCESSFUL\00"
@str.4 = private unnamed_addr constant [44 x i8] c" Verification    =             UNSUCCESSFUL\00"
@.str.12 = private unnamed_addr constant [35 x i8] c" Version         =           %12s\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@str.22 = private unnamed_addr constant [19 x i8] c"\0A Compile options:\00"
@.str.15 = private unnamed_addr constant [23 x i8] c"    CC           = %s\0A\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"    RAND         = %s\0A\00", align 1
@.str = private unnamed_addr constant [13 x i8] c"%s.%d.bbfout\00", align 1
@.str.1.2 = private unnamed_addr constant [17 x i8] c"hello world  %s\0A\00", align 1
@.str.2.3 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.3.4 = private unnamed_addr constant [17 x i8] c"open file wrong\0A\00", align 1
@.str.4.5 = private unnamed_addr constant [5 x i8] c"%ld\09\00", align 1
@BBCounters = internal global [6408 x i64] zeroinitializer

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #0 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 0
  %4 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca [3 x double], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca [14 x i8], align 1
  %15 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #2
  %16 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #2
  %17 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #2
  %18 = bitcast double* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #2
  %19 = bitcast [3 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %19, i8* bitcast ([3 x double]* @main.dum to i8*), i64 24, i32 16, i1 false)
  %20 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #2
  %21 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #2
  %22 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #2
  %23 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #2
  store i32 1, i32* %13, align 4, !tbaa !3
  %24 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 14, i8* nonnull %24) #2
  %25 = tail call i32 @puts(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @str, i64 0, i64 0))
  %26 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %24, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), double 0x41E0000000000000) #2
  %27 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 13
  %28 = load i8, i8* %27, align 1, !tbaa !7
  %29 = icmp eq i8 %28, 46
  br i1 %29, label %30, label %32

; <label>:30:                                     ; preds = %2
  %IndexSExt1 = sext i32 %3 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 1
  %31 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %31
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %31
  store i8 32, i8* %27, align 1, !tbaa !7
  br label %32

; <label>:32:                                     ; preds = %30, %2
  %IndexSExt6 = sext i32 %3 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 2
  %33 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %33
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %33
  %34 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 12
  %35 = load i8, i8* %34, align 1, !tbaa !7
  %36 = icmp eq i8 %35, 46
  br i1 %36, label %37, label %39

; <label>:37:                                     ; preds = %32
  %IndexSExt11 = sext i32 %3 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 3
  %38 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %38
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %38
  store i8 32, i8* %34, align 1, !tbaa !7
  br label %39

; <label>:39:                                     ; preds = %37, %32
  %IndexSExt16 = sext i32 %3 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 4
  %40 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %40
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %40
  %41 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 11
  %42 = load i8, i8* %41, align 1, !tbaa !7
  %43 = icmp eq i8 %42, 46
  br i1 %43, label %44, label %46

; <label>:44:                                     ; preds = %39
  %IndexSExt21 = sext i32 %3 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 5
  %45 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %45
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %45
  store i8 32, i8* %41, align 1, !tbaa !7
  br label %46

; <label>:46:                                     ; preds = %44, %39
  %IndexSExt26 = sext i32 %3 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 6
  %47 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %47
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %47
  %48 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 10
  %49 = load i8, i8* %48, align 1, !tbaa !7
  %50 = icmp eq i8 %49, 46
  br i1 %50, label %51, label %53

; <label>:51:                                     ; preds = %46
  %IndexSExt31 = sext i32 %3 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 89
  %IndexValAdd33 = add i64 %IndexValMul32, 7
  %52 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %52
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %52
  store i8 32, i8* %48, align 1, !tbaa !7
  br label %53

; <label>:53:                                     ; preds = %51, %46
  %IndexSExt36 = sext i32 %3 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 89
  %IndexValAdd38 = add i64 %IndexValMul37, 8
  %54 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %54
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %54
  %55 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 9
  %56 = load i8, i8* %55, align 1, !tbaa !7
  %57 = icmp eq i8 %56, 46
  br i1 %57, label %58, label %60

; <label>:58:                                     ; preds = %53
  %IndexSExt41 = sext i32 %3 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 89
  %IndexValAdd43 = add i64 %IndexValMul42, 9
  %59 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %59
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %59
  store i8 32, i8* %55, align 1, !tbaa !7
  br label %60

; <label>:60:                                     ; preds = %58, %53
  %IndexSExt46 = sext i32 %3 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 89
  %IndexValAdd48 = add i64 %IndexValMul47, 10
  %61 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %61
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %61
  %62 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 8
  %63 = load i8, i8* %62, align 1, !tbaa !7
  %64 = icmp eq i8 %63, 46
  br i1 %64, label %65, label %67

; <label>:65:                                     ; preds = %60
  %IndexSExt51 = sext i32 %3 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 89
  %IndexValAdd53 = add i64 %IndexValMul52, 11
  %66 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %66
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %66
  store i8 32, i8* %62, align 1, !tbaa !7
  br label %67

; <label>:67:                                     ; preds = %65, %60
  %IndexSExt56 = sext i32 %3 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 89
  %IndexValAdd58 = add i64 %IndexValMul57, 12
  %68 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %68
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %68
  %69 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 7
  %70 = load i8, i8* %69, align 1, !tbaa !7
  %71 = icmp eq i8 %70, 46
  br i1 %71, label %72, label %74

; <label>:72:                                     ; preds = %67
  %IndexSExt61 = sext i32 %3 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 89
  %IndexValAdd63 = add i64 %IndexValMul62, 13
  %73 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %73
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %73
  store i8 32, i8* %69, align 1, !tbaa !7
  br label %74

; <label>:74:                                     ; preds = %72, %67
  %IndexSExt66 = sext i32 %3 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 89
  %IndexValAdd68 = add i64 %IndexValMul67, 14
  %75 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %75
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %75
  %76 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 6
  %77 = load i8, i8* %76, align 1, !tbaa !7
  %78 = icmp eq i8 %77, 46
  br i1 %78, label %79, label %81

; <label>:79:                                     ; preds = %74
  %IndexSExt71 = sext i32 %3 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 89
  %IndexValAdd73 = add i64 %IndexValMul72, 15
  %80 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %80
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %80
  store i8 32, i8* %76, align 1, !tbaa !7
  br label %81

; <label>:81:                                     ; preds = %79, %74
  %IndexSExt76 = sext i32 %3 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 89
  %IndexValAdd78 = add i64 %IndexValMul77, 16
  %82 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %82
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %82
  %83 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 5
  %84 = load i8, i8* %83, align 1, !tbaa !7
  %85 = icmp eq i8 %84, 46
  br i1 %85, label %86, label %88

; <label>:86:                                     ; preds = %81
  %IndexSExt81 = sext i32 %3 to i64
  %IndexValMul82 = mul i64 %IndexSExt81, 89
  %IndexValAdd83 = add i64 %IndexValMul82, 17
  %87 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd83
  %OldBBCounter84 = load i64, i64* %87
  %NewBBCounter85 = add i64 %OldBBCounter84, 1
  store i64 %NewBBCounter85, i64* %87
  store i8 32, i8* %83, align 1, !tbaa !7
  br label %88

; <label>:88:                                     ; preds = %86, %81
  %IndexSExt86 = sext i32 %3 to i64
  %IndexValMul87 = mul i64 %IndexSExt86, 89
  %IndexValAdd88 = add i64 %IndexValMul87, 18
  %89 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd88
  %OldBBCounter89 = load i64, i64* %89
  %NewBBCounter90 = add i64 %OldBBCounter89, 1
  store i64 %NewBBCounter90, i64* %89
  %90 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 4
  %91 = load i8, i8* %90, align 1, !tbaa !7
  %92 = icmp eq i8 %91, 46
  br i1 %92, label %93, label %95

; <label>:93:                                     ; preds = %88
  %IndexSExt91 = sext i32 %3 to i64
  %IndexValMul92 = mul i64 %IndexSExt91, 89
  %IndexValAdd93 = add i64 %IndexValMul92, 19
  %94 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd93
  %OldBBCounter94 = load i64, i64* %94
  %NewBBCounter95 = add i64 %OldBBCounter94, 1
  store i64 %NewBBCounter95, i64* %94
  store i8 32, i8* %90, align 1, !tbaa !7
  br label %95

; <label>:95:                                     ; preds = %93, %88
  %IndexSExt96 = sext i32 %3 to i64
  %IndexValMul97 = mul i64 %IndexSExt96, 89
  %IndexValAdd98 = add i64 %IndexValMul97, 20
  %96 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd98
  %OldBBCounter99 = load i64, i64* %96
  %NewBBCounter100 = add i64 %OldBBCounter99, 1
  store i64 %NewBBCounter100, i64* %96
  %97 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 3
  %98 = load i8, i8* %97, align 1, !tbaa !7
  %99 = icmp eq i8 %98, 46
  br i1 %99, label %100, label %102

; <label>:100:                                    ; preds = %95
  %IndexSExt101 = sext i32 %3 to i64
  %IndexValMul102 = mul i64 %IndexSExt101, 89
  %IndexValAdd103 = add i64 %IndexValMul102, 21
  %101 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd103
  %OldBBCounter104 = load i64, i64* %101
  %NewBBCounter105 = add i64 %OldBBCounter104, 1
  store i64 %NewBBCounter105, i64* %101
  store i8 32, i8* %97, align 1, !tbaa !7
  br label %102

; <label>:102:                                    ; preds = %100, %95
  %IndexSExt106 = sext i32 %3 to i64
  %IndexValMul107 = mul i64 %IndexSExt106, 89
  %IndexValAdd108 = add i64 %IndexValMul107, 22
  %103 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd108
  %OldBBCounter109 = load i64, i64* %103
  %NewBBCounter110 = add i64 %OldBBCounter109, 1
  store i64 %NewBBCounter110, i64* %103
  %104 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 2
  %105 = load i8, i8* %104, align 1, !tbaa !7
  %106 = icmp eq i8 %105, 46
  br i1 %106, label %107, label %109

; <label>:107:                                    ; preds = %102
  %IndexSExt111 = sext i32 %3 to i64
  %IndexValMul112 = mul i64 %IndexSExt111, 89
  %IndexValAdd113 = add i64 %IndexValMul112, 23
  %108 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd113
  %OldBBCounter114 = load i64, i64* %108
  %NewBBCounter115 = add i64 %OldBBCounter114, 1
  store i64 %NewBBCounter115, i64* %108
  store i8 32, i8* %104, align 1, !tbaa !7
  br label %109

; <label>:109:                                    ; preds = %107, %102
  %IndexSExt116 = sext i32 %3 to i64
  %IndexValMul117 = mul i64 %IndexSExt116, 89
  %IndexValAdd118 = add i64 %IndexValMul117, 24
  %110 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd118
  %OldBBCounter119 = load i64, i64* %110
  %NewBBCounter120 = add i64 %OldBBCounter119, 1
  store i64 %NewBBCounter120, i64* %110
  %111 = getelementptr inbounds [14 x i8], [14 x i8]* %14, i64 0, i64 1
  %112 = load i8, i8* %111, align 1, !tbaa !7
  %113 = icmp eq i8 %112, 46
  br i1 %113, label %114, label %116

; <label>:114:                                    ; preds = %109
  %IndexSExt121 = sext i32 %3 to i64
  %IndexValMul122 = mul i64 %IndexSExt121, 89
  %IndexValAdd123 = add i64 %IndexValMul122, 25
  %115 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd123
  %OldBBCounter124 = load i64, i64* %115
  %NewBBCounter125 = add i64 %OldBBCounter124, 1
  store i64 %NewBBCounter125, i64* %115
  store i8 32, i8* %111, align 1, !tbaa !7
  br label %116

; <label>:116:                                    ; preds = %114, %109
  %IndexSExt126 = sext i32 %3 to i64
  %IndexValMul127 = mul i64 %IndexSExt126, 89
  %IndexValAdd128 = add i64 %IndexValMul127, 26
  %117 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd128
  %OldBBCounter129 = load i64, i64* %117
  %NewBBCounter130 = add i64 %OldBBCounter129, 1
  store i64 %NewBBCounter130, i64* %117
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* nonnull %24)
  store i32 16384, i32* %10, align 4, !tbaa !3
  %119 = getelementptr inbounds [3 x double], [3 x double]* %9, i64 0, i64 0
  %120 = getelementptr inbounds [3 x double], [3 x double]* %9, i64 0, i64 1
  %121 = getelementptr inbounds [3 x double], [3 x double]* %9, i64 0, i64 2
  call void @vranlc(i32 0, double* nonnull %119, double 1.000000e+00, double* nonnull %121) #2
  %122 = load double, double* %121, align 16, !tbaa !8
  %123 = call double @randlc(double* nonnull %120, double %122) #2
  store double %123, double* %119, align 16, !tbaa !8
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*)) #2
  %124 = call i32 @sched_getcpu()
  %IndexSExt131 = sext i32 %124 to i64
  %IndexValMul132 = mul i64 %IndexSExt131, 89
  %IndexValAdd133 = add i64 %IndexValMul132, 27
  %125 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd133
  %OldBBCounter134 = load i64, i64* %125
  %NewBBCounter135 = add i64 %OldBBCounter134, 1
  store i64 %NewBBCounter135, i64* %125
  call void @timer_clear(i32 1) #2
  call void @timer_clear(i32 2) #2
  call void @timer_clear(i32 3) #2
  call void @timer_start(i32 1) #2
  call void @vranlc(i32 0, double* nonnull %5, double 0x41D2309CE5400000, double* getelementptr inbounds ([131072 x double], [131072 x double]* @x, i64 0, i64 0)) #2
  store double 0x41D2309CE5400000, double* %5, align 8, !tbaa !8
  %126 = call double @randlc(double* nonnull %5, double 0x41D2309CE5400000) #2
  %127 = load double, double* %5, align 8, !tbaa !8
  %128 = call double @randlc(double* nonnull %5, double %127) #2
  %129 = load double, double* %5, align 8, !tbaa !8
  %130 = call double @randlc(double* nonnull %5, double %129) #2
  %131 = load double, double* %5, align 8, !tbaa !8
  %132 = call double @randlc(double* nonnull %5, double %131) #2
  %133 = load double, double* %5, align 8, !tbaa !8
  %134 = call double @randlc(double* nonnull %5, double %133) #2
  %135 = load double, double* %5, align 8, !tbaa !8
  %136 = call double @randlc(double* nonnull %5, double %135) #2
  %137 = load double, double* %5, align 8, !tbaa !8
  %138 = call double @randlc(double* nonnull %5, double %137) #2
  %139 = load double, double* %5, align 8, !tbaa !8
  %140 = call double @randlc(double* nonnull %5, double %139) #2
  %141 = load double, double* %5, align 8, !tbaa !8
  %142 = call double @randlc(double* nonnull %5, double %141) #2
  %143 = load double, double* %5, align 8, !tbaa !8
  %144 = call double @randlc(double* nonnull %5, double %143) #2
  %145 = load double, double* %5, align 8, !tbaa !8
  %146 = call double @randlc(double* nonnull %5, double %145) #2
  %147 = load double, double* %5, align 8, !tbaa !8
  %148 = call double @randlc(double* nonnull %5, double %147) #2
  %149 = load double, double* %5, align 8, !tbaa !8
  %150 = call double @randlc(double* nonnull %5, double %149) #2
  %151 = load double, double* %5, align 8, !tbaa !8
  %152 = call double @randlc(double* nonnull %5, double %151) #2
  %153 = load double, double* %5, align 8, !tbaa !8
  %154 = call double @randlc(double* nonnull %5, double %153) #2
  %155 = load double, double* %5, align 8, !tbaa !8
  %156 = call double @randlc(double* nonnull %5, double %155) #2
  %157 = load double, double* %5, align 8, !tbaa !8
  %158 = call double @randlc(double* nonnull %5, double %157) #2
  %159 = bitcast double* %5 to i64*
  %160 = load i64, i64* %159, align 8, !tbaa !8
  %161 = bitcast double* %8 to i64*
  store i64 %160, i64* %161, align 8, !tbaa !8
  store double 0.000000e+00, double* %6, align 8, !tbaa !8
  store double 0.000000e+00, double* %7, align 8, !tbaa !8
  call void @llvm.memset.p0i8.i64(i8* bitcast ([10 x double]* @q to i8*), i8 0, i64 80, i32 16, i1 false)
  store i32 -1, i32* %12, align 4, !tbaa !3
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*, i32*, i32*, i32*, double*, i32*, [131072 x double]*)* @.omp_outlined..4 to void (i32*, i32*, ...)*), double* nonnull %6, double* nonnull %7, i32* nonnull %11, i32* nonnull %10, i32* nonnull %12, double* nonnull %8, i32* nonnull %13, [131072 x double]* nonnull @x) #2
  %162 = call i32 @sched_getcpu()
  %IndexSExt136 = sext i32 %162 to i64
  %IndexValMul137 = mul i64 %IndexSExt136, 89
  %IndexValAdd138 = add i64 %IndexValMul137, 28
  %163 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd138
  %OldBBCounter139 = load i64, i64* %163
  %NewBBCounter140 = add i64 %OldBBCounter139, 1
  store i64 %NewBBCounter140, i64* %163
  call void @timer_stop(i32 1) #2
  %164 = call double @timer_read(i32 1) #2
  call void @llvm.lifetime.end.p0i8(i64 14, i8* nonnull %24) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #2
  call void @_Z18WriteOpenMPProfilePll(i64* getelementptr inbounds ([6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 0), i64 6408)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #3

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #3

; Function Attrs: norecurse nounwind uwtable
define void @vranlc(i32, double* nocapture, double, double* nocapture) local_unnamed_addr #4 {
  %5 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %5 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 29
  %6 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %6
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %6
  %7 = fmul double %2, 0x3E80000000000000
  %8 = fptosi double %7 to i32
  %9 = sitofp i32 %8 to double
  %10 = fmul double %9, 0x4160000000000000
  %11 = fsub double %2, %10
  %12 = load double, double* %1, align 8, !tbaa !8
  %13 = icmp slt i32 %0, 1
  br i1 %13, label %47, label %14

; <label>:14:                                     ; preds = %4
  %IndexSExt1 = sext i32 %5 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 30
  %15 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %15
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %15
  %16 = add i32 %0, 1
  %17 = zext i32 %16 to i64
  br label %18

; <label>:18:                                     ; preds = %18, %14
  %19 = phi i64 [ %45, %18 ], [ 1, %14 ]
  %20 = phi double [ %42, %18 ], [ %12, %14 ]
  %IndexSExt6 = sext i32 %5 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 31
  %21 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %21
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %21
  %22 = fmul double %20, 0x3E80000000000000
  %23 = fptosi double %22 to i32
  %24 = sitofp i32 %23 to double
  %25 = fmul double %24, 0x4160000000000000
  %26 = fsub double %20, %25
  %27 = fmul double %26, %9
  %28 = fmul double %11, %24
  %29 = fadd double %28, %27
  %30 = fmul double %29, 0x3E80000000000000
  %31 = fptosi double %30 to i32
  %32 = sitofp i32 %31 to double
  %33 = fmul double %32, 0x4160000000000000
  %34 = fsub double %29, %33
  %35 = fmul double %34, 0x4160000000000000
  %36 = fmul double %11, %26
  %37 = fadd double %36, %35
  %38 = fmul double %37, 0x3D10000000000000
  %39 = fptosi double %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fmul double %40, 0x42D0000000000000
  %42 = fsub double %37, %41
  %43 = fmul double %42, 0x3D10000000000000
  %44 = getelementptr inbounds double, double* %3, i64 %19
  store double %43, double* %44, align 8, !tbaa !8
  %45 = add nuw nsw i64 %19, 1
  %46 = icmp eq i64 %45, %17
  br i1 %46, label %47, label %18

; <label>:47:                                     ; preds = %18, %4
  %48 = phi double [ %12, %4 ], [ %42, %18 ]
  %IndexSExt11 = sext i32 %5 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 32
  %49 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %49
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %49
  store double %48, double* %1, align 8, !tbaa !8
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define double @randlc(double* nocapture, double) local_unnamed_addr #4 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 33
  %4 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  %5 = fmul double %1, 0x3E80000000000000
  %6 = fptosi double %5 to i32
  %7 = sitofp i32 %6 to double
  %8 = fmul double %7, 0x4160000000000000
  %9 = fsub double %1, %8
  %10 = load double, double* %0, align 8, !tbaa !8
  %11 = fmul double %10, 0x3E80000000000000
  %12 = fptosi double %11 to i32
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, 0x4160000000000000
  %15 = fsub double %10, %14
  %16 = fmul double %15, %7
  %17 = fmul double %9, %13
  %18 = fadd double %17, %16
  %19 = fmul double %18, 0x3E80000000000000
  %20 = fptosi double %19 to i32
  %21 = sitofp i32 %20 to double
  %22 = fmul double %21, 0x4160000000000000
  %23 = fsub double %18, %22
  %24 = fmul double %23, 0x4160000000000000
  %25 = fmul double %9, %15
  %26 = fadd double %25, %24
  %27 = fmul double %26, 0x3D10000000000000
  %28 = fptosi double %27 to i32
  %29 = sitofp i32 %28 to double
  %30 = fmul double %29, 0x42D0000000000000
  %31 = fsub double %26, %30
  store double %31, double* %0, align 8, !tbaa !8
  %32 = fmul double %31, 0x3D10000000000000
  ret double %32
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone) #0 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 34
  %4 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #2
  store i32 0, i32* %5, align 4, !tbaa !3
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #2
  store i32 131071, i32* %6, align 4, !tbaa !3
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #2
  store i32 1, i32* %7, align 4, !tbaa !3
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #2
  store i32 0, i32* %8, align 4, !tbaa !3
  %13 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @2, i32 %13, i32 34, i32* nonnull %8, i32* nonnull %5, i32* nonnull %6, i32* nonnull %7, i32 1, i32 1) #2
  %14 = load i32, i32* %6, align 4, !tbaa !3
  %15 = icmp slt i32 %14, 131071
  %16 = select i1 %15, i32 %14, i32 131071
  store i32 %16, i32* %6, align 4, !tbaa !3
  %17 = load i32, i32* %5, align 4, !tbaa !3
  %18 = icmp sgt i32 %17, %16
  br i1 %18, label %100, label %19

; <label>:19:                                     ; preds = %2
  %IndexSExt1 = sext i32 %3 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 35
  %20 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %20
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %20
  %21 = sext i32 %17 to i64
  %22 = sext i32 %16 to i64
  %23 = icmp sgt i64 %22, %21
  %24 = select i1 %23, i64 %22, i64 %21
  %25 = add nsw i64 %24, 1
  %26 = sub nsw i64 %25, %21
  %27 = icmp ult i64 %26, 4
  br i1 %27, label %91, label %28

; <label>:28:                                     ; preds = %19
  %IndexSExt6 = sext i32 %3 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 36
  %29 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %29
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %29
  %30 = and i64 %26, -4
  %31 = add nsw i64 %30, %21
  %32 = add nsw i64 %30, -4
  %33 = lshr exact i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 3
  %36 = icmp ult i64 %32, 12
  br i1 %36, label %70, label %37

; <label>:37:                                     ; preds = %28
  %IndexSExt11 = sext i32 %3 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 37
  %38 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %38
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %38
  %39 = sub nsw i64 %34, %35
  br label %40

; <label>:40:                                     ; preds = %40, %37
  %41 = phi i64 [ 0, %37 ], [ %67, %40 ]
  %42 = phi i64 [ %39, %37 ], [ %68, %40 ]
  %IndexSExt16 = sext i32 %3 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 38
  %43 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %43
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %43
  %44 = add i64 %41, %21
  %45 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %44
  %46 = bitcast double* %45 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %46, align 8, !tbaa !8
  %47 = getelementptr double, double* %45, i64 2
  %48 = bitcast double* %47 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %48, align 8, !tbaa !8
  %49 = or i64 %41, 4
  %50 = add i64 %49, %21
  %51 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %50
  %52 = bitcast double* %51 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %52, align 8, !tbaa !8
  %53 = getelementptr double, double* %51, i64 2
  %54 = bitcast double* %53 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %54, align 8, !tbaa !8
  %55 = or i64 %41, 8
  %56 = add i64 %55, %21
  %57 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %56
  %58 = bitcast double* %57 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %58, align 8, !tbaa !8
  %59 = getelementptr double, double* %57, i64 2
  %60 = bitcast double* %59 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %60, align 8, !tbaa !8
  %61 = or i64 %41, 12
  %62 = add i64 %61, %21
  %63 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %62
  %64 = bitcast double* %63 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %64, align 8, !tbaa !8
  %65 = getelementptr double, double* %63, i64 2
  %66 = bitcast double* %65 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %66, align 8, !tbaa !8
  %67 = add i64 %41, 16
  %68 = add i64 %42, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %40, !llvm.loop !10

; <label>:70:                                     ; preds = %40, %28
  %71 = phi i64 [ 0, %28 ], [ %67, %40 ]
  %IndexSExt21 = sext i32 %3 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 39
  %72 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %72
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %72
  %73 = icmp eq i64 %35, 0
  br i1 %73, label %88, label %74

; <label>:74:                                     ; preds = %70
  %IndexSExt26 = sext i32 %3 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 40
  %75 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %75
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %75
  br label %76

; <label>:76:                                     ; preds = %76, %74
  %77 = phi i64 [ %71, %74 ], [ %85, %76 ]
  %78 = phi i64 [ %35, %74 ], [ %86, %76 ]
  %IndexSExt31 = sext i32 %3 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 89
  %IndexValAdd33 = add i64 %IndexValMul32, 41
  %79 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %79
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %79
  %80 = add i64 %77, %21
  %81 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %80
  %82 = bitcast double* %81 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %82, align 8, !tbaa !8
  %83 = getelementptr double, double* %81, i64 2
  %84 = bitcast double* %83 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %84, align 8, !tbaa !8
  %85 = add i64 %77, 4
  %86 = add i64 %78, -1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %88, label %76, !llvm.loop !12

; <label>:88:                                     ; preds = %76, %70
  %IndexSExt36 = sext i32 %3 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 89
  %IndexValAdd38 = add i64 %IndexValMul37, 42
  %89 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %89
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %89
  %90 = icmp eq i64 %26, %30
  br i1 %90, label %100, label %91

; <label>:91:                                     ; preds = %88, %19
  %92 = phi i64 [ %21, %19 ], [ %31, %88 ]
  %IndexSExt41 = sext i32 %3 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 89
  %IndexValAdd43 = add i64 %IndexValMul42, 43
  %93 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %93
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %93
  br label %94

; <label>:94:                                     ; preds = %94, %91
  %95 = phi i64 [ %98, %94 ], [ %92, %91 ]
  %IndexSExt46 = sext i32 %3 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 89
  %IndexValAdd48 = add i64 %IndexValMul47, 44
  %96 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %96
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %96
  %97 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %95
  store double 0xD47D42AEA2879F2E, double* %97, align 8, !tbaa !8
  %98 = add nsw i64 %95, 1
  %99 = icmp slt i64 %95, %22
  br i1 %99, label %94, label %100, !llvm.loop !14

; <label>:100:                                    ; preds = %94, %88, %2
  %IndexSExt51 = sext i32 %3 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 89
  %IndexValAdd53 = add i64 %IndexValMul52, 45
  %101 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %101
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %101
  call void @__kmpc_for_static_fini(%ident_t* nonnull @2, i32 %13) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #2
  ret void
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

; Function Attrs: norecurse nounwind uwtable
define void @timer_clear(i32) local_unnamed_addr #4 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 46
  %3 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %4
  store double 0.000000e+00, double* %5, align 8, !tbaa !8
  ret void
}

; Function Attrs: nounwind uwtable
define void @timer_start(i32) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 47
  %3 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #2
  call void @wtime_(double* nonnull %4) #2
  %6 = bitcast double* %4 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #2
  %8 = sext i32 %0 to i64
  %9 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %8
  %10 = bitcast double* %9 to i64*
  store i64 %7, i64* %10, align 8, !tbaa !8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..4(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), i32* nocapture readnone dereferenceable(4), i32* nocapture readonly dereferenceable(4), i32* nocapture readonly dereferenceable(4), double* nocapture readonly dereferenceable(8), i32* nocapture dereferenceable(4), [131072 x double]* readonly dereferenceable(1048576)) #0 {
  %11 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %11 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 48
  %12 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %12
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %12
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca [10 x double], align 16
  %16 = bitcast [10 x double]* %15 to i8*
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca [2 x i8*], align 8
  %24 = icmp eq [131072 x double]* %9, @x
  br i1 %24, label %28, label %25

; <label>:25:                                     ; preds = %10
  %IndexSExt1 = sext i32 %11 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 49
  %26 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %26
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %26
  %27 = bitcast [131072 x double]* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([131072 x double]* @x to i8*), i8* nonnull %27, i64 1048576, i32 16, i1 false), !tbaa.struct !16
  br label %28

; <label>:28:                                     ; preds = %25, %10
  %IndexSExt6 = sext i32 %11 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 50
  %29 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %29
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %29
  %30 = load i32, i32* %0, align 4, !tbaa !3
  tail call void @__kmpc_barrier(%ident_t* nonnull @1, i32 %30) #2
  %31 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #2
  %32 = bitcast double* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #2
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %16) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull %16, i8 0, i64 80, i32 16, i1 false)
  %33 = load i32, i32* %5, align 4, !tbaa !3
  %34 = add nsw i32 %33, -1
  %35 = icmp sgt i32 %33, 0
  br i1 %35, label %42, label %36

; <label>:36:                                     ; preds = %28
  %IndexSExt11 = sext i32 %11 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 51
  %37 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %37
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %37
  %38 = bitcast i32* %20 to i8*
  %39 = bitcast i32* %19 to i8*
  %40 = bitcast i32* %18 to i8*
  %41 = bitcast i32* %17 to i8*
  br label %197

; <label>:42:                                     ; preds = %28
  %IndexSExt16 = sext i32 %11 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 52
  %43 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %43
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %43
  %44 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #2
  store i32 0, i32* %17, align 4, !tbaa !3
  %45 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #2
  store i32 %34, i32* %18, align 4, !tbaa !3
  %46 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #2
  store i32 1, i32* %19, align 4, !tbaa !3
  %47 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %47) #2
  store i32 0, i32* %20, align 4, !tbaa !3
  %48 = bitcast double* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #2
  store double 0.000000e+00, double* %21, align 8, !tbaa !8
  %49 = bitcast double* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %49) #2
  store double 0.000000e+00, double* %22, align 8, !tbaa !8
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @2, i32 %30, i32 34, i32* nonnull %20, i32* nonnull %17, i32* nonnull %18, i32* nonnull %19, i32 1, i32 1) #2
  %50 = load i32, i32* %18, align 4, !tbaa !3
  %51 = icmp sgt i32 %50, %34
  %52 = select i1 %51, i32 %34, i32 %50
  store i32 %52, i32* %18, align 4, !tbaa !3
  %53 = load i32, i32* %17, align 4, !tbaa !3
  %54 = icmp sgt i32 %53, %52
  br i1 %54, label %137, label %55

; <label>:55:                                     ; preds = %42
  %IndexSExt21 = sext i32 %11 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 53
  %56 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %56
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %56
  %57 = bitcast double* %7 to i64*
  %58 = bitcast double* %14 to i64*
  br label %59

; <label>:59:                                     ; preds = %133, %55
  %60 = phi i32 [ %53, %55 ], [ %62, %133 ]
  %IndexSExt26 = sext i32 %11 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 54
  %61 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %61
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %61
  %62 = add nsw i32 %60, 1
  %63 = load i32, i32* %6, align 4, !tbaa !3
  %64 = add nsw i32 %63, %62
  store double 0x41B033C4D7000000, double* %13, align 8, !tbaa !8
  %65 = load i64, i64* %57, align 8, !tbaa !8
  store i64 %65, i64* %58, align 8, !tbaa !8
  br label %66

; <label>:66:                                     ; preds = %81, %59
  %67 = phi i32 [ %64, %59 ], [ %70, %81 ]
  %68 = phi i32 [ 1, %59 ], [ %85, %81 ]
  %IndexSExt31 = sext i32 %11 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 89
  %IndexValAdd33 = add i64 %IndexValMul32, 55
  %69 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %69
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %69
  %70 = sdiv i32 %67, 2
  %71 = shl nsw i32 %70, 1
  %72 = icmp eq i32 %71, %67
  br i1 %72, label %77, label %73

; <label>:73:                                     ; preds = %66
  %IndexSExt36 = sext i32 %11 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 89
  %IndexValAdd38 = add i64 %IndexValMul37, 56
  %74 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %74
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %74
  %75 = load double, double* %14, align 8, !tbaa !8
  %76 = call double @randlc(double* nonnull %13, double %75) #2
  br label %77

; <label>:77:                                     ; preds = %73, %66
  %IndexSExt41 = sext i32 %11 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 89
  %IndexValAdd43 = add i64 %IndexValMul42, 57
  %78 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %78
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %78
  %79 = add i32 %67, 1
  %80 = icmp ult i32 %79, 3
  br i1 %80, label %87, label %81

; <label>:81:                                     ; preds = %77
  %IndexSExt46 = sext i32 %11 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 89
  %IndexValAdd48 = add i64 %IndexValMul47, 58
  %82 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %82
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %82
  %83 = load double, double* %14, align 8, !tbaa !8
  %84 = call double @randlc(double* nonnull %14, double %83) #2
  %85 = add nuw nsw i32 %68, 1
  %86 = icmp ult i32 %85, 101
  br i1 %86, label %66, label %87

; <label>:87:                                     ; preds = %81, %77
  %IndexSExt51 = sext i32 %11 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 89
  %IndexValAdd53 = add i64 %IndexValMul52, 59
  %88 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %88
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %88
  call void @vranlc(i32 131072, double* nonnull %13, double 0x41D2309CE5400000, double* getelementptr ([131072 x double], [131072 x double]* @x, i64 0, i64 -1)) #2
  br label %89

; <label>:89:                                     ; preds = %129, %87
  %90 = phi i64 [ 0, %87 ], [ %131, %129 ]
  %IndexSExt56 = sext i32 %11 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 89
  %IndexValAdd58 = add i64 %IndexValMul57, 60
  %91 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %91
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %91
  %92 = shl nuw nsw i64 %90, 1
  %93 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %92
  %94 = bitcast double* %93 to <2 x double>*
  %95 = load <2 x double>, <2 x double>* %94, align 16, !tbaa !8
  %96 = fmul <2 x double> %95, <double 2.000000e+00, double 2.000000e+00>
  %97 = fadd <2 x double> %96, <double -1.000000e+00, double -1.000000e+00>
  %98 = fmul <2 x double> %97, %97
  %99 = extractelement <2 x double> %98, i32 0
  %100 = extractelement <2 x double> %98, i32 1
  %101 = fadd double %99, %100
  store double %101, double* %13, align 8, !tbaa !8
  %102 = fcmp ugt double %101, 1.000000e+00
  br i1 %102, label %129, label %103

; <label>:103:                                    ; preds = %89
  %IndexSExt61 = sext i32 %11 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 89
  %IndexValAdd63 = add i64 %IndexValMul62, 61
  %104 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %104
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %104
  %105 = call double @log(double %101) #2
  %106 = fmul double %105, -2.000000e+00
  %107 = load double, double* %13, align 8, !tbaa !8
  %108 = fdiv double %106, %107
  %109 = call double @sqrt(double %108) #2
  store double %109, double* %14, align 8, !tbaa !8
  %110 = insertelement <2 x double> undef, double %109, i32 0
  %111 = shufflevector <2 x double> %110, <2 x double> undef, <2 x i32> zeroinitializer
  %112 = fmul <2 x double> %97, %111
  %113 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %112)
  %114 = extractelement <2 x double> %113, i32 0
  %115 = extractelement <2 x double> %113, i32 1
  %116 = fcmp ogt double %114, %115
  %117 = select i1 %116, double %114, double %115
  %118 = fptosi double %117 to i32
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 %119
  %121 = load double, double* %120, align 8, !tbaa !8
  %122 = fadd double %121, 1.000000e+00
  store double %122, double* %120, align 8, !tbaa !8
  %123 = load double, double* %21, align 8, !tbaa !8
  %124 = extractelement <2 x double> %112, i32 0
  %125 = fadd double %124, %123
  store double %125, double* %21, align 8, !tbaa !8
  %126 = load double, double* %22, align 8, !tbaa !8
  %127 = extractelement <2 x double> %112, i32 1
  %128 = fadd double %127, %126
  store double %128, double* %22, align 8, !tbaa !8
  br label %129

; <label>:129:                                    ; preds = %103, %89
  %IndexSExt66 = sext i32 %11 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 89
  %IndexValAdd68 = add i64 %IndexValMul67, 62
  %130 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %130
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %130
  %131 = add nuw nsw i64 %90, 1
  %132 = icmp eq i64 %131, 65536
  br i1 %132, label %133, label %89

; <label>:133:                                    ; preds = %129
  %IndexSExt71 = sext i32 %11 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 89
  %IndexValAdd73 = add i64 %IndexValMul72, 63
  %134 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %134
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %134
  %135 = load i32, i32* %18, align 4, !tbaa !3
  %136 = icmp slt i32 %60, %135
  br i1 %136, label %59, label %137

; <label>:137:                                    ; preds = %133, %42
  %IndexSExt76 = sext i32 %11 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 89
  %IndexValAdd78 = add i64 %IndexValMul77, 64
  %138 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %138
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %138
  call void @__kmpc_for_static_fini(%ident_t* nonnull @2, i32 %30) #2
  %139 = bitcast [2 x i8*]* %23 to double**
  store double* %21, double** %139, align 8
  %140 = getelementptr inbounds [2 x i8*], [2 x i8*]* %23, i64 0, i64 1
  %141 = bitcast i8** %140 to double**
  store double* %22, double** %141, align 8
  %142 = bitcast [2 x i8*]* %23 to i8*
  %143 = call i32 @__kmpc_reduce(%ident_t* nonnull @3, i32 %30, i32 2, i64 16, i8* nonnull %142, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #2
  switch i32 %143, label %182 [
    i32 1, label %144
    i32 2, label %152
  ]

; <label>:144:                                    ; preds = %137
  %IndexSExt81 = sext i32 %11 to i64
  %IndexValMul82 = mul i64 %IndexSExt81, 89
  %IndexValAdd83 = add i64 %IndexValMul82, 65
  %145 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd83
  %OldBBCounter84 = load i64, i64* %145
  %NewBBCounter85 = add i64 %OldBBCounter84, 1
  store i64 %NewBBCounter85, i64* %145
  %146 = load double, double* %2, align 8, !tbaa !8
  %147 = load double, double* %21, align 8, !tbaa !8
  %148 = fadd double %146, %147
  store double %148, double* %2, align 8, !tbaa !8
  %149 = load double, double* %3, align 8, !tbaa !8
  %150 = load double, double* %22, align 8, !tbaa !8
  %151 = fadd double %149, %150
  store double %151, double* %3, align 8, !tbaa !8
  call void @__kmpc_end_reduce(%ident_t* nonnull @3, i32 %30, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #2
  br label %182

; <label>:152:                                    ; preds = %137
  %IndexSExt86 = sext i32 %11 to i64
  %IndexValMul87 = mul i64 %IndexSExt86, 89
  %IndexValAdd88 = add i64 %IndexValMul87, 66
  %153 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd88
  %OldBBCounter89 = load i64, i64* %153
  %NewBBCounter90 = add i64 %OldBBCounter89, 1
  store i64 %NewBBCounter90, i64* %153
  %154 = bitcast double* %2 to i64*
  %155 = load atomic i64, i64* %154 monotonic, align 8, !tbaa !8
  %156 = load double, double* %21, align 8, !tbaa !8
  br label %157

; <label>:157:                                    ; preds = %157, %152
  %158 = phi i64 [ %155, %152 ], [ %164, %157 ]
  %IndexSExt91 = sext i32 %11 to i64
  %IndexValMul92 = mul i64 %IndexSExt91, 89
  %IndexValAdd93 = add i64 %IndexValMul92, 67
  %159 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd93
  %OldBBCounter94 = load i64, i64* %159
  %NewBBCounter95 = add i64 %OldBBCounter94, 1
  store i64 %NewBBCounter95, i64* %159
  %160 = bitcast i64 %158 to double
  %161 = fadd double %156, %160
  %162 = bitcast double %161 to i64
  %163 = cmpxchg i64* %154, i64 %158, i64 %162 monotonic monotonic
  %164 = extractvalue { i64, i1 } %163, 0
  %165 = extractvalue { i64, i1 } %163, 1
  br i1 %165, label %166, label %157

; <label>:166:                                    ; preds = %157
  %IndexSExt96 = sext i32 %11 to i64
  %IndexValMul97 = mul i64 %IndexSExt96, 89
  %IndexValAdd98 = add i64 %IndexValMul97, 68
  %167 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd98
  %OldBBCounter99 = load i64, i64* %167
  %NewBBCounter100 = add i64 %OldBBCounter99, 1
  store i64 %NewBBCounter100, i64* %167
  %168 = bitcast double* %3 to i64*
  %169 = load atomic i64, i64* %168 monotonic, align 8, !tbaa !8
  %170 = load double, double* %22, align 8, !tbaa !8
  br label %171

; <label>:171:                                    ; preds = %171, %166
  %172 = phi i64 [ %169, %166 ], [ %178, %171 ]
  %IndexSExt101 = sext i32 %11 to i64
  %IndexValMul102 = mul i64 %IndexSExt101, 89
  %IndexValAdd103 = add i64 %IndexValMul102, 69
  %173 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd103
  %OldBBCounter104 = load i64, i64* %173
  %NewBBCounter105 = add i64 %OldBBCounter104, 1
  store i64 %NewBBCounter105, i64* %173
  %174 = bitcast i64 %172 to double
  %175 = fadd double %170, %174
  %176 = bitcast double %175 to i64
  %177 = cmpxchg i64* %168, i64 %172, i64 %176 monotonic monotonic
  %178 = extractvalue { i64, i1 } %177, 0
  %179 = extractvalue { i64, i1 } %177, 1
  br i1 %179, label %180, label %171

; <label>:180:                                    ; preds = %171
  %IndexSExt106 = sext i32 %11 to i64
  %IndexValMul107 = mul i64 %IndexSExt106, 89
  %IndexValAdd108 = add i64 %IndexValMul107, 70
  %181 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd108
  %OldBBCounter109 = load i64, i64* %181
  %NewBBCounter110 = add i64 %OldBBCounter109, 1
  store i64 %NewBBCounter110, i64* %181
  call void @__kmpc_end_reduce(%ident_t* nonnull @3, i32 %30, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #2
  br label %182

; <label>:182:                                    ; preds = %180, %144, %137
  %IndexSExt111 = sext i32 %11 to i64
  %IndexValMul112 = mul i64 %IndexSExt111, 89
  %IndexValAdd113 = add i64 %IndexValMul112, 71
  %183 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd113
  %OldBBCounter114 = load i64, i64* %183
  %NewBBCounter115 = add i64 %OldBBCounter114, 1
  store i64 %NewBBCounter115, i64* %183
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #2
  %184 = bitcast [10 x double]* %15 to <2 x double>*
  %185 = load <2 x double>, <2 x double>* %184, align 16, !tbaa !8
  %186 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 2
  %187 = bitcast double* %186 to <2 x double>*
  %188 = load <2 x double>, <2 x double>* %187, align 16, !tbaa !8
  %189 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 4
  %190 = bitcast double* %189 to <2 x double>*
  %191 = load <2 x double>, <2 x double>* %190, align 16, !tbaa !8
  %192 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 6
  %193 = bitcast double* %192 to <2 x double>*
  %194 = load <2 x double>, <2 x double>* %193, align 16, !tbaa !8
  %195 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 8
  %196 = load double, double* %195, align 16, !tbaa !8
  br label %197

; <label>:197:                                    ; preds = %182, %36
  %198 = phi i8* [ %41, %36 ], [ %44, %182 ]
  %199 = phi i8* [ %40, %36 ], [ %45, %182 ]
  %200 = phi i8* [ %39, %36 ], [ %46, %182 ]
  %201 = phi i8* [ %38, %36 ], [ %47, %182 ]
  %202 = phi double [ 0.000000e+00, %36 ], [ %196, %182 ]
  %203 = phi <2 x double> [ zeroinitializer, %36 ], [ %185, %182 ]
  %204 = phi <2 x double> [ zeroinitializer, %36 ], [ %188, %182 ]
  %205 = phi <2 x double> [ zeroinitializer, %36 ], [ %191, %182 ]
  %206 = phi <2 x double> [ zeroinitializer, %36 ], [ %194, %182 ]
  %IndexSExt116 = sext i32 %11 to i64
  %IndexValMul117 = mul i64 %IndexSExt116, 89
  %IndexValAdd118 = add i64 %IndexValMul117, 72
  %207 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd118
  %OldBBCounter119 = load i64, i64* %207
  %NewBBCounter120 = add i64 %OldBBCounter119, 1
  store i64 %NewBBCounter120, i64* %207
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %201) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %200) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %199) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %198) #2
  call void @__kmpc_barrier(%ident_t* nonnull @1, i32 %30) #2
  call void @__kmpc_critical(%ident_t* nonnull @0, i32 %30, [8 x i32]* nonnull @.gomp_critical_user_.var) #2
  %208 = load <2 x double>, <2 x double>* bitcast ([10 x double]* @q to <2 x double>*), align 16, !tbaa !8
  %209 = fadd <2 x double> %203, %208
  store <2 x double> %209, <2 x double>* bitcast ([10 x double]* @q to <2 x double>*), align 16, !tbaa !8
  %210 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 2) to <2 x double>*), align 16, !tbaa !8
  %211 = fadd <2 x double> %204, %210
  store <2 x double> %211, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 2) to <2 x double>*), align 16, !tbaa !8
  %212 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 4) to <2 x double>*), align 16, !tbaa !8
  %213 = fadd <2 x double> %205, %212
  store <2 x double> %213, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 4) to <2 x double>*), align 16, !tbaa !8
  %214 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 6) to <2 x double>*), align 16, !tbaa !8
  %215 = fadd <2 x double> %206, %214
  store <2 x double> %215, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 6) to <2 x double>*), align 16, !tbaa !8
  %216 = getelementptr inbounds [10 x double], [10 x double]* %15, i64 0, i64 9
  %217 = load double, double* %216, align 8, !tbaa !8
  %218 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 8) to <2 x double>*), align 16, !tbaa !8
  %219 = insertelement <2 x double> undef, double %202, i32 0
  %220 = insertelement <2 x double> %219, double %217, i32 1
  %221 = fadd <2 x double> %220, %218
  store <2 x double> %221, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 8) to <2 x double>*), align 16, !tbaa !8
  call void @__kmpc_end_critical(%ident_t* nonnull @0, i32 %30, [8 x i32]* nonnull @.gomp_critical_user_.var) #2
  %222 = call i32 @__kmpc_master(%ident_t* nonnull @0, i32 %30) #2
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %227, label %224

; <label>:224:                                    ; preds = %197
  %IndexSExt121 = sext i32 %11 to i64
  %IndexValMul122 = mul i64 %IndexSExt121, 89
  %IndexValAdd123 = add i64 %IndexValMul122, 73
  %225 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd123
  %OldBBCounter124 = load i64, i64* %225
  %NewBBCounter125 = add i64 %OldBBCounter124, 1
  store i64 %NewBBCounter125, i64* %225
  %226 = call i32 @omp_get_num_threads() #2
  store i32 %226, i32* %8, align 4, !tbaa !3
  call void @__kmpc_end_master(%ident_t* nonnull @0, i32 %30) #2
  br label %227

; <label>:227:                                    ; preds = %224, %197
  %IndexSExt126 = sext i32 %11 to i64
  %IndexValMul127 = mul i64 %IndexSExt126, 89
  %IndexValAdd128 = add i64 %IndexValMul127, 74
  %228 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd128
  %OldBBCounter129 = load i64, i64* %228
  %NewBBCounter130 = add i64 %OldBBCounter129, 1
  store i64 %NewBBCounter130, i64* %228
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %16) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #2
  ret void
}

; Function Attrs: nounwind uwtable
define void @timer_stop(i32) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 75
  %3 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #2
  call void @wtime_(double* nonnull %4) #2
  %6 = load double, double* %4, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #2
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %7
  %9 = load double, double* %8, align 8, !tbaa !8
  %10 = fsub double %6, %9
  %11 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %7
  %12 = load double, double* %11, align 8, !tbaa !8
  %13 = fadd double %12, %10
  store double %13, double* %11, align 8, !tbaa !8
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define double @timer_read(i32) local_unnamed_addr #5 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 76
  %3 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %4
  %6 = load double, double* %5, align 8, !tbaa !8
  ret double %6
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @wtime_(double* nocapture) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 77
  %3 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = alloca %struct.timeval, align 8
  %5 = bitcast %struct.timeval* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #2
  %6 = call i32 @gettimeofday(%struct.timeval* nonnull %4, %struct.timezone* null) #2
  %7 = load i32, i32* @wtime_.sec, align 4, !tbaa !3
  %8 = icmp slt i32 %7, 0
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 0
  %10 = load i64, i64* %9, align 8, !tbaa !17
  br i1 %8, label %11, label %14

; <label>:11:                                     ; preds = %1
  %IndexSExt1 = sext i32 %2 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 78
  %12 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %12
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %12
  %13 = trunc i64 %10 to i32
  store i32 %13, i32* @wtime_.sec, align 4, !tbaa !3
  br label %14

; <label>:14:                                     ; preds = %11, %1
  %15 = phi i32 [ %13, %11 ], [ %7, %1 ]
  %IndexSExt6 = sext i32 %2 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 79
  %16 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %16
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %16
  %17 = sext i32 %15 to i64
  %18 = sub nsw i64 %10, %17
  %19 = sitofp i64 %18 to double
  %20 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i64 0, i32 1
  %21 = load i64, i64* %20, align 8, !tbaa !20
  %22 = sitofp i64 %21 to double
  %23 = fmul double %22, 0x3EB0C6F7A0B5ED8D
  %24 = fadd double %23, %19
  store double %24, double* %0, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #2
  ret void
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) local_unnamed_addr #3

declare void @__kmpc_barrier(%ident_t*, i32) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

; Function Attrs: nounwind
declare double @log(double) local_unnamed_addr #3

; Function Attrs: nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #6

declare void @__kmpc_for_static_fini(%ident_t*, i32) local_unnamed_addr

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8* nocapture readonly, i8* nocapture readonly) #4 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 80
  %4 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  %5 = bitcast i8* %1 to double**
  %6 = load double*, double** %5, align 8
  %7 = bitcast i8* %0 to double**
  %8 = load double*, double** %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 8
  %10 = bitcast i8* %9 to double**
  %11 = load double*, double** %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 8
  %13 = bitcast i8* %12 to double**
  %14 = load double*, double** %13, align 8
  %15 = load double, double* %8, align 8, !tbaa !8
  %16 = load double, double* %6, align 8, !tbaa !8
  %17 = fadd double %15, %16
  store double %17, double* %8, align 8, !tbaa !8
  %18 = load double, double* %14, align 8, !tbaa !8
  %19 = load double, double* %11, align 8, !tbaa !8
  %20 = fadd double %18, %19
  store double %20, double* %14, align 8, !tbaa !8
  ret void
}

declare i32 @__kmpc_reduce(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_reduce(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_critical(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_critical(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare i32 @__kmpc_master(%ident_t*, i32) local_unnamed_addr

declare i32 @omp_get_num_threads() local_unnamed_addr #7

declare void @__kmpc_end_master(%ident_t*, i32) local_unnamed_addr

; Function Attrs: nounwind uwtable
define void @c_print_results(i8*, i8 signext, i32, i32, i32, i32, i32, double, double, i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #0 {
  %21 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %21 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 81
  %22 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %22
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %22
  %23 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.1, i64 0, i64 0), i8* %0)
  %24 = sext i8 %1 to i32
  %25 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2.2, i64 0, i64 0), i32 %24)
  %26 = or i32 %4, %3
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

; <label>:28:                                     ; preds = %20
  %IndexSExt1 = sext i32 %21 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 82
  %29 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %29
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %29
  %30 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3.3, i64 0, i64 0), i32 %2)
  br label %34

; <label>:31:                                     ; preds = %20
  %IndexSExt6 = sext i32 %21 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 83
  %32 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %32
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %32
  %33 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i32 %2, i32 %3, i32 %4)
  br label %34

; <label>:34:                                     ; preds = %31, %28
  %IndexSExt11 = sext i32 %21 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 84
  %35 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %35
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %35
  %36 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %5)
  %37 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i32 %6)
  %38 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0), double %7)
  %39 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), double %8)
  %40 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i8* %9)
  %41 = icmp eq i32 %10, 0
  br i1 %41, label %45, label %42

; <label>:42:                                     ; preds = %34
  %IndexSExt16 = sext i32 %21 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 85
  %43 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %43
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %43
  %44 = tail call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.23, i64 0, i64 0))
  br label %48

; <label>:45:                                     ; preds = %34
  %IndexSExt21 = sext i32 %21 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 86
  %46 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %46
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %46
  %47 = tail call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.4, i64 0, i64 0))
  br label %48

; <label>:48:                                     ; preds = %45, %42
  %IndexSExt26 = sext i32 %21 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 87
  %49 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %49
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %49
  %50 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0), i8* %11)
  %51 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0), i8* %12)
  %52 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.22, i64 0, i64 0))
  %53 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* %13)
  %54 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), i8* %14)
  %55 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* %15)
  %56 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0), i8* %16)
  %57 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0), i8* %17)
  %58 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0), i8* %18)
  %59 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i64 0, i64 0), i8* %19)
  ret void
}

; Function Attrs: nounwind uwtable
define double @elapsed_time() local_unnamed_addr #0 {
  %1 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %1 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 88
  %2 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %2
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %2
  %3 = alloca double, align 8
  %4 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #2
  call void @wtime_(double* nonnull %3) #2
  %5 = load double, double* %3, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #2
  ret double %5
}

; Function Attrs: uwtable
define void @_Z18WriteOpenMPProfilePll(i64* %BBCounters, i64 %array_size) #8 {
  %1 = alloca i64*, align 8
  %2 = alloca i64, align 8
  %outstring = alloca [150 x i8], align 16
  %hostname = alloca [100 x i8], align 16
  %pid = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  store i64* %BBCounters, i64** %1, align 8
  store i64 %array_size, i64* %2, align 8
  %3 = call i32 @getpid() #2
  store i32 %3, i32* %pid, align 4
  %4 = getelementptr inbounds [100 x i8], [100 x i8]* %hostname, i32 0, i32 0
  %5 = call i32 @gethostname(i8* %4, i64 99) #2
  %6 = getelementptr inbounds [150 x i8], [150 x i8]* %outstring, i32 0, i32 0
  %7 = getelementptr inbounds [100 x i8], [100 x i8]* %hostname, i32 0, i32 0
  %8 = load i32, i32* %pid, align 4
  %9 = call i32 (i8*, i8*, ...) @sprintf(i8* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* %7, i32 %8) #2
  %10 = getelementptr inbounds [150 x i8], [150 x i8]* %outstring, i32 0, i32 0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.2, i32 0, i32 0), i8* %10)
  %12 = getelementptr inbounds [150 x i8], [150 x i8]* %outstring, i32 0, i32 0
  %13 = call %struct._IO_FILE* @fopen(i8* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2.3, i32 0, i32 0))
  store %struct._IO_FILE* %13, %struct._IO_FILE** %fp, align 8
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %15 = icmp eq %struct._IO_FILE* %14, null
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %0
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3.4, i32 0, i32 0))
  br label %38

; <label>:18:                                     ; preds = %0
  store i32 0, i32* %i, align 4
  br label %19

; <label>:19:                                     ; preds = %32, %18
  %20 = load i32, i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = load i64, i64* %2, align 8
  %23 = icmp slt i64 %21, %22
  br i1 %23, label %24, label %35

; <label>:24:                                     ; preds = %19
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %26 = load i32, i32* %i, align 4
  %27 = sext i32 %26 to i64
  %28 = load i64*, i64** %1, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 %27
  %30 = load i64, i64* %29, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.5, i32 0, i32 0), i64 %30)
  br label %32

; <label>:32:                                     ; preds = %24
  %33 = load i32, i32* %i, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %i, align 4
  br label %19

; <label>:35:                                     ; preds = %19
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %37 = call i32 @fclose(%struct._IO_FILE* %36)
  br label %38

; <label>:38:                                     ; preds = %35, %16
  ret void
}

; Function Attrs: nounwind
declare i32 @getpid() #9

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #9

declare %struct._IO_FILE* @fopen(i8*, i8*) #10

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #10

declare i32 @fclose(%struct._IO_FILE*) #10

declare i32 @sched_getcpu()

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0, !0, !0, !0, !0, !1}
!llvm.module.flags = !{!2}

!0 = !{!"clang version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
!1 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!5, !5, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"double", !5, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !15, !11}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
!16 = !{i64 0, i64 1048576, !7}
!17 = !{!18, !19, i64 0}
!18 = !{!"timeval", !19, i64 0, !19, i64 8}
!19 = !{!"long", !5, i64 0}
!20 = !{!18, !19, i64 8}
