; ModuleID = 'ep.b_new.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@.gomp_critical_user_.var = common global [8 x i32] zeroinitializer
@elapsed = common local_unnamed_addr global [64 x double] zeroinitializer, align 16
@start = common local_unnamed_addr global [64 x double] zeroinitializer, align 16
@main.dum = private unnamed_addr constant [3 x double] [double 1.000000e+00, double 1.000000e+00, double 1.000000e+00], align 16
@str = private unnamed_addr constant [74 x i8] c"\0A\0A NAS Parallel Benchmarks 3.0 structured OpenMP C version - EP Benchmark\00"
@.str.1 = private unnamed_addr constant [7 x i8] c"%12.0f\00", align 1
@.str.2 = private unnamed_addr constant [43 x i8] c" Number of random numbers generated: %13s\0A\00", align 1
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@x = internal thread_local global [131072 x double] zeroinitializer, align 16
@q = internal unnamed_addr global [10 x double] zeroinitializer, align 16
@wtime_.sec = internal unnamed_addr global i32 -1, align 4
@1 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@2 = private unnamed_addr constant %ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@3 = private unnamed_addr constant %ident_t { i32 0, i32 18, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i32 0, i32 0) }, align 8
@.str.3 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@.str.1.1 = private unnamed_addr constant [27 x i8] c"\0A\0A %s Benchmark Completed\0A\00", align 1
@.str.2.2 = private unnamed_addr constant [46 x i8] c" Class           =                        %c\0A\00", align 1
@.str.3.3 = private unnamed_addr constant [37 x i8] c" Size            =             %12d\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c" Size            =              %3dx%3dx%3d\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c" Iterations      =             %12d\0A\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c" Threads         =             %12d\0A\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c" Time in seconds =             %12.2f\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c" Mop/s total     =             %12.2f\0A\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c" Operation type  = %24s\0A\00", align 1
@str.23 = private unnamed_addr constant [44 x i8] c" Verification    =               SUCCESSFUL\00"
@str.4 = private unnamed_addr constant [44 x i8] c" Verification    =             UNSUCCESSFUL\00"
@.str.12 = private unnamed_addr constant [35 x i8] c" Version         =           %12s\0A\00", align 1
@.str.13 = private unnamed_addr constant [37 x i8] c" Compile date    =             %12s\0A\00", align 1
@str.22 = private unnamed_addr constant [19 x i8] c"\0A Compile options:\00"
@.str.15 = private unnamed_addr constant [23 x i8] c"    CC           = %s\0A\00", align 1
@.str.16 = private unnamed_addr constant [23 x i8] c"    CLINK        = %s\0A\00", align 1
@.str.17 = private unnamed_addr constant [23 x i8] c"    C_LIB        = %s\0A\00", align 1
@.str.18 = private unnamed_addr constant [23 x i8] c"    C_INC        = %s\0A\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"    CFLAGS       = %s\0A\00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"    CLINKFLAGS   = %s\0A\00", align 1
@.str.21 = private unnamed_addr constant [23 x i8] c"    RAND         = %s\0A\00", align 1
@.str = private unnamed_addr constant [13 x i8] c"%s.%d.bbfout\00", align 1
@.str.1.2 = private unnamed_addr constant [17 x i8] c"hello world  %s\0A\00", align 1
@.str.2.3 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.3.4 = private unnamed_addr constant [17 x i8] c"open file wrong\0A\00", align 1
@.str.4.5 = private unnamed_addr constant [5 x i8] c"%ld\09\00", align 1
@BBCounters = internal global [6408 x i64] zeroinitializer

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #0 {
  %3 = call i32 @sched_getcpu()
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca [3 x double], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [14 x i8], align 1
  %14 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #2
  %15 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #2
  %16 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #2
  %17 = bitcast double* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #2
  %18 = bitcast [3 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %18) #2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull %18, i8* bitcast ([3 x double]* @main.dum to i8*), i64 24, i32 16, i1 false)
  %19 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #2
  %20 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #2
  %21 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #2
  %22 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #2
  store i32 1, i32* %12, align 4, !tbaa !3
  %23 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 14, i8* nonnull %23) #2
  %24 = tail call i32 @puts(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @str, i64 0, i64 0))
  %25 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), double 0x41E0000000000000) #2
  %26 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 13
  %27 = load i8, i8* %26, align 1, !tbaa !7
  %28 = icmp eq i8 %27, 46
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 0
  %29 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %29
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %29
  br i1 %28, label %30, label %32

; <label>:30:                                     ; preds = %2
  store i8 32, i8* %26, align 1, !tbaa !7
  %IndexSExt1 = sext i32 %3 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 1
  %31 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %31
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %31
  br label %32

; <label>:32:                                     ; preds = %30, %2
  %33 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 12
  %34 = load i8, i8* %33, align 1, !tbaa !7
  %35 = icmp eq i8 %34, 46
  %IndexSExt6 = sext i32 %3 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 2
  %36 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %36
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %36
  br i1 %35, label %37, label %39

; <label>:37:                                     ; preds = %32
  store i8 32, i8* %33, align 1, !tbaa !7
  %IndexSExt11 = sext i32 %3 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 3
  %38 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %38
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %38
  br label %39

; <label>:39:                                     ; preds = %37, %32
  %40 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 11
  %41 = load i8, i8* %40, align 1, !tbaa !7
  %42 = icmp eq i8 %41, 46
  %IndexSExt16 = sext i32 %3 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 4
  %43 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %43
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %43
  br i1 %42, label %44, label %46

; <label>:44:                                     ; preds = %39
  store i8 32, i8* %40, align 1, !tbaa !7
  %IndexSExt21 = sext i32 %3 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 5
  %45 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %45
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %45
  br label %46

; <label>:46:                                     ; preds = %44, %39
  %47 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 10
  %48 = load i8, i8* %47, align 1, !tbaa !7
  %49 = icmp eq i8 %48, 46
  %IndexSExt26 = sext i32 %3 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 6
  %50 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %50
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %50
  br i1 %49, label %51, label %53

; <label>:51:                                     ; preds = %46
  store i8 32, i8* %47, align 1, !tbaa !7
  %IndexSExt31 = sext i32 %3 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 89
  %IndexValAdd33 = add i64 %IndexValMul32, 7
  %52 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %52
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %52
  br label %53

; <label>:53:                                     ; preds = %51, %46
  %54 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 9
  %55 = load i8, i8* %54, align 1, !tbaa !7
  %56 = icmp eq i8 %55, 46
  %IndexSExt36 = sext i32 %3 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 89
  %IndexValAdd38 = add i64 %IndexValMul37, 8
  %57 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %57
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %57
  br i1 %56, label %58, label %60

; <label>:58:                                     ; preds = %53
  store i8 32, i8* %54, align 1, !tbaa !7
  %IndexSExt41 = sext i32 %3 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 89
  %IndexValAdd43 = add i64 %IndexValMul42, 9
  %59 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %59
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %59
  br label %60

; <label>:60:                                     ; preds = %58, %53
  %61 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 8
  %62 = load i8, i8* %61, align 1, !tbaa !7
  %63 = icmp eq i8 %62, 46
  %IndexSExt46 = sext i32 %3 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 89
  %IndexValAdd48 = add i64 %IndexValMul47, 10
  %64 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %64
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %64
  br i1 %63, label %65, label %67

; <label>:65:                                     ; preds = %60
  store i8 32, i8* %61, align 1, !tbaa !7
  %IndexSExt51 = sext i32 %3 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 89
  %IndexValAdd53 = add i64 %IndexValMul52, 11
  %66 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %66
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %66
  br label %67

; <label>:67:                                     ; preds = %65, %60
  %68 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 7
  %69 = load i8, i8* %68, align 1, !tbaa !7
  %70 = icmp eq i8 %69, 46
  %IndexSExt56 = sext i32 %3 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 89
  %IndexValAdd58 = add i64 %IndexValMul57, 12
  %71 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %71
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %71
  br i1 %70, label %72, label %74

; <label>:72:                                     ; preds = %67
  store i8 32, i8* %68, align 1, !tbaa !7
  %IndexSExt61 = sext i32 %3 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 89
  %IndexValAdd63 = add i64 %IndexValMul62, 13
  %73 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %73
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %73
  br label %74

; <label>:74:                                     ; preds = %72, %67
  %75 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 6
  %76 = load i8, i8* %75, align 1, !tbaa !7
  %77 = icmp eq i8 %76, 46
  %IndexSExt66 = sext i32 %3 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 89
  %IndexValAdd68 = add i64 %IndexValMul67, 14
  %78 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %78
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %78
  br i1 %77, label %79, label %81

; <label>:79:                                     ; preds = %74
  store i8 32, i8* %75, align 1, !tbaa !7
  %IndexSExt71 = sext i32 %3 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 89
  %IndexValAdd73 = add i64 %IndexValMul72, 15
  %80 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %80
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %80
  br label %81

; <label>:81:                                     ; preds = %79, %74
  %82 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 5
  %83 = load i8, i8* %82, align 1, !tbaa !7
  %84 = icmp eq i8 %83, 46
  %IndexSExt76 = sext i32 %3 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 89
  %IndexValAdd78 = add i64 %IndexValMul77, 16
  %85 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %85
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %85
  br i1 %84, label %86, label %88

; <label>:86:                                     ; preds = %81
  store i8 32, i8* %82, align 1, !tbaa !7
  %IndexSExt81 = sext i32 %3 to i64
  %IndexValMul82 = mul i64 %IndexSExt81, 89
  %IndexValAdd83 = add i64 %IndexValMul82, 17
  %87 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd83
  %OldBBCounter84 = load i64, i64* %87
  %NewBBCounter85 = add i64 %OldBBCounter84, 1
  store i64 %NewBBCounter85, i64* %87
  br label %88

; <label>:88:                                     ; preds = %86, %81
  %89 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 4
  %90 = load i8, i8* %89, align 1, !tbaa !7
  %91 = icmp eq i8 %90, 46
  %IndexSExt86 = sext i32 %3 to i64
  %IndexValMul87 = mul i64 %IndexSExt86, 89
  %IndexValAdd88 = add i64 %IndexValMul87, 18
  %92 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd88
  %OldBBCounter89 = load i64, i64* %92
  %NewBBCounter90 = add i64 %OldBBCounter89, 1
  store i64 %NewBBCounter90, i64* %92
  br i1 %91, label %93, label %95

; <label>:93:                                     ; preds = %88
  store i8 32, i8* %89, align 1, !tbaa !7
  %IndexSExt91 = sext i32 %3 to i64
  %IndexValMul92 = mul i64 %IndexSExt91, 89
  %IndexValAdd93 = add i64 %IndexValMul92, 19
  %94 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd93
  %OldBBCounter94 = load i64, i64* %94
  %NewBBCounter95 = add i64 %OldBBCounter94, 1
  store i64 %NewBBCounter95, i64* %94
  br label %95

; <label>:95:                                     ; preds = %93, %88
  %96 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 3
  %97 = load i8, i8* %96, align 1, !tbaa !7
  %98 = icmp eq i8 %97, 46
  %IndexSExt96 = sext i32 %3 to i64
  %IndexValMul97 = mul i64 %IndexSExt96, 89
  %IndexValAdd98 = add i64 %IndexValMul97, 20
  %99 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd98
  %OldBBCounter99 = load i64, i64* %99
  %NewBBCounter100 = add i64 %OldBBCounter99, 1
  store i64 %NewBBCounter100, i64* %99
  br i1 %98, label %100, label %102

; <label>:100:                                    ; preds = %95
  store i8 32, i8* %96, align 1, !tbaa !7
  %IndexSExt101 = sext i32 %3 to i64
  %IndexValMul102 = mul i64 %IndexSExt101, 89
  %IndexValAdd103 = add i64 %IndexValMul102, 21
  %101 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd103
  %OldBBCounter104 = load i64, i64* %101
  %NewBBCounter105 = add i64 %OldBBCounter104, 1
  store i64 %NewBBCounter105, i64* %101
  br label %102

; <label>:102:                                    ; preds = %100, %95
  %103 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 2
  %104 = load i8, i8* %103, align 1, !tbaa !7
  %105 = icmp eq i8 %104, 46
  %IndexSExt106 = sext i32 %3 to i64
  %IndexValMul107 = mul i64 %IndexSExt106, 89
  %IndexValAdd108 = add i64 %IndexValMul107, 22
  %106 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd108
  %OldBBCounter109 = load i64, i64* %106
  %NewBBCounter110 = add i64 %OldBBCounter109, 1
  store i64 %NewBBCounter110, i64* %106
  br i1 %105, label %107, label %109

; <label>:107:                                    ; preds = %102
  store i8 32, i8* %103, align 1, !tbaa !7
  %IndexSExt111 = sext i32 %3 to i64
  %IndexValMul112 = mul i64 %IndexSExt111, 89
  %IndexValAdd113 = add i64 %IndexValMul112, 23
  %108 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd113
  %OldBBCounter114 = load i64, i64* %108
  %NewBBCounter115 = add i64 %OldBBCounter114, 1
  store i64 %NewBBCounter115, i64* %108
  br label %109

; <label>:109:                                    ; preds = %107, %102
  %110 = getelementptr inbounds [14 x i8], [14 x i8]* %13, i64 0, i64 1
  %111 = load i8, i8* %110, align 1, !tbaa !7
  %112 = icmp eq i8 %111, 46
  %IndexSExt116 = sext i32 %3 to i64
  %IndexValMul117 = mul i64 %IndexSExt116, 89
  %IndexValAdd118 = add i64 %IndexValMul117, 24
  %113 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd118
  %OldBBCounter119 = load i64, i64* %113
  %NewBBCounter120 = add i64 %OldBBCounter119, 1
  store i64 %NewBBCounter120, i64* %113
  br i1 %112, label %114, label %116

; <label>:114:                                    ; preds = %109
  store i8 32, i8* %110, align 1, !tbaa !7
  %IndexSExt121 = sext i32 %3 to i64
  %IndexValMul122 = mul i64 %IndexSExt121, 89
  %IndexValAdd123 = add i64 %IndexValMul122, 25
  %115 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd123
  %OldBBCounter124 = load i64, i64* %115
  %NewBBCounter125 = add i64 %OldBBCounter124, 1
  store i64 %NewBBCounter125, i64* %115
  br label %116

; <label>:116:                                    ; preds = %114, %109
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.2, i64 0, i64 0), i8* nonnull %23)
  store i32 16384, i32* %9, align 4, !tbaa !3
  %118 = getelementptr inbounds [3 x double], [3 x double]* %8, i64 0, i64 0
  %119 = getelementptr inbounds [3 x double], [3 x double]* %8, i64 0, i64 1
  %120 = getelementptr inbounds [3 x double], [3 x double]* %8, i64 0, i64 2
  call void @vranlc(i32 0, double* nonnull %118, double 1.000000e+00, double* nonnull %120) #2
  %121 = load double, double* %120, align 16, !tbaa !8
  %122 = call double @randlc(double* nonnull %119, double %121) #2
  store double %122, double* %118, align 16, !tbaa !8
  %IndexSExt126 = sext i32 %3 to i64
  %IndexValMul127 = mul i64 %IndexSExt126, 89
  %IndexValAdd128 = add i64 %IndexValMul127, 26
  %123 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd128
  %OldBBCounter129 = load i64, i64* %123
  %NewBBCounter130 = add i64 %OldBBCounter129, 1
  store i64 %NewBBCounter130, i64* %123
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 0, void (i32*, i32*, ...)* bitcast (void (i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*)) #2
  %124 = call i32 @sched_getcpu()
  call void @timer_clear(i32 1) #2
  call void @timer_clear(i32 2) #2
  call void @timer_clear(i32 3) #2
  call void @timer_start(i32 1) #2
  call void @vranlc(i32 0, double* nonnull %4, double 0x41D2309CE5400000, double* getelementptr inbounds ([131072 x double], [131072 x double]* @x, i64 0, i64 0)) #2
  store double 0x41D2309CE5400000, double* %4, align 8, !tbaa !8
  %125 = call double @randlc(double* nonnull %4, double 0x41D2309CE5400000) #2
  %126 = load double, double* %4, align 8, !tbaa !8
  %127 = call double @randlc(double* nonnull %4, double %126) #2
  %128 = load double, double* %4, align 8, !tbaa !8
  %129 = call double @randlc(double* nonnull %4, double %128) #2
  %130 = load double, double* %4, align 8, !tbaa !8
  %131 = call double @randlc(double* nonnull %4, double %130) #2
  %132 = load double, double* %4, align 8, !tbaa !8
  %133 = call double @randlc(double* nonnull %4, double %132) #2
  %134 = load double, double* %4, align 8, !tbaa !8
  %135 = call double @randlc(double* nonnull %4, double %134) #2
  %136 = load double, double* %4, align 8, !tbaa !8
  %137 = call double @randlc(double* nonnull %4, double %136) #2
  %138 = load double, double* %4, align 8, !tbaa !8
  %139 = call double @randlc(double* nonnull %4, double %138) #2
  %140 = load double, double* %4, align 8, !tbaa !8
  %141 = call double @randlc(double* nonnull %4, double %140) #2
  %142 = load double, double* %4, align 8, !tbaa !8
  %143 = call double @randlc(double* nonnull %4, double %142) #2
  %144 = load double, double* %4, align 8, !tbaa !8
  %145 = call double @randlc(double* nonnull %4, double %144) #2
  %146 = load double, double* %4, align 8, !tbaa !8
  %147 = call double @randlc(double* nonnull %4, double %146) #2
  %148 = load double, double* %4, align 8, !tbaa !8
  %149 = call double @randlc(double* nonnull %4, double %148) #2
  %150 = load double, double* %4, align 8, !tbaa !8
  %151 = call double @randlc(double* nonnull %4, double %150) #2
  %152 = load double, double* %4, align 8, !tbaa !8
  %153 = call double @randlc(double* nonnull %4, double %152) #2
  %154 = load double, double* %4, align 8, !tbaa !8
  %155 = call double @randlc(double* nonnull %4, double %154) #2
  %156 = load double, double* %4, align 8, !tbaa !8
  %157 = call double @randlc(double* nonnull %4, double %156) #2
  %158 = bitcast double* %4 to i64*
  %159 = load i64, i64* %158, align 8, !tbaa !8
  %160 = bitcast double* %7 to i64*
  store i64 %159, i64* %160, align 8, !tbaa !8
  store double 0.000000e+00, double* %5, align 8, !tbaa !8
  store double 0.000000e+00, double* %6, align 8, !tbaa !8
  call void @llvm.memset.p0i8.i64(i8* bitcast ([10 x double]* @q to i8*), i8 0, i64 80, i32 16, i1 false)
  store i32 -1, i32* %11, align 4, !tbaa !3
  %IndexSExt131 = sext i32 %124 to i64
  %IndexValMul132 = mul i64 %IndexSExt131, 89
  %IndexValAdd133 = add i64 %IndexValMul132, 27
  %161 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd133
  %OldBBCounter134 = load i64, i64* %161
  %NewBBCounter135 = add i64 %OldBBCounter134, 1
  store i64 %NewBBCounter135, i64* %161
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*, i32*, i32*, i32*, double*, i32*, [131072 x double]*)* @.omp_outlined..4 to void (i32*, i32*, ...)*), double* nonnull %5, double* nonnull %6, i32* nonnull %10, i32* nonnull %9, i32* nonnull %11, double* nonnull %7, i32* nonnull %12, [131072 x double]* nonnull @x) #2
  %162 = call i32 @sched_getcpu()
  call void @timer_stop(i32 1) #2
  %163 = call double @timer_read(i32 1) #2
  call void @llvm.lifetime.end.p0i8(i64 14, i8* nonnull %23) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %22) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #2
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %18) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #2
  %IndexSExt136 = sext i32 %162 to i64
  %IndexValMul137 = mul i64 %IndexSExt136, 89
  %IndexValAdd138 = add i64 %IndexValMul137, 28
  %164 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd138
  %OldBBCounter139 = load i64, i64* %164
  %NewBBCounter140 = add i64 %OldBBCounter139, 1
  store i64 %NewBBCounter140, i64* %164
  call void @_Z18WriteOpenMPProfilePll(i64* getelementptr inbounds ([6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 0), i64 6408)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #1

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @sprintf(i8* nocapture, i8* nocapture readonly, ...) #3

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #3

; Function Attrs: norecurse nounwind uwtable
define void @vranlc(i32, double* nocapture, double, double* nocapture) local_unnamed_addr #4 {
  %5 = call i32 @sched_getcpu()
  %6 = fmul double %2, 0x3E80000000000000
  %7 = fptosi double %6 to i32
  %8 = sitofp i32 %7 to double
  %9 = fmul double %8, 0x4160000000000000
  %10 = fsub double %2, %9
  %11 = load double, double* %1, align 8, !tbaa !8
  %12 = icmp slt i32 %0, 1
  %IndexSExt = sext i32 %5 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 29
  %13 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %13
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %13
  br i1 %12, label %47, label %14

; <label>:14:                                     ; preds = %4
  %15 = add i32 %0, 1
  %16 = zext i32 %15 to i64
  %IndexSExt1 = sext i32 %5 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 30
  %17 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %17
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %17
  br label %18

; <label>:18:                                     ; preds = %18, %14
  %19 = phi i64 [ %44, %18 ], [ 1, %14 ]
  %20 = phi double [ %41, %18 ], [ %11, %14 ]
  %21 = fmul double %20, 0x3E80000000000000
  %22 = fptosi double %21 to i32
  %23 = sitofp i32 %22 to double
  %24 = fmul double %23, 0x4160000000000000
  %25 = fsub double %20, %24
  %26 = fmul double %25, %8
  %27 = fmul double %10, %23
  %28 = fadd double %27, %26
  %29 = fmul double %28, 0x3E80000000000000
  %30 = fptosi double %29 to i32
  %31 = sitofp i32 %30 to double
  %32 = fmul double %31, 0x4160000000000000
  %33 = fsub double %28, %32
  %34 = fmul double %33, 0x4160000000000000
  %35 = fmul double %10, %25
  %36 = fadd double %35, %34
  %37 = fmul double %36, 0x3D10000000000000
  %38 = fptosi double %37 to i32
  %39 = sitofp i32 %38 to double
  %40 = fmul double %39, 0x42D0000000000000
  %41 = fsub double %36, %40
  %42 = fmul double %41, 0x3D10000000000000
  %43 = getelementptr inbounds double, double* %3, i64 %19
  store double %42, double* %43, align 8, !tbaa !8
  %44 = add nuw nsw i64 %19, 1
  %45 = icmp eq i64 %44, %16
  %IndexSExt6 = sext i32 %5 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 31
  %46 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %46
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %46
  br i1 %45, label %47, label %18

; <label>:47:                                     ; preds = %18, %4
  %48 = phi double [ %11, %4 ], [ %41, %18 ]
  store double %48, double* %1, align 8, !tbaa !8
  %IndexSExt11 = sext i32 %5 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 32
  %49 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %49
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %49
  ret void
}

; Function Attrs: norecurse nounwind uwtable
define double @randlc(double* nocapture, double) local_unnamed_addr #4 {
  %3 = call i32 @sched_getcpu()
  %4 = fmul double %1, 0x3E80000000000000
  %5 = fptosi double %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 0x4160000000000000
  %8 = fsub double %1, %7
  %9 = load double, double* %0, align 8, !tbaa !8
  %10 = fmul double %9, 0x3E80000000000000
  %11 = fptosi double %10 to i32
  %12 = sitofp i32 %11 to double
  %13 = fmul double %12, 0x4160000000000000
  %14 = fsub double %9, %13
  %15 = fmul double %14, %6
  %16 = fmul double %8, %12
  %17 = fadd double %16, %15
  %18 = fmul double %17, 0x3E80000000000000
  %19 = fptosi double %18 to i32
  %20 = sitofp i32 %19 to double
  %21 = fmul double %20, 0x4160000000000000
  %22 = fsub double %17, %21
  %23 = fmul double %22, 0x4160000000000000
  %24 = fmul double %8, %14
  %25 = fadd double %24, %23
  %26 = fmul double %25, 0x3D10000000000000
  %27 = fptosi double %26 to i32
  %28 = sitofp i32 %27 to double
  %29 = fmul double %28, 0x42D0000000000000
  %30 = fsub double %25, %29
  store double %30, double* %0, align 8, !tbaa !8
  %31 = fmul double %30, 0x3D10000000000000
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 33
  %32 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %32
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %32
  ret double %31
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone) #0 {
  %3 = call i32 @sched_getcpu()
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #2
  store i32 0, i32* %4, align 4, !tbaa !3
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #2
  store i32 131071, i32* %5, align 4, !tbaa !3
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #2
  store i32 1, i32* %6, align 4, !tbaa !3
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #2
  store i32 0, i32* %7, align 4, !tbaa !3
  %12 = load i32, i32* %0, align 4, !tbaa !3
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @2, i32 %12, i32 34, i32* nonnull %7, i32* nonnull %4, i32* nonnull %5, i32* nonnull %6, i32 1, i32 1) #2
  %13 = load i32, i32* %5, align 4, !tbaa !3
  %14 = icmp slt i32 %13, 131071
  %15 = select i1 %14, i32 %13, i32 131071
  store i32 %15, i32* %5, align 4, !tbaa !3
  %16 = load i32, i32* %4, align 4, !tbaa !3
  %17 = icmp sgt i32 %16, %15
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 34
  %18 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %18
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %18
  br i1 %17, label %100, label %19

; <label>:19:                                     ; preds = %2
  %20 = sext i32 %16 to i64
  %21 = sext i32 %15 to i64
  %22 = icmp sgt i64 %21, %20
  %23 = select i1 %22, i64 %21, i64 %20
  %24 = add nsw i64 %23, 1
  %25 = sub nsw i64 %24, %20
  %26 = icmp ult i64 %25, 4
  %IndexSExt1 = sext i32 %3 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 35
  %27 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %27
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %27
  br i1 %26, label %91, label %28

; <label>:28:                                     ; preds = %19
  %29 = and i64 %25, -4
  %30 = add nsw i64 %29, %20
  %31 = add nsw i64 %29, -4
  %32 = lshr exact i64 %31, 2
  %33 = add nuw nsw i64 %32, 1
  %34 = and i64 %33, 3
  %35 = icmp ult i64 %31, 12
  %IndexSExt6 = sext i32 %3 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 36
  %36 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %36
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %36
  br i1 %35, label %70, label %37

; <label>:37:                                     ; preds = %28
  %38 = sub nsw i64 %33, %34
  %IndexSExt11 = sext i32 %3 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 37
  %39 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %39
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %39
  br label %40

; <label>:40:                                     ; preds = %40, %37
  %41 = phi i64 [ 0, %37 ], [ %66, %40 ]
  %42 = phi i64 [ %38, %37 ], [ %67, %40 ]
  %43 = add i64 %41, %20
  %44 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %43
  %45 = bitcast double* %44 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %45, align 8, !tbaa !8
  %46 = getelementptr double, double* %44, i64 2
  %47 = bitcast double* %46 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %47, align 8, !tbaa !8
  %48 = or i64 %41, 4
  %49 = add i64 %48, %20
  %50 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %49
  %51 = bitcast double* %50 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %51, align 8, !tbaa !8
  %52 = getelementptr double, double* %50, i64 2
  %53 = bitcast double* %52 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %53, align 8, !tbaa !8
  %54 = or i64 %41, 8
  %55 = add i64 %54, %20
  %56 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %55
  %57 = bitcast double* %56 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %57, align 8, !tbaa !8
  %58 = getelementptr double, double* %56, i64 2
  %59 = bitcast double* %58 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %59, align 8, !tbaa !8
  %60 = or i64 %41, 12
  %61 = add i64 %60, %20
  %62 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %61
  %63 = bitcast double* %62 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %63, align 8, !tbaa !8
  %64 = getelementptr double, double* %62, i64 2
  %65 = bitcast double* %64 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %65, align 8, !tbaa !8
  %66 = add i64 %41, 16
  %67 = add i64 %42, -4
  %68 = icmp eq i64 %67, 0
  %IndexSExt16 = sext i32 %3 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 38
  %69 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %69
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %69
  br i1 %68, label %70, label %40, !llvm.loop !10

; <label>:70:                                     ; preds = %40, %28
  %71 = phi i64 [ 0, %28 ], [ %66, %40 ]
  %72 = icmp eq i64 %34, 0
  %IndexSExt21 = sext i32 %3 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 39
  %73 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %73
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %73
  br i1 %72, label %88, label %74

; <label>:74:                                     ; preds = %70
  %IndexSExt26 = sext i32 %3 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 40
  %75 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %75
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %75
  br label %76

; <label>:76:                                     ; preds = %76, %74
  %77 = phi i64 [ %71, %74 ], [ %84, %76 ]
  %78 = phi i64 [ %34, %74 ], [ %85, %76 ]
  %79 = add i64 %77, %20
  %80 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %79
  %81 = bitcast double* %80 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %81, align 8, !tbaa !8
  %82 = getelementptr double, double* %80, i64 2
  %83 = bitcast double* %82 to <2 x double>*
  store <2 x double> <double 0xD47D42AEA2879F2E, double 0xD47D42AEA2879F2E>, <2 x double>* %83, align 8, !tbaa !8
  %84 = add i64 %77, 4
  %85 = add i64 %78, -1
  %86 = icmp eq i64 %85, 0
  %IndexSExt31 = sext i32 %3 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 89
  %IndexValAdd33 = add i64 %IndexValMul32, 41
  %87 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %87
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %87
  br i1 %86, label %88, label %76, !llvm.loop !12

; <label>:88:                                     ; preds = %76, %70
  %89 = icmp eq i64 %25, %29
  %IndexSExt36 = sext i32 %3 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 89
  %IndexValAdd38 = add i64 %IndexValMul37, 42
  %90 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %90
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %90
  br i1 %89, label %100, label %91

; <label>:91:                                     ; preds = %88, %19
  %92 = phi i64 [ %20, %19 ], [ %30, %88 ]
  %IndexSExt41 = sext i32 %3 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 89
  %IndexValAdd43 = add i64 %IndexValMul42, 43
  %93 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %93
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %93
  br label %94

; <label>:94:                                     ; preds = %94, %91
  %95 = phi i64 [ %97, %94 ], [ %92, %91 ]
  %96 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %95
  store double 0xD47D42AEA2879F2E, double* %96, align 8, !tbaa !8
  %97 = add nsw i64 %95, 1
  %98 = icmp slt i64 %95, %21
  %IndexSExt46 = sext i32 %3 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 89
  %IndexValAdd48 = add i64 %IndexValMul47, 44
  %99 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %99
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %99
  br i1 %98, label %94, label %100, !llvm.loop !14

; <label>:100:                                    ; preds = %94, %88, %2
  call void @__kmpc_for_static_fini(%ident_t* nonnull @2, i32 %12) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #2
  %IndexSExt51 = sext i32 %3 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 89
  %IndexValAdd53 = add i64 %IndexValMul52, 45
  %101 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %101
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %101
  ret void
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

; Function Attrs: norecurse nounwind uwtable
define void @timer_clear(i32) local_unnamed_addr #4 {
  %2 = call i32 @sched_getcpu()
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %3
  store double 0.000000e+00, double* %4, align 8, !tbaa !8
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 46
  %5 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %5
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %5
  ret void
}

; Function Attrs: nounwind uwtable
define void @timer_start(i32) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %3 = alloca double, align 8
  %4 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #2
  call void @wtime_(double* nonnull %3) #2
  %5 = bitcast double* %3 to i64*
  %6 = load i64, i64* %5, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #2
  %7 = sext i32 %0 to i64
  %8 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %7
  %9 = bitcast double* %8 to i64*
  store i64 %6, i64* %9, align 8, !tbaa !8
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 47
  %10 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %10
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..4(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), i32* nocapture readnone dereferenceable(4), i32* nocapture readonly dereferenceable(4), i32* nocapture readonly dereferenceable(4), double* nocapture readonly dereferenceable(8), i32* nocapture dereferenceable(4), [131072 x double]* readonly dereferenceable(1048576)) #0 {
  %11 = call i32 @sched_getcpu()
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca [10 x double], align 16
  %15 = bitcast [10 x double]* %14 to i8*
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  %22 = alloca [2 x i8*], align 8
  %23 = icmp eq [131072 x double]* %9, @x
  %IndexSExt = sext i32 %11 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 48
  %24 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %24
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %24
  br i1 %23, label %28, label %25

; <label>:25:                                     ; preds = %10
  %26 = bitcast [131072 x double]* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast ([131072 x double]* @x to i8*), i8* nonnull %26, i64 1048576, i32 16, i1 false), !tbaa.struct !16
  %IndexSExt1 = sext i32 %11 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 49
  %27 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %27
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %27
  br label %28

; <label>:28:                                     ; preds = %25, %10
  %29 = load i32, i32* %0, align 4, !tbaa !3
  tail call void @__kmpc_barrier(%ident_t* nonnull @1, i32 %29) #2
  %30 = bitcast double* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #2
  %31 = bitcast double* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #2
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %15) #2
  call void @llvm.memset.p0i8.i64(i8* nonnull %15, i8 0, i64 80, i32 16, i1 false)
  %32 = load i32, i32* %5, align 4, !tbaa !3
  %33 = add nsw i32 %32, -1
  %34 = icmp sgt i32 %32, 0
  %IndexSExt6 = sext i32 %11 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 50
  %35 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %35
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %35
  br i1 %34, label %42, label %36

; <label>:36:                                     ; preds = %28
  %37 = bitcast i32* %19 to i8*
  %38 = bitcast i32* %18 to i8*
  %39 = bitcast i32* %17 to i8*
  %40 = bitcast i32* %16 to i8*
  %IndexSExt11 = sext i32 %11 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 51
  %41 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %41
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %41
  br label %197

; <label>:42:                                     ; preds = %28
  %43 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %43) #2
  store i32 0, i32* %16, align 4, !tbaa !3
  %44 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #2
  store i32 %33, i32* %17, align 4, !tbaa !3
  %45 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #2
  store i32 1, i32* %18, align 4, !tbaa !3
  %46 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %46) #2
  store i32 0, i32* %19, align 4, !tbaa !3
  %47 = bitcast double* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #2
  store double 0.000000e+00, double* %20, align 8, !tbaa !8
  %48 = bitcast double* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48) #2
  store double 0.000000e+00, double* %21, align 8, !tbaa !8
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @2, i32 %29, i32 34, i32* nonnull %19, i32* nonnull %16, i32* nonnull %17, i32* nonnull %18, i32 1, i32 1) #2
  %49 = load i32, i32* %17, align 4, !tbaa !3
  %50 = icmp sgt i32 %49, %33
  %51 = select i1 %50, i32 %33, i32 %49
  store i32 %51, i32* %17, align 4, !tbaa !3
  %52 = load i32, i32* %16, align 4, !tbaa !3
  %53 = icmp sgt i32 %52, %51
  %IndexSExt16 = sext i32 %11 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 52
  %54 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %54
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %54
  br i1 %53, label %137, label %55

; <label>:55:                                     ; preds = %42
  %56 = bitcast double* %7 to i64*
  %57 = bitcast double* %13 to i64*
  %IndexSExt21 = sext i32 %11 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 53
  %58 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %58
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %58
  br label %59

; <label>:59:                                     ; preds = %133, %55
  %60 = phi i32 [ %52, %55 ], [ %61, %133 ]
  %61 = add nsw i32 %60, 1
  %62 = load i32, i32* %6, align 4, !tbaa !3
  %63 = add nsw i32 %62, %61
  store double 0x41B033C4D7000000, double* %12, align 8, !tbaa !8
  %64 = load i64, i64* %56, align 8, !tbaa !8
  store i64 %64, i64* %57, align 8, !tbaa !8
  %IndexSExt26 = sext i32 %11 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 54
  %65 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %65
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %65
  br label %66

; <label>:66:                                     ; preds = %81, %59
  %67 = phi i32 [ %63, %59 ], [ %69, %81 ]
  %68 = phi i32 [ 1, %59 ], [ %84, %81 ]
  %69 = sdiv i32 %67, 2
  %70 = shl nsw i32 %69, 1
  %71 = icmp eq i32 %70, %67
  %IndexSExt31 = sext i32 %11 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 89
  %IndexValAdd33 = add i64 %IndexValMul32, 55
  %72 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %72
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %72
  br i1 %71, label %77, label %73

; <label>:73:                                     ; preds = %66
  %74 = load double, double* %13, align 8, !tbaa !8
  %75 = call double @randlc(double* nonnull %12, double %74) #2
  %IndexSExt36 = sext i32 %11 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 89
  %IndexValAdd38 = add i64 %IndexValMul37, 56
  %76 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %76
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %76
  br label %77

; <label>:77:                                     ; preds = %73, %66
  %78 = add i32 %67, 1
  %79 = icmp ult i32 %78, 3
  %IndexSExt41 = sext i32 %11 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 89
  %IndexValAdd43 = add i64 %IndexValMul42, 57
  %80 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %80
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %80
  br i1 %79, label %87, label %81

; <label>:81:                                     ; preds = %77
  %82 = load double, double* %13, align 8, !tbaa !8
  %83 = call double @randlc(double* nonnull %13, double %82) #2
  %84 = add nuw nsw i32 %68, 1
  %85 = icmp ult i32 %84, 101
  %IndexSExt46 = sext i32 %11 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 89
  %IndexValAdd48 = add i64 %IndexValMul47, 58
  %86 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %86
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %86
  br i1 %85, label %66, label %87

; <label>:87:                                     ; preds = %81, %77
  call void @vranlc(i32 131072, double* nonnull %12, double 0x41D2309CE5400000, double* getelementptr ([131072 x double], [131072 x double]* @x, i64 0, i64 -1)) #2
  %IndexSExt51 = sext i32 %11 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 89
  %IndexValAdd53 = add i64 %IndexValMul52, 59
  %88 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %88
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %88
  br label %89

; <label>:89:                                     ; preds = %129, %87
  %90 = phi i64 [ 0, %87 ], [ %130, %129 ]
  %91 = shl nuw nsw i64 %90, 1
  %92 = getelementptr inbounds [131072 x double], [131072 x double]* @x, i64 0, i64 %91
  %93 = bitcast double* %92 to <2 x double>*
  %94 = load <2 x double>, <2 x double>* %93, align 16, !tbaa !8
  %95 = fmul <2 x double> %94, <double 2.000000e+00, double 2.000000e+00>
  %96 = fadd <2 x double> %95, <double -1.000000e+00, double -1.000000e+00>
  %97 = fmul <2 x double> %96, %96
  %98 = extractelement <2 x double> %97, i32 0
  %99 = extractelement <2 x double> %97, i32 1
  %100 = fadd double %98, %99
  store double %100, double* %12, align 8, !tbaa !8
  %101 = fcmp ugt double %100, 1.000000e+00
  %IndexSExt56 = sext i32 %11 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 89
  %IndexValAdd58 = add i64 %IndexValMul57, 60
  %102 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %102
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %102
  br i1 %101, label %129, label %103

; <label>:103:                                    ; preds = %89
  %104 = call double @log(double %100) #2
  %105 = fmul double %104, -2.000000e+00
  %106 = load double, double* %12, align 8, !tbaa !8
  %107 = fdiv double %105, %106
  %108 = call double @sqrt(double %107) #2
  store double %108, double* %13, align 8, !tbaa !8
  %109 = insertelement <2 x double> undef, double %108, i32 0
  %110 = shufflevector <2 x double> %109, <2 x double> undef, <2 x i32> zeroinitializer
  %111 = fmul <2 x double> %96, %110
  %112 = call <2 x double> @llvm.fabs.v2f64(<2 x double> %111)
  %113 = extractelement <2 x double> %112, i32 0
  %114 = extractelement <2 x double> %112, i32 1
  %115 = fcmp ogt double %113, %114
  %116 = select i1 %115, double %113, double %114
  %117 = fptosi double %116 to i32
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 %118
  %120 = load double, double* %119, align 8, !tbaa !8
  %121 = fadd double %120, 1.000000e+00
  store double %121, double* %119, align 8, !tbaa !8
  %122 = load double, double* %20, align 8, !tbaa !8
  %123 = extractelement <2 x double> %111, i32 0
  %124 = fadd double %123, %122
  store double %124, double* %20, align 8, !tbaa !8
  %125 = load double, double* %21, align 8, !tbaa !8
  %126 = extractelement <2 x double> %111, i32 1
  %127 = fadd double %126, %125
  store double %127, double* %21, align 8, !tbaa !8
  %IndexSExt61 = sext i32 %11 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 89
  %IndexValAdd63 = add i64 %IndexValMul62, 61
  %128 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %128
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %128
  br label %129

; <label>:129:                                    ; preds = %103, %89
  %130 = add nuw nsw i64 %90, 1
  %131 = icmp eq i64 %130, 65536
  %IndexSExt66 = sext i32 %11 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 89
  %IndexValAdd68 = add i64 %IndexValMul67, 62
  %132 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %132
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %132
  br i1 %131, label %133, label %89

; <label>:133:                                    ; preds = %129
  %134 = load i32, i32* %17, align 4, !tbaa !3
  %135 = icmp slt i32 %60, %134
  %IndexSExt71 = sext i32 %11 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 89
  %IndexValAdd73 = add i64 %IndexValMul72, 63
  %136 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %136
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %136
  br i1 %135, label %59, label %137

; <label>:137:                                    ; preds = %133, %42
  call void @__kmpc_for_static_fini(%ident_t* nonnull @2, i32 %29) #2
  %138 = bitcast [2 x i8*]* %22 to double**
  store double* %20, double** %138, align 8
  %139 = getelementptr inbounds [2 x i8*], [2 x i8*]* %22, i64 0, i64 1
  %140 = bitcast i8** %139 to double**
  store double* %21, double** %140, align 8
  %141 = bitcast [2 x i8*]* %22 to i8*
  %142 = call i32 @__kmpc_reduce(%ident_t* nonnull @3, i32 %29, i32 2, i64 16, i8* nonnull %141, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #2
  %IndexSExt76 = sext i32 %11 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 89
  %IndexValAdd78 = add i64 %IndexValMul77, 64
  %143 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %143
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %143
  switch i32 %142, label %182 [
    i32 1, label %144
    i32 2, label %152
  ]

; <label>:144:                                    ; preds = %137
  %145 = load double, double* %2, align 8, !tbaa !8
  %146 = load double, double* %20, align 8, !tbaa !8
  %147 = fadd double %145, %146
  store double %147, double* %2, align 8, !tbaa !8
  %148 = load double, double* %3, align 8, !tbaa !8
  %149 = load double, double* %21, align 8, !tbaa !8
  %150 = fadd double %148, %149
  store double %150, double* %3, align 8, !tbaa !8
  call void @__kmpc_end_reduce(%ident_t* nonnull @3, i32 %29, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #2
  %IndexSExt81 = sext i32 %11 to i64
  %IndexValMul82 = mul i64 %IndexSExt81, 89
  %IndexValAdd83 = add i64 %IndexValMul82, 65
  %151 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd83
  %OldBBCounter84 = load i64, i64* %151
  %NewBBCounter85 = add i64 %OldBBCounter84, 1
  store i64 %NewBBCounter85, i64* %151
  br label %182

; <label>:152:                                    ; preds = %137
  %153 = bitcast double* %2 to i64*
  %154 = load atomic i64, i64* %153 monotonic, align 8, !tbaa !8
  %155 = load double, double* %20, align 8, !tbaa !8
  %IndexSExt86 = sext i32 %11 to i64
  %IndexValMul87 = mul i64 %IndexSExt86, 89
  %IndexValAdd88 = add i64 %IndexValMul87, 66
  %156 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd88
  %OldBBCounter89 = load i64, i64* %156
  %NewBBCounter90 = add i64 %OldBBCounter89, 1
  store i64 %NewBBCounter90, i64* %156
  br label %157

; <label>:157:                                    ; preds = %157, %152
  %158 = phi i64 [ %154, %152 ], [ %163, %157 ]
  %159 = bitcast i64 %158 to double
  %160 = fadd double %155, %159
  %161 = bitcast double %160 to i64
  %162 = cmpxchg i64* %153, i64 %158, i64 %161 monotonic monotonic
  %163 = extractvalue { i64, i1 } %162, 0
  %164 = extractvalue { i64, i1 } %162, 1
  %IndexSExt91 = sext i32 %11 to i64
  %IndexValMul92 = mul i64 %IndexSExt91, 89
  %IndexValAdd93 = add i64 %IndexValMul92, 67
  %165 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd93
  %OldBBCounter94 = load i64, i64* %165
  %NewBBCounter95 = add i64 %OldBBCounter94, 1
  store i64 %NewBBCounter95, i64* %165
  br i1 %164, label %166, label %157

; <label>:166:                                    ; preds = %157
  %167 = bitcast double* %3 to i64*
  %168 = load atomic i64, i64* %167 monotonic, align 8, !tbaa !8
  %169 = load double, double* %21, align 8, !tbaa !8
  %IndexSExt96 = sext i32 %11 to i64
  %IndexValMul97 = mul i64 %IndexSExt96, 89
  %IndexValAdd98 = add i64 %IndexValMul97, 68
  %170 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd98
  %OldBBCounter99 = load i64, i64* %170
  %NewBBCounter100 = add i64 %OldBBCounter99, 1
  store i64 %NewBBCounter100, i64* %170
  br label %171

; <label>:171:                                    ; preds = %171, %166
  %172 = phi i64 [ %168, %166 ], [ %177, %171 ]
  %173 = bitcast i64 %172 to double
  %174 = fadd double %169, %173
  %175 = bitcast double %174 to i64
  %176 = cmpxchg i64* %167, i64 %172, i64 %175 monotonic monotonic
  %177 = extractvalue { i64, i1 } %176, 0
  %178 = extractvalue { i64, i1 } %176, 1
  %IndexSExt101 = sext i32 %11 to i64
  %IndexValMul102 = mul i64 %IndexSExt101, 89
  %IndexValAdd103 = add i64 %IndexValMul102, 69
  %179 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd103
  %OldBBCounter104 = load i64, i64* %179
  %NewBBCounter105 = add i64 %OldBBCounter104, 1
  store i64 %NewBBCounter105, i64* %179
  br i1 %178, label %180, label %171

; <label>:180:                                    ; preds = %171
  call void @__kmpc_end_reduce(%ident_t* nonnull @3, i32 %29, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #2
  %IndexSExt106 = sext i32 %11 to i64
  %IndexValMul107 = mul i64 %IndexSExt106, 89
  %IndexValAdd108 = add i64 %IndexValMul107, 70
  %181 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd108
  %OldBBCounter109 = load i64, i64* %181
  %NewBBCounter110 = add i64 %OldBBCounter109, 1
  store i64 %NewBBCounter110, i64* %181
  br label %182

; <label>:182:                                    ; preds = %180, %144, %137
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #2
  %183 = bitcast [10 x double]* %14 to <2 x double>*
  %184 = load <2 x double>, <2 x double>* %183, align 16, !tbaa !8
  %185 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 2
  %186 = bitcast double* %185 to <2 x double>*
  %187 = load <2 x double>, <2 x double>* %186, align 16, !tbaa !8
  %188 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 4
  %189 = bitcast double* %188 to <2 x double>*
  %190 = load <2 x double>, <2 x double>* %189, align 16, !tbaa !8
  %191 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 6
  %192 = bitcast double* %191 to <2 x double>*
  %193 = load <2 x double>, <2 x double>* %192, align 16, !tbaa !8
  %194 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 8
  %195 = load double, double* %194, align 16, !tbaa !8
  %IndexSExt111 = sext i32 %11 to i64
  %IndexValMul112 = mul i64 %IndexSExt111, 89
  %IndexValAdd113 = add i64 %IndexValMul112, 71
  %196 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd113
  %OldBBCounter114 = load i64, i64* %196
  %NewBBCounter115 = add i64 %OldBBCounter114, 1
  store i64 %NewBBCounter115, i64* %196
  br label %197

; <label>:197:                                    ; preds = %182, %36
  %198 = phi i8* [ %40, %36 ], [ %43, %182 ]
  %199 = phi i8* [ %39, %36 ], [ %44, %182 ]
  %200 = phi i8* [ %38, %36 ], [ %45, %182 ]
  %201 = phi i8* [ %37, %36 ], [ %46, %182 ]
  %202 = phi double [ 0.000000e+00, %36 ], [ %195, %182 ]
  %203 = phi <2 x double> [ zeroinitializer, %36 ], [ %184, %182 ]
  %204 = phi <2 x double> [ zeroinitializer, %36 ], [ %187, %182 ]
  %205 = phi <2 x double> [ zeroinitializer, %36 ], [ %190, %182 ]
  %206 = phi <2 x double> [ zeroinitializer, %36 ], [ %193, %182 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %201) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %200) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %199) #2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %198) #2
  call void @__kmpc_barrier(%ident_t* nonnull @1, i32 %29) #2
  call void @__kmpc_critical(%ident_t* nonnull @0, i32 %29, [8 x i32]* nonnull @.gomp_critical_user_.var) #2
  %207 = load <2 x double>, <2 x double>* bitcast ([10 x double]* @q to <2 x double>*), align 16, !tbaa !8
  %208 = fadd <2 x double> %203, %207
  store <2 x double> %208, <2 x double>* bitcast ([10 x double]* @q to <2 x double>*), align 16, !tbaa !8
  %209 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 2) to <2 x double>*), align 16, !tbaa !8
  %210 = fadd <2 x double> %204, %209
  store <2 x double> %210, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 2) to <2 x double>*), align 16, !tbaa !8
  %211 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 4) to <2 x double>*), align 16, !tbaa !8
  %212 = fadd <2 x double> %205, %211
  store <2 x double> %212, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 4) to <2 x double>*), align 16, !tbaa !8
  %213 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 6) to <2 x double>*), align 16, !tbaa !8
  %214 = fadd <2 x double> %206, %213
  store <2 x double> %214, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 6) to <2 x double>*), align 16, !tbaa !8
  %215 = getelementptr inbounds [10 x double], [10 x double]* %14, i64 0, i64 9
  %216 = load double, double* %215, align 8, !tbaa !8
  %217 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 8) to <2 x double>*), align 16, !tbaa !8
  %218 = insertelement <2 x double> undef, double %202, i32 0
  %219 = insertelement <2 x double> %218, double %216, i32 1
  %220 = fadd <2 x double> %219, %217
  store <2 x double> %220, <2 x double>* bitcast (double* getelementptr inbounds ([10 x double], [10 x double]* @q, i64 0, i64 8) to <2 x double>*), align 16, !tbaa !8
  call void @__kmpc_end_critical(%ident_t* nonnull @0, i32 %29, [8 x i32]* nonnull @.gomp_critical_user_.var) #2
  %221 = call i32 @__kmpc_master(%ident_t* nonnull @0, i32 %29) #2
  %222 = icmp eq i32 %221, 0
  %IndexSExt116 = sext i32 %11 to i64
  %IndexValMul117 = mul i64 %IndexSExt116, 89
  %IndexValAdd118 = add i64 %IndexValMul117, 72
  %223 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd118
  %OldBBCounter119 = load i64, i64* %223
  %NewBBCounter120 = add i64 %OldBBCounter119, 1
  store i64 %NewBBCounter120, i64* %223
  br i1 %222, label %227, label %224

; <label>:224:                                    ; preds = %197
  %225 = call i32 @omp_get_num_threads() #2
  store i32 %225, i32* %8, align 4, !tbaa !3
  call void @__kmpc_end_master(%ident_t* nonnull @0, i32 %29) #2
  %IndexSExt121 = sext i32 %11 to i64
  %IndexValMul122 = mul i64 %IndexSExt121, 89
  %IndexValAdd123 = add i64 %IndexValMul122, 73
  %226 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd123
  %OldBBCounter124 = load i64, i64* %226
  %NewBBCounter125 = add i64 %OldBBCounter124, 1
  store i64 %NewBBCounter125, i64* %226
  br label %227

; <label>:227:                                    ; preds = %224, %197
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %15) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #2
  %IndexSExt126 = sext i32 %11 to i64
  %IndexValMul127 = mul i64 %IndexSExt126, 89
  %IndexValAdd128 = add i64 %IndexValMul127, 74
  %228 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd128
  %OldBBCounter129 = load i64, i64* %228
  %NewBBCounter130 = add i64 %OldBBCounter129, 1
  store i64 %NewBBCounter130, i64* %228
  ret void
}

; Function Attrs: nounwind uwtable
define void @timer_stop(i32) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %3 = alloca double, align 8
  %4 = bitcast double* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #2
  call void @wtime_(double* nonnull %3) #2
  %5 = load double, double* %3, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #2
  %6 = sext i32 %0 to i64
  %7 = getelementptr inbounds [64 x double], [64 x double]* @start, i64 0, i64 %6
  %8 = load double, double* %7, align 8, !tbaa !8
  %9 = fsub double %5, %8
  %10 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %6
  %11 = load double, double* %10, align 8, !tbaa !8
  %12 = fadd double %11, %9
  store double %12, double* %10, align 8, !tbaa !8
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 75
  %13 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %13
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %13
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define double @timer_read(i32) local_unnamed_addr #5 {
  %2 = call i32 @sched_getcpu()
  %3 = sext i32 %0 to i64
  %4 = getelementptr inbounds [64 x double], [64 x double]* @elapsed, i64 0, i64 %3
  %5 = load double, double* %4, align 8, !tbaa !8
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 76
  %6 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %6
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %6
  ret double %5
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @wtime_(double* nocapture) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %3 = alloca %struct.timeval, align 8
  %4 = bitcast %struct.timeval* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #2
  %5 = call i32 @gettimeofday(%struct.timeval* nonnull %3, %struct.timezone* null) #2
  %6 = load i32, i32* @wtime_.sec, align 4, !tbaa !3
  %7 = icmp slt i32 %6, 0
  %8 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i64 0, i32 0
  %9 = load i64, i64* %8, align 8, !tbaa !17
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 77
  %10 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %10
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %10
  br i1 %7, label %11, label %14

; <label>:11:                                     ; preds = %1
  %12 = trunc i64 %9 to i32
  store i32 %12, i32* @wtime_.sec, align 4, !tbaa !3
  %IndexSExt1 = sext i32 %2 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 78
  %13 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %13
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %13
  br label %14

; <label>:14:                                     ; preds = %11, %1
  %15 = phi i32 [ %12, %11 ], [ %6, %1 ]
  %16 = sext i32 %15 to i64
  %17 = sub nsw i64 %9, %16
  %18 = sitofp i64 %17 to double
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i64 0, i32 1
  %20 = load i64, i64* %19, align 8, !tbaa !20
  %21 = sitofp i64 %20 to double
  %22 = fmul double %21, 0x3EB0C6F7A0B5ED8D
  %23 = fadd double %22, %18
  store double %23, double* %0, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #2
  %IndexSExt6 = sext i32 %2 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 79
  %24 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %24
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %24
  ret void
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, %struct.timezone* nocapture) local_unnamed_addr #3

declare void @__kmpc_barrier(%ident_t*, i32) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

; Function Attrs: nounwind
declare double @log(double) local_unnamed_addr #3

; Function Attrs: nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare <2 x double> @llvm.fabs.v2f64(<2 x double>) #6

declare void @__kmpc_for_static_fini(%ident_t*, i32) local_unnamed_addr

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8* nocapture readonly, i8* nocapture readonly) #4 {
  %3 = call i32 @sched_getcpu()
  %4 = bitcast i8* %1 to double**
  %5 = load double*, double** %4, align 8
  %6 = bitcast i8* %0 to double**
  %7 = load double*, double** %6, align 8
  %8 = getelementptr inbounds i8, i8* %1, i64 8
  %9 = bitcast i8* %8 to double**
  %10 = load double*, double** %9, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to double**
  %13 = load double*, double** %12, align 8
  %14 = load double, double* %7, align 8, !tbaa !8
  %15 = load double, double* %5, align 8, !tbaa !8
  %16 = fadd double %14, %15
  store double %16, double* %7, align 8, !tbaa !8
  %17 = load double, double* %13, align 8, !tbaa !8
  %18 = load double, double* %10, align 8, !tbaa !8
  %19 = fadd double %17, %18
  store double %19, double* %13, align 8, !tbaa !8
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 80
  %20 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %20
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %20
  ret void
}

declare i32 @__kmpc_reduce(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_reduce(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_critical(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_critical(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare i32 @__kmpc_master(%ident_t*, i32) local_unnamed_addr

declare i32 @omp_get_num_threads() local_unnamed_addr #7

declare void @__kmpc_end_master(%ident_t*, i32) local_unnamed_addr

; Function Attrs: nounwind uwtable
define void @c_print_results(i8*, i8 signext, i32, i32, i32, i32, i32, double, double, i8*, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*) local_unnamed_addr #0 {
  %21 = call i32 @sched_getcpu()
  %22 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.1, i64 0, i64 0), i8* %0)
  %23 = sext i8 %1 to i32
  %24 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.2.2, i64 0, i64 0), i32 %23)
  %25 = or i32 %4, %3
  %26 = icmp eq i32 %25, 0
  %IndexSExt = sext i32 %21 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 81
  %27 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %27
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %27
  br i1 %26, label %28, label %31

; <label>:28:                                     ; preds = %20
  %29 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3.3, i64 0, i64 0), i32 %2)
  %IndexSExt1 = sext i32 %21 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 89
  %IndexValAdd3 = add i64 %IndexValMul2, 82
  %30 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %30
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %30
  br label %34

; <label>:31:                                     ; preds = %20
  %32 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0), i32 %2, i32 %3, i32 %4)
  %IndexSExt6 = sext i32 %21 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 89
  %IndexValAdd8 = add i64 %IndexValMul7, 83
  %33 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %33
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %33
  br label %34

; <label>:34:                                     ; preds = %31, %28
  %35 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %5)
  %36 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0), i32 %6)
  %37 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0), double %7)
  %38 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), double %8)
  %39 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i8* %9)
  %40 = icmp eq i32 %10, 0
  %IndexSExt11 = sext i32 %21 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 89
  %IndexValAdd13 = add i64 %IndexValMul12, 84
  %41 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %41
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %41
  br i1 %40, label %45, label %42

; <label>:42:                                     ; preds = %34
  %43 = tail call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.23, i64 0, i64 0))
  %IndexSExt16 = sext i32 %21 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 89
  %IndexValAdd18 = add i64 %IndexValMul17, 85
  %44 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %44
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %44
  br label %48

; <label>:45:                                     ; preds = %34
  %46 = tail call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @str.4, i64 0, i64 0))
  %IndexSExt21 = sext i32 %21 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 89
  %IndexValAdd23 = add i64 %IndexValMul22, 86
  %47 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %47
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %47
  br label %48

; <label>:48:                                     ; preds = %45, %42
  %49 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.12, i64 0, i64 0), i8* %11)
  %50 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.13, i64 0, i64 0), i8* %12)
  %51 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.22, i64 0, i64 0))
  %52 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0), i8* %13)
  %53 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.16, i64 0, i64 0), i8* %14)
  %54 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.17, i64 0, i64 0), i8* %15)
  %55 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0), i8* %16)
  %56 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i64 0, i64 0), i8* %17)
  %57 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0), i8* %18)
  %58 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i64 0, i64 0), i8* %19)
  %IndexSExt26 = sext i32 %21 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 89
  %IndexValAdd28 = add i64 %IndexValMul27, 87
  %59 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %59
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %59
  ret void
}

; Function Attrs: nounwind uwtable
define double @elapsed_time() local_unnamed_addr #0 {
  %1 = call i32 @sched_getcpu()
  %2 = alloca double, align 8
  %3 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #2
  call void @wtime_(double* nonnull %2) #2
  %4 = load double, double* %2, align 8, !tbaa !8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #2
  %IndexSExt = sext i32 %1 to i64
  %IndexValMul = mul i64 %IndexSExt, 89
  %IndexValAdd = add i64 %IndexValMul, 88
  %5 = getelementptr [6408 x i64], [6408 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %5
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %5
  ret double %4
}

; Function Attrs: uwtable
define void @_Z18WriteOpenMPProfilePll(i64* %BBCounters, i64 %array_size) #8 {
  %1 = alloca i64*, align 8
  %2 = alloca i64, align 8
  %outstring = alloca [150 x i8], align 16
  %hostname = alloca [100 x i8], align 16
  %pid = alloca i32, align 4
  %fp = alloca %struct._IO_FILE*, align 8
  %i = alloca i32, align 4
  store i64* %BBCounters, i64** %1, align 8
  store i64 %array_size, i64* %2, align 8
  %3 = call i32 @getpid() #2
  store i32 %3, i32* %pid, align 4
  %4 = getelementptr inbounds [100 x i8], [100 x i8]* %hostname, i32 0, i32 0
  %5 = call i32 @gethostname(i8* %4, i64 99) #2
  %6 = getelementptr inbounds [150 x i8], [150 x i8]* %outstring, i32 0, i32 0
  %7 = getelementptr inbounds [100 x i8], [100 x i8]* %hostname, i32 0, i32 0
  %8 = load i32, i32* %pid, align 4
  %9 = call i32 (i8*, i8*, ...) @sprintf(i8* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* %7, i32 %8) #2
  %10 = getelementptr inbounds [150 x i8], [150 x i8]* %outstring, i32 0, i32 0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.2, i32 0, i32 0), i8* %10)
  %12 = getelementptr inbounds [150 x i8], [150 x i8]* %outstring, i32 0, i32 0
  %13 = call %struct._IO_FILE* @fopen(i8* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2.3, i32 0, i32 0))
  store %struct._IO_FILE* %13, %struct._IO_FILE** %fp, align 8
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %15 = icmp eq %struct._IO_FILE* %14, null
  br i1 %15, label %16, label %18

; <label>:16:                                     ; preds = %0
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3.4, i32 0, i32 0))
  br label %38

; <label>:18:                                     ; preds = %0
  store i32 0, i32* %i, align 4
  br label %19

; <label>:19:                                     ; preds = %32, %18
  %20 = load i32, i32* %i, align 4
  %21 = sext i32 %20 to i64
  %22 = load i64, i64* %2, align 8
  %23 = icmp slt i64 %21, %22
  br i1 %23, label %24, label %35

; <label>:24:                                     ; preds = %19
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %26 = load i32, i32* %i, align 4
  %27 = sext i32 %26 to i64
  %28 = load i64*, i64** %1, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 %27
  %30 = load i64, i64* %29, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.5, i32 0, i32 0), i64 %30)
  br label %32

; <label>:32:                                     ; preds = %24
  %33 = load i32, i32* %i, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %i, align 4
  br label %19

; <label>:35:                                     ; preds = %19
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %fp, align 8
  %37 = call i32 @fclose(%struct._IO_FILE* %36)
  br label %38

; <label>:38:                                     ; preds = %35, %16
  ret void
}

; Function Attrs: nounwind
declare i32 @getpid() #9

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #9

declare %struct._IO_FILE* @fopen(i8*, i8*) #10

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #10

declare i32 @fclose(%struct._IO_FILE*) #10

declare i32 @sched_getcpu()

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0, !0, !0, !0, !0, !1}
!llvm.module.flags = !{!2}

!0 = !{!"clang version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
!1 = !{!"clang version 3.8.0-2ubuntu4 (tags/RELEASE_380/final)"}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{!4, !4, i64 0}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!5, !5, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"double", !5, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !15, !11}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
!16 = !{i64 0, i64 1048576, !7}
!17 = !{!18, !19, i64 0}
!18 = !{!"timeval", !19, i64 0, !19, i64 8}
!19 = !{!"long", !5, i64 0}
!20 = !{!18, !19, i64 8}
