; ModuleID = 'my_new.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0) }, align 8
@1 = private unnamed_addr constant %ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0) }, align 8
@2 = private unnamed_addr constant %ident_t { i32 0, i32 18, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0) }, align 8
@3 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i32 0, i32 0) }, align 8
@.str.10 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@.str = private unnamed_addr constant [13 x i8] c"%s.%d.bbfout\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"hello world  %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"open file wrong\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"%ld\09\00", align 1
@BBCounters = internal global [1584 x i64] zeroinitializer

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #0 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 22
  %IndexValAdd = add i64 %IndexValMul, 0
  %4 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  tail call void @prime_number_sweep(i32 1, i32 131072, i32 2)
  tail call void @prime_number_sweep(i32 5, i32 500000, i32 10)
  call void @_Z18WriteOpenMPProfilePll(i64* getelementptr inbounds ([1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 0), i64 1584)
  ret i32 undef
}

; Function Attrs: nounwind uwtable
define void @prime_number_sweep(i32, i32, i32) local_unnamed_addr #0 {
  %4 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %4 to i64
  %IndexValMul = mul i64 %IndexSExt, 22
  %IndexValAdd = add i64 %IndexValMul, 1
  %5 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %5
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %5
  %6 = icmp sgt i32 %0, %1
  br i1 %6, label %15, label %7

; <label>:7:                                      ; preds = %3
  %IndexSExt1 = sext i32 %4 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 22
  %IndexValAdd3 = add i64 %IndexValMul2, 2
  %8 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %8
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %8
  br label %9

; <label>:9:                                      ; preds = %9, %7
  %10 = phi i32 [ %13, %9 ], [ %0, %7 ]
  %IndexSExt6 = sext i32 %4 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 22
  %IndexValAdd8 = add i64 %IndexValMul7, 3
  %11 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %11
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %11
  %12 = tail call i32 @prime_number(i32 %10)
  %13 = mul nsw i32 %10, %2
  %14 = icmp sgt i32 %13, %1
  br i1 %14, label %15, label %9

; <label>:15:                                     ; preds = %9, %3
  %IndexSExt11 = sext i32 %4 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 22
  %IndexValAdd13 = add i64 %IndexValMul12, 4
  %16 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %16
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %16
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @prime_number(i32) local_unnamed_addr #0 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 22
  %IndexValAdd = add i64 %IndexValMul, 5
  %3 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4, !tbaa !2
  store i32 0, i32* %5, align 4, !tbaa !2
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 2, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %5, i32* nonnull %4) #5
  %6 = call i32 @sched_getcpu()
  %IndexSExt1 = sext i32 %6 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 22
  %IndexValAdd3 = add i64 %IndexValMul2, 6
  %7 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %7
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %7
  ret i32 undef
}

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture dereferenceable(4), i32* nocapture readonly dereferenceable(4)) #0 {
  %5 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %5 to i64
  %IndexValMul = mul i64 %IndexSExt, 22
  %IndexValAdd = add i64 %IndexValMul, 7
  %6 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %6
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %6
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [1 x i8*], align 8
  %12 = load i32, i32* %3, align 4, !tbaa !2
  %13 = add nsw i32 %12, -2
  %14 = icmp sgt i32 %12, 1
  br i1 %14, label %15, label %57

; <label>:15:                                     ; preds = %4
  %IndexSExt1 = sext i32 %5 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 22
  %IndexValAdd3 = add i64 %IndexValMul2, 8
  %16 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %16
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %16
  store i32 0, i32* %7, align 4, !tbaa !2
  store i32 %13, i32* %8, align 4, !tbaa !2
  store i32 1, i32* %9, align 4, !tbaa !2
  store i32 0, i32* %10, align 4, !tbaa !2
  %17 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %17, i32 34, i32* nonnull %10, i32* nonnull %7, i32* nonnull %8, i32* nonnull %9, i32 1, i32 1) #5
  %18 = load i32, i32* %8, align 4, !tbaa !2
  %19 = icmp sgt i32 %18, %13
  %20 = select i1 %19, i32 %13, i32 %18
  %21 = load i32, i32* %7, align 4, !tbaa !2
  %22 = icmp sgt i32 %21, %20
  br i1 %22, label %47, label %23

; <label>:23:                                     ; preds = %15
  %IndexSExt6 = sext i32 %5 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 22
  %IndexValAdd8 = add i64 %IndexValMul7, 9
  %24 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %24
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %24
  br label %25

; <label>:25:                                     ; preds = %41, %23
  %26 = phi i32 [ %21, %23 ], [ %43, %41 ]
  %IndexSExt11 = sext i32 %5 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 22
  %IndexValAdd13 = add i64 %IndexValMul12, 10
  %27 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %27
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %27
  %28 = add nsw i32 %26, 2
  %29 = icmp sgt i32 %26, 0
  br i1 %29, label %30, label %41

; <label>:30:                                     ; preds = %25
  %IndexSExt16 = sext i32 %5 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 22
  %IndexValAdd18 = add i64 %IndexValMul17, 11
  %31 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %31
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %31
  br label %35

; <label>:32:                                     ; preds = %35
  %IndexSExt21 = sext i32 %5 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 22
  %IndexValAdd23 = add i64 %IndexValMul22, 12
  %33 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %33
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %33
  %34 = icmp slt i32 %40, %28
  br i1 %34, label %35, label %41

; <label>:35:                                     ; preds = %32, %30
  %36 = phi i32 [ %40, %32 ], [ 2, %30 ]
  %IndexSExt26 = sext i32 %5 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 22
  %IndexValAdd28 = add i64 %IndexValMul27, 13
  %37 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %37
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %37
  %38 = srem i32 %28, %36
  %39 = icmp eq i32 %38, 0
  %40 = add nuw nsw i32 %36, 1
  br i1 %39, label %41, label %32

; <label>:41:                                     ; preds = %35, %32, %25
  %IndexSExt31 = sext i32 %5 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 22
  %IndexValAdd33 = add i64 %IndexValMul32, 14
  %42 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %42
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %42
  %43 = add nsw i32 %26, 1
  %44 = icmp slt i32 %26, %20
  br i1 %44, label %25, label %45

; <label>:45:                                     ; preds = %41
  %IndexSExt36 = sext i32 %5 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 22
  %IndexValAdd38 = add i64 %IndexValMul37, 15
  %46 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %46
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %46
  br label %47

; <label>:47:                                     ; preds = %45, %15
  %IndexSExt41 = sext i32 %5 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 22
  %IndexValAdd43 = add i64 %IndexValMul42, 16
  %48 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %48
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %48
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %17) #5
  %49 = bitcast [1 x i8*]* %11 to i8*
  %50 = call i32 @__kmpc_reduce(%ident_t* nonnull @2, i32 %17, i32 1, i64 8, i8* nonnull %49, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #5
  switch i32 %50, label %55 [
    i32 1, label %51
    i32 2, label %53
  ]

; <label>:51:                                     ; preds = %47
  %IndexSExt46 = sext i32 %5 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 22
  %IndexValAdd48 = add i64 %IndexValMul47, 17
  %52 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %52
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %52
  call void @__kmpc_end_reduce(%ident_t* nonnull @2, i32 %17, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #5
  br label %55

; <label>:53:                                     ; preds = %47
  %IndexSExt51 = sext i32 %5 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 22
  %IndexValAdd53 = add i64 %IndexValMul52, 18
  %54 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %54
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %54
  call void @__kmpc_end_reduce(%ident_t* nonnull @2, i32 %17, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #5
  br label %55

; <label>:55:                                     ; preds = %53, %51, %47
  %IndexSExt56 = sext i32 %5 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 22
  %IndexValAdd58 = add i64 %IndexValMul57, 19
  %56 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %56
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %56
  br label %57

; <label>:57:                                     ; preds = %55, %4
  %IndexSExt61 = sext i32 %5 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 22
  %IndexValAdd63 = add i64 %IndexValMul62, 20
  %58 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %58
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %58
  %59 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_barrier(%ident_t* nonnull @3, i32 %59) #5
  ret void
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

declare void @__kmpc_for_static_fini(%ident_t*, i32) local_unnamed_addr

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8* nocapture readonly, i8* nocapture readonly) #1 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 22
  %IndexValAdd = add i64 %IndexValMul, 21
  %4 = getelementptr [1584 x i64], [1584 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  ret void
}

declare i32 @__kmpc_reduce(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_reduce(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_barrier(%ident_t*, i32) local_unnamed_addr

; Function Attrs: noinline optnone uwtable
define void @_Z18WriteOpenMPProfilePll(i64*, i64) #2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca [150 x i8], align 16
  %6 = alloca [100 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct._IO_FILE*, align 8
  %9 = alloca i32, align 4
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  %10 = call i32 @getpid() #5
  store i32 %10, i32* %7, align 4
  %11 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %12 = call i32 @gethostname(i8* %11, i64 99) #5
  %13 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %15 = load i32, i32* %7, align 4
  %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* %14, i32 %15) #5
  %17 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* %17)
  %19 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %20 = call %struct._IO_FILE* @fopen(i8* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store %struct._IO_FILE* %20, %struct._IO_FILE** %8, align 8
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %22 = icmp eq %struct._IO_FILE* %21, null
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  br label %45

; <label>:25:                                     ; preds = %2
  store i32 0, i32* %9, align 4
  br label %26

; <label>:26:                                     ; preds = %39, %25
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %4, align 8
  %30 = icmp slt i64 %28, %29
  br i1 %30, label %31, label %42

; <label>:31:                                     ; preds = %26
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %33 = load i64*, i64** %3, align 8
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i64, i64* %33, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i64 %37)
  br label %39

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %9, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %9, align 4
  br label %26

; <label>:42:                                     ; preds = %26
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %44 = call i32 @fclose(%struct._IO_FILE* %43)
  br label %45

; <label>:45:                                     ; preds = %42, %23
  ret void
}

; Function Attrs: nounwind
declare i32 @getpid() #3

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #3

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

declare i32 @printf(i8*, ...) #4

declare %struct._IO_FILE* @fopen(i8*, i8*) #4

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

declare i32 @fclose(%struct._IO_FILE*) #4

declare i32 @sched_getcpu()

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
