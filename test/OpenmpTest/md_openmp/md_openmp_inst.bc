; ModuleID = 'md_openmp_new.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.gomp_critical_user_.reduction.var = common global [8 x i32] zeroinitializer
@str = private unnamed_addr constant [10 x i8] c"MD_OPENMP\00"
@str.25 = private unnamed_addr constant [19 x i8] c"  C/OpenMP version\00"
@str.26 = private unnamed_addr constant [32 x i8] c"  A molecular dynamics program.\00"
@.str.4 = private unnamed_addr constant [55 x i8] c"  NP, the number of particles in the simulation is %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"  STEP_NUM, the number of time steps, is %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"  DT, the size of each time step, is %f\0A\00", align 1
@.str.7 = private unnamed_addr constant [39 x i8] c"  Number of processors available = %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"  Number of threads =              %d\0A\00", align 1
@str.27 = private unnamed_addr constant [57 x i8] c"  Initializing positions, velocities, and accelerations.\00"
@str.28 = private unnamed_addr constant [41 x i8] c"  Computing initial forces and energies.\00"
@str.29 = private unnamed_addr constant [62 x i8] c"  At each step, we report the potential and kinetic energies.\00"
@str.30 = private unnamed_addr constant [50 x i8] c"  The sum of these energies should be a constant.\00"
@str.31 = private unnamed_addr constant [57 x i8] c"  As an accuracy check, we also print the relative error\00"
@str.32 = private unnamed_addr constant [23 x i8] c"  in the total energy.\00"
@str.33 = private unnamed_addr constant [59 x i8] c"      Step      Potential       Kinetic        (P+K-E0)/E0\00"
@str.34 = private unnamed_addr constant [69 x i8] c"                Energy P        Energy K       Relative Energy Error\00"
@.str.17 = private unnamed_addr constant [25 x i8] c"  %8d  %14f  %14f  %14e\0A\00", align 1
@str.35 = private unnamed_addr constant [37 x i8] c"  Elapsed time for main computation:\00"
@.str.19 = private unnamed_addr constant [15 x i8] c"  %f seconds.\0A\00", align 1
@str.36 = private unnamed_addr constant [10 x i8] c"MD_OPENMP\00"
@str.37 = private unnamed_addr constant [27 x i8] c"  Normal end of execution.\00"
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i32 0, i32 0) }, align 8
@1 = private unnamed_addr constant %ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i32 0, i32 0) }, align 8
@2 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i32 0, i32 0) }, align 8
@.str.21 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@3 = private unnamed_addr constant %ident_t { i32 0, i32 18, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.21, i32 0, i32 0) }, align 8
@timestamp.time_buffer = internal global [40 x i8] zeroinitializer, align 16
@.str.22 = private unnamed_addr constant [21 x i8] c"%d %B %Y %I:%M:%S %p\00", align 1
@.str = private unnamed_addr constant [13 x i8] c"%s.%d.bbfout\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"hello world  %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"open file wrong\0A\00", align 1
@.str.4.1 = private unnamed_addr constant [5 x i8] c"%ld\09\00", align 1
@BBCounters = internal global [5040 x i64] zeroinitializer

; Function Attrs: nounwind uwtable
define i32 @main(i32, i8** nocapture readnone) local_unnamed_addr #0 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 0
  %4 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #4
  %9 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #4
  %10 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #4
  store i32 123456789, i32* %7, align 4, !tbaa !2
  tail call void @timestamp()
  %11 = tail call i32 @omp_get_num_procs() #4
  %12 = tail call noalias i8* @malloc(i64 24000) #4
  %13 = tail call noalias i8* @malloc(i64 24) #4
  %14 = bitcast i8* %13 to double*
  %15 = tail call noalias i8* @malloc(i64 24000) #4
  %16 = tail call noalias i8* @malloc(i64 24000) #4
  %17 = tail call noalias i8* @malloc(i64 24000) #4
  %18 = tail call i32 @putchar(i32 10)
  %19 = tail call i32 @puts(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str, i64 0, i64 0))
  %20 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.25, i64 0, i64 0))
  %21 = tail call i32 @putchar(i32 10)
  %22 = tail call i32 @puts(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str.26, i64 0, i64 0))
  %23 = tail call i32 @putchar(i32 10)
  %24 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.4, i64 0, i64 0), i32 1000)
  %25 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0), i32 400)
  %26 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0), double 1.000000e-04)
  %27 = tail call i32 @putchar(i32 10)
  %28 = tail call i32 @omp_get_num_procs() #4
  %29 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0), i32 %28)
  %30 = tail call i32 @omp_get_max_threads() #4
  %31 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %30)
  br label %32

; <label>:32:                                     ; preds = %32, %2
  %33 = phi i64 [ 0, %2 ], [ %36, %32 ]
  %IndexSExt1 = sext i32 %3 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 1
  %34 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %34
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %34
  %35 = getelementptr inbounds double, double* %14, i64 %33
  store double 1.000000e+01, double* %35, align 8, !tbaa !6
  %36 = add nuw nsw i64 %33, 1
  %37 = icmp eq i64 %36, 3
  br i1 %37, label %38, label %32

; <label>:38:                                     ; preds = %32
  %IndexSExt6 = sext i32 %3 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 70
  %IndexValAdd8 = add i64 %IndexValMul7, 2
  %39 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %39
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %39
  %40 = bitcast i8* %12 to double*
  %41 = bitcast i8* %15 to double*
  %42 = bitcast i8* %16 to double*
  %43 = bitcast i8* %17 to double*
  %44 = tail call i32 @putchar(i32 10)
  %45 = tail call i32 @puts(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @str.27, i64 0, i64 0))
  call void @initialize(i32 1000, i32 3, double* nonnull %14, i32* nonnull %7, double* %42, double* %43, double* %40)
  %46 = tail call i32 @putchar(i32 10)
  %47 = tail call i32 @puts(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @str.28, i64 0, i64 0))
  call void @compute(i32 1000, i32 3, double* %42, double* %43, double 1.000000e+00, double* %41, double* nonnull %6, double* nonnull %5)
  %48 = load double, double* %6, align 8, !tbaa !6
  %49 = load double, double* %5, align 8, !tbaa !6
  %50 = fadd double %48, %49
  %51 = tail call i32 @putchar(i32 10)
  %52 = tail call i32 @puts(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @str.29, i64 0, i64 0))
  %53 = tail call i32 @puts(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @str.30, i64 0, i64 0))
  %54 = tail call i32 @puts(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @str.31, i64 0, i64 0))
  %55 = tail call i32 @puts(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @str.32, i64 0, i64 0))
  %56 = tail call i32 @putchar(i32 10)
  %57 = tail call i32 @puts(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @str.33, i64 0, i64 0))
  %58 = tail call i32 @puts(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @str.34, i64 0, i64 0))
  %59 = tail call i32 @putchar(i32 10)
  %60 = fsub double %50, %50
  %61 = fdiv double %60, %50
  %62 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), i32 0, double %48, double %49, double %61)
  %63 = tail call double @omp_get_wtime() #4
  br label %64

; <label>:64:                                     ; preds = %80, %38
  %65 = phi i32 [ 1, %38 ], [ %84, %80 ]
  %66 = phi i32 [ 40, %38 ], [ %82, %80 ]
  %67 = phi i32 [ 1, %38 ], [ %81, %80 ]
  %IndexSExt11 = sext i32 %3 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 70
  %IndexValAdd13 = add i64 %IndexValMul12, 3
  %68 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %68
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %68
  call void @compute(i32 1000, i32 3, double* %42, double* %43, double 1.000000e+00, double* %41, double* nonnull %6, double* nonnull %5)
  %69 = icmp eq i32 %65, %66
  br i1 %69, label %70, label %80

; <label>:70:                                     ; preds = %64
  %IndexSExt16 = sext i32 %3 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 70
  %IndexValAdd18 = add i64 %IndexValMul17, 4
  %71 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %71
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %71
  %72 = load double, double* %6, align 8, !tbaa !6
  %73 = load double, double* %5, align 8, !tbaa !6
  %74 = fadd double %72, %73
  %75 = fsub double %74, %50
  %76 = fdiv double %75, %50
  %77 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), i32 %65, double %72, double %73, double %76)
  %78 = add nsw i32 %67, 1
  %79 = mul nsw i32 %78, 40
  br label %80

; <label>:80:                                     ; preds = %70, %64
  %81 = phi i32 [ %78, %70 ], [ %67, %64 ]
  %82 = phi i32 [ %79, %70 ], [ %66, %64 ]
  %IndexSExt21 = sext i32 %3 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 70
  %IndexValAdd23 = add i64 %IndexValMul22, 5
  %83 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %83
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %83
  tail call void @update(i32 1000, i32 3, double* %42, double* %43, double* %41, double* %40, double 1.000000e+00, double 1.000000e-04)
  %84 = add nuw nsw i32 %65, 1
  %85 = icmp eq i32 %84, 401
  br i1 %85, label %86, label %64

; <label>:86:                                     ; preds = %80
  %IndexSExt26 = sext i32 %3 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 70
  %IndexValAdd28 = add i64 %IndexValMul27, 6
  %87 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %87
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %87
  %88 = tail call double @omp_get_wtime() #4
  %89 = fsub double %88, %63
  %90 = tail call i32 @putchar(i32 10)
  %91 = tail call i32 @puts(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @str.35, i64 0, i64 0))
  %92 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), double %89)
  tail call void @free(i8* %12) #4
  tail call void @free(i8* %13) #4
  tail call void @free(i8* %15) #4
  tail call void @free(i8* %16) #4
  tail call void @free(i8* %17) #4
  %93 = tail call i32 @putchar(i32 10)
  %94 = tail call i32 @puts(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @str.36, i64 0, i64 0))
  %95 = tail call i32 @puts(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.37, i64 0, i64 0))
  %96 = tail call i32 @putchar(i32 10)
  tail call void @timestamp()
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #4
  call void @_Z18WriteOpenMPProfilePll(i64* getelementptr inbounds ([5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 0), i64 5040)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define void @timestamp() local_unnamed_addr #0 {
  %1 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %1 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 7
  %2 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %2
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %2
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #4
  %5 = tail call i64 @time(i64* null) #4
  store i64 %5, i64* %3, align 8, !tbaa !8
  %6 = call %struct.tm* @localtime(i64* nonnull %3) #4
  %7 = call i64 @strftime(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0), i64 40, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), %struct.tm* %6) #4
  %8 = call i32 @puts(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #4
  ret void
}

declare i32 @omp_get_num_procs() local_unnamed_addr #2

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @putchar(i32) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #3

declare i32 @omp_get_max_threads() local_unnamed_addr #2

; Function Attrs: norecurse nounwind uwtable
define void @initialize(i32, i32, double* nocapture readonly, i32* nocapture, double* nocapture, double* nocapture, double* nocapture) local_unnamed_addr #5 {
  %8 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %8 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 8
  %9 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %9
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %9
  %10 = icmp sgt i32 %1, 0
  br i1 %10, label %11, label %38

; <label>:11:                                     ; preds = %7
  %IndexSExt1 = sext i32 %8 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 9
  %12 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %12
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %12
  %13 = icmp sgt i32 %0, 0
  %14 = sext i32 %1 to i64
  %15 = zext i32 %0 to i64
  %16 = zext i32 %1 to i64
  br label %17

; <label>:17:                                     ; preds = %34, %11
  %18 = phi i64 [ 0, %11 ], [ %36, %34 ]
  %IndexSExt6 = sext i32 %8 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 70
  %IndexValAdd8 = add i64 %IndexValMul7, 10
  %19 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %19
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %19
  br i1 %13, label %20, label %34

; <label>:20:                                     ; preds = %17
  %IndexSExt11 = sext i32 %8 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 70
  %IndexValAdd13 = add i64 %IndexValMul12, 11
  %21 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %21
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %21
  %22 = getelementptr inbounds double, double* %2, i64 %18
  br label %23

; <label>:23:                                     ; preds = %23, %20
  %24 = phi i64 [ 0, %20 ], [ %32, %23 ]
  %IndexSExt16 = sext i32 %8 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 70
  %IndexValAdd18 = add i64 %IndexValMul17, 12
  %25 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %25
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %25
  %26 = load double, double* %22, align 8, !tbaa !6
  %27 = tail call double @r8_uniform_01(i32* %3)
  %28 = fmul double %26, %27
  %29 = mul nsw i64 %24, %14
  %30 = add nsw i64 %29, %18
  %31 = getelementptr inbounds double, double* %4, i64 %30
  store double %28, double* %31, align 8, !tbaa !6
  %32 = add nuw nsw i64 %24, 1
  %33 = icmp eq i64 %32, %15
  br i1 %33, label %34, label %23

; <label>:34:                                     ; preds = %23, %17
  %IndexSExt21 = sext i32 %8 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 70
  %IndexValAdd23 = add i64 %IndexValMul22, 13
  %35 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %35
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %35
  %36 = add nuw nsw i64 %18, 1
  %37 = icmp eq i64 %36, %16
  br i1 %37, label %38, label %17

; <label>:38:                                     ; preds = %34, %7
  %IndexSExt26 = sext i32 %8 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 70
  %IndexValAdd28 = add i64 %IndexValMul27, 14
  %39 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %39
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %39
  %40 = icmp sgt i32 %0, 0
  br i1 %40, label %41, label %84

; <label>:41:                                     ; preds = %38
  %IndexSExt31 = sext i32 %8 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 70
  %IndexValAdd33 = add i64 %IndexValMul32, 15
  %42 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %42
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %42
  %43 = icmp sgt i32 %1, 0
  %44 = zext i32 %1 to i64
  %45 = shl nuw nsw i64 %44, 3
  %46 = zext i32 %0 to i64
  br label %47

; <label>:47:                                     ; preds = %57, %41
  %48 = phi i64 [ 0, %41 ], [ %59, %57 ]
  %IndexSExt36 = sext i32 %8 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 70
  %IndexValAdd38 = add i64 %IndexValMul37, 16
  %49 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %49
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %49
  br i1 %43, label %50, label %57

; <label>:50:                                     ; preds = %47
  %IndexSExt41 = sext i32 %8 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 70
  %IndexValAdd43 = add i64 %IndexValMul42, 17
  %51 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %51
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %51
  %52 = trunc i64 %48 to i32
  %53 = mul i32 %52, %1
  %54 = sext i32 %53 to i64
  %55 = getelementptr double, double* %5, i64 %54
  %56 = bitcast double* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 %45, i32 8, i1 false)
  br label %57

; <label>:57:                                     ; preds = %50, %47
  %IndexSExt46 = sext i32 %8 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 70
  %IndexValAdd48 = add i64 %IndexValMul47, 18
  %58 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %58
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %58
  %59 = add nuw nsw i64 %48, 1
  %60 = icmp eq i64 %59, %46
  br i1 %60, label %61, label %47

; <label>:61:                                     ; preds = %57
  %IndexSExt51 = sext i32 %8 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 70
  %IndexValAdd53 = add i64 %IndexValMul52, 19
  %62 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %62
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %62
  %63 = icmp sgt i32 %0, 0
  br i1 %63, label %64, label %84

; <label>:64:                                     ; preds = %61
  %IndexSExt56 = sext i32 %8 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 70
  %IndexValAdd58 = add i64 %IndexValMul57, 20
  %65 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %65
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %65
  %66 = icmp sgt i32 %1, 0
  %67 = zext i32 %1 to i64
  %68 = shl nuw nsw i64 %67, 3
  %69 = zext i32 %0 to i64
  br label %70

; <label>:70:                                     ; preds = %80, %64
  %71 = phi i64 [ 0, %64 ], [ %82, %80 ]
  %IndexSExt61 = sext i32 %8 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 70
  %IndexValAdd63 = add i64 %IndexValMul62, 21
  %72 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %72
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %72
  br i1 %66, label %73, label %80

; <label>:73:                                     ; preds = %70
  %IndexSExt66 = sext i32 %8 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 70
  %IndexValAdd68 = add i64 %IndexValMul67, 22
  %74 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %74
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %74
  %75 = trunc i64 %71 to i32
  %76 = mul i32 %75, %1
  %77 = sext i32 %76 to i64
  %78 = getelementptr double, double* %6, i64 %77
  %79 = bitcast double* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* %79, i8 0, i64 %68, i32 8, i1 false)
  br label %80

; <label>:80:                                     ; preds = %73, %70
  %IndexSExt71 = sext i32 %8 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 70
  %IndexValAdd73 = add i64 %IndexValMul72, 23
  %81 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %81
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %81
  %82 = add nuw nsw i64 %71, 1
  %83 = icmp eq i64 %82, %69
  br i1 %83, label %84, label %70

; <label>:84:                                     ; preds = %80, %38, %61
  %IndexSExt76 = sext i32 %8 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 70
  %IndexValAdd78 = add i64 %IndexValMul77, 24
  %85 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %85
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %85
  ret void
}

; Function Attrs: nounwind uwtable
define void @compute(i32, i32, double*, double*, double, double*, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %9 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %9 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 25
  %10 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %10
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %10
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca double*, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 %0, i32* %11, align 4, !tbaa !2
  store i32 %1, i32* %12, align 4, !tbaa !2
  store double* %2, double** %13, align 8, !tbaa !10
  store double* %3, double** %14, align 8, !tbaa !10
  store double* %5, double** %15, align 8, !tbaa !10
  %19 = bitcast double* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #4
  %20 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #4
  %21 = bitcast double* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #4
  store double 0x3FF921FB54442D18, double* %18, align 8, !tbaa !6
  store double 0.000000e+00, double* %17, align 8, !tbaa !6
  store double 0.000000e+00, double* %16, align 8, !tbaa !6
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, double*, double*, i32*, i32*, double**, double**, double*, double**)* @.omp_outlined. to void (i32*, i32*, ...)*), double* nonnull %17, double* nonnull %16, i32* nonnull %11, i32* nonnull %12, double** nonnull %15, double** nonnull %13, double* nonnull %18, double** nonnull %14) #4
  %22 = call i32 @sched_getcpu()
  %IndexSExt1 = sext i32 %22 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 26
  %23 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %23
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %23
  %24 = load double, double* %16, align 8, !tbaa !6
  %25 = fmul double %24, 5.000000e-01
  %26 = fmul double %25, %4
  %27 = bitcast double* %17 to i64*
  %28 = load i64, i64* %27, align 8, !tbaa !6
  %29 = bitcast double* %6 to i64*
  store i64 %28, i64* %29, align 8, !tbaa !6
  store double %26, double* %7, align 8, !tbaa !6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #4
  ret void
}

declare double @omp_get_wtime() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define void @update(i32, i32, double*, double*, double*, double*, double, double) local_unnamed_addr #0 {
  %9 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %9 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 27
  %10 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %10
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %10
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca double*, align 8
  %16 = alloca double*, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  store i32 %0, i32* %11, align 4, !tbaa !2
  store i32 %1, i32* %12, align 4, !tbaa !2
  store double* %2, double** %13, align 8, !tbaa !10
  store double* %3, double** %14, align 8, !tbaa !10
  store double* %4, double** %15, align 8, !tbaa !10
  store double* %5, double** %16, align 8, !tbaa !10
  store double %7, double* %17, align 8, !tbaa !6
  %19 = bitcast double* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #4
  %20 = fdiv double 1.000000e+00, %6
  store double %20, double* %18, align 8, !tbaa !6
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 8, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, i32*, double**, double**, double*, double**, double**, double*)* @.omp_outlined..24 to void (i32*, i32*, ...)*), i32* nonnull %11, i32* nonnull %12, double** nonnull %13, double** nonnull %14, double* nonnull %17, double** nonnull %16, double** nonnull %15, double* nonnull %18) #4
  %21 = call i32 @sched_getcpu()
  %IndexSExt1 = sext i32 %21 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 28
  %22 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %22
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %22
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #4
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined..24(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readonly dereferenceable(4), i32* nocapture readonly dereferenceable(4), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double* nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double* nocapture readonly dereferenceable(8)) #0 {
  %11 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %11 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 29
  %12 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %12
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %12
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = load i32, i32* %2, align 4, !tbaa !2
  %18 = add nsw i32 %17, -1
  %19 = icmp sgt i32 %17, 0
  br i1 %19, label %20, label %89

; <label>:20:                                     ; preds = %10
  %IndexSExt1 = sext i32 %11 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 30
  %21 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %21
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %21
  %22 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %22) #4
  store i32 0, i32* %13, align 4, !tbaa !2
  %23 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #4
  store i32 %18, i32* %14, align 4, !tbaa !2
  %24 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #4
  store i32 1, i32* %15, align 4, !tbaa !2
  %25 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #4
  store i32 0, i32* %16, align 4, !tbaa !2
  %26 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %26, i32 34, i32* nonnull %16, i32* nonnull %13, i32* nonnull %14, i32* nonnull %15, i32 1, i32 1) #4
  %27 = load i32, i32* %14, align 4, !tbaa !2
  %28 = icmp sgt i32 %27, %18
  %29 = select i1 %28, i32 %18, i32 %27
  store i32 %29, i32* %14, align 4, !tbaa !2
  %30 = load i32, i32* %13, align 4, !tbaa !2
  %31 = icmp sgt i32 %30, %29
  br i1 %31, label %87, label %32

; <label>:32:                                     ; preds = %20
  %IndexSExt6 = sext i32 %11 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 70
  %IndexValAdd8 = add i64 %IndexValMul7, 31
  %33 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %33
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %33
  %34 = load i32, i32* %3, align 4
  %35 = icmp sgt i32 %34, 0
  %36 = load double*, double** %4, align 8
  %37 = load double*, double** %5, align 8
  %38 = load double*, double** %7, align 8
  %39 = load double*, double** %8, align 8
  %40 = sext i32 %30 to i64
  %41 = sext i32 %34 to i64
  %42 = sext i32 %29 to i64
  %43 = zext i32 %34 to i64
  br label %44

; <label>:44:                                     ; preds = %83, %32
  %45 = phi i64 [ %85, %83 ], [ %40, %32 ]
  %IndexSExt11 = sext i32 %11 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 70
  %IndexValAdd13 = add i64 %IndexValMul12, 32
  %46 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %46
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %46
  br i1 %35, label %47, label %83

; <label>:47:                                     ; preds = %44
  %IndexSExt16 = sext i32 %11 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 70
  %IndexValAdd18 = add i64 %IndexValMul17, 33
  %48 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %48
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %48
  %49 = mul nsw i64 %45, %41
  br label %50

; <label>:50:                                     ; preds = %50, %47
  %51 = phi i64 [ 0, %47 ], [ %81, %50 ]
  %IndexSExt21 = sext i32 %11 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 70
  %IndexValAdd23 = add i64 %IndexValMul22, 34
  %52 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %52
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %52
  %53 = add nsw i64 %49, %51
  %54 = getelementptr inbounds double, double* %36, i64 %53
  %55 = load double, double* %54, align 8, !tbaa !6
  %56 = getelementptr inbounds double, double* %37, i64 %53
  %57 = load double, double* %56, align 8, !tbaa !6
  %58 = load double, double* %6, align 8, !tbaa !6
  %59 = fmul double %57, %58
  %60 = fadd double %55, %59
  %61 = getelementptr inbounds double, double* %38, i64 %53
  %62 = load double, double* %61, align 8, !tbaa !6
  %63 = fmul double %62, 5.000000e-01
  %64 = fmul double %58, %63
  %65 = fmul double %58, %64
  %66 = fadd double %60, %65
  store double %66, double* %54, align 8, !tbaa !6
  %67 = load double, double* %56, align 8, !tbaa !6
  %68 = load double, double* %6, align 8, !tbaa !6
  %69 = fmul double %68, 5.000000e-01
  %70 = getelementptr inbounds double, double* %39, i64 %53
  %71 = load double, double* %70, align 8, !tbaa !6
  %72 = load double, double* %9, align 8, !tbaa !6
  %73 = fmul double %71, %72
  %74 = load double, double* %61, align 8, !tbaa !6
  %75 = fadd double %73, %74
  %76 = fmul double %69, %75
  %77 = fadd double %67, %76
  store double %77, double* %56, align 8, !tbaa !6
  %78 = load double, double* %70, align 8, !tbaa !6
  %79 = load double, double* %9, align 8, !tbaa !6
  %80 = fmul double %78, %79
  store double %80, double* %61, align 8, !tbaa !6
  %81 = add nuw nsw i64 %51, 1
  %82 = icmp eq i64 %81, %43
  br i1 %82, label %83, label %50

; <label>:83:                                     ; preds = %50, %44
  %IndexSExt26 = sext i32 %11 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 70
  %IndexValAdd28 = add i64 %IndexValMul27, 35
  %84 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %84
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %84
  %85 = add nsw i64 %45, 1
  %86 = icmp slt i64 %45, %42
  br i1 %86, label %44, label %87

; <label>:87:                                     ; preds = %83, %20
  %IndexSExt31 = sext i32 %11 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 70
  %IndexValAdd33 = add i64 %IndexValMul32, 36
  %88 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %88
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %88
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %26) #4
  br label %89

; <label>:89:                                     ; preds = %87, %10
  %IndexSExt36 = sext i32 %11 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 70
  %IndexValAdd38 = add i64 %IndexValMul37, 37
  %90 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %90
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %90
  %91 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %91) #4
  %92 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %92) #4
  %93 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %93) #4
  %94 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #4
  %95 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %95) #4
  ret void
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

declare void @__kmpc_for_static_fini(%ident_t*, i32) local_unnamed_addr

declare void @__kmpc_barrier(%ident_t*, i32) local_unnamed_addr

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone, double* nocapture dereferenceable(8), double* nocapture dereferenceable(8), i32* nocapture readonly dereferenceable(4), i32* nocapture readonly dereferenceable(4), double** nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8), double* nocapture readonly dereferenceable(8), double** nocapture readonly dereferenceable(8)) #0 {
  %11 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %11 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 38
  %12 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %12
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %12
  %13 = alloca [3 x double], align 16
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca [2 x i8*], align 8
  %21 = bitcast [3 x double]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #4
  %22 = load i32, i32* %4, align 4, !tbaa !2
  %23 = add nsw i32 %22, -1
  %24 = icmp sgt i32 %22, 0
  br i1 %24, label %25, label %202

; <label>:25:                                     ; preds = %10
  %IndexSExt1 = sext i32 %11 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 39
  %26 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %26
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %26
  %27 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #4
  store i32 0, i32* %14, align 4, !tbaa !2
  %28 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #4
  store i32 %23, i32* %15, align 4, !tbaa !2
  %29 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #4
  store i32 1, i32* %16, align 4, !tbaa !2
  %30 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %30) #4
  store i32 0, i32* %17, align 4, !tbaa !2
  %31 = bitcast double* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #4
  store double 0.000000e+00, double* %18, align 8, !tbaa !6
  %32 = bitcast double* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #4
  store double 0.000000e+00, double* %19, align 8, !tbaa !6
  %33 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %33, i32 34, i32* nonnull %17, i32* nonnull %14, i32* nonnull %15, i32* nonnull %16, i32 1, i32 1) #4
  %34 = load i32, i32* %15, align 4, !tbaa !2
  %35 = icmp sgt i32 %34, %23
  %36 = select i1 %35, i32 %23, i32 %34
  store i32 %36, i32* %15, align 4, !tbaa !2
  %37 = load i32, i32* %14, align 4, !tbaa !2
  %38 = icmp sgt i32 %37, %36
  br i1 %38, label %155, label %39

; <label>:39:                                     ; preds = %25
  %IndexSExt6 = sext i32 %11 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 70
  %IndexValAdd8 = add i64 %IndexValMul7, 40
  %40 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %40
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %40
  %41 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 0
  br label %42

; <label>:42:                                     ; preds = %150, %39
  %43 = phi i32 [ %37, %39 ], [ %152, %150 ]
  %IndexSExt11 = sext i32 %11 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 70
  %IndexValAdd13 = add i64 %IndexValMul12, 41
  %44 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %44
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %44
  %45 = load i32, i32* %5, align 4, !tbaa !2
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %61

; <label>:47:                                     ; preds = %42
  %IndexSExt16 = sext i32 %11 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 70
  %IndexValAdd18 = add i64 %IndexValMul17, 42
  %48 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %48
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %48
  %49 = load double*, double** %6, align 8, !tbaa !10
  %50 = load i32, i32* %5, align 4, !tbaa !2
  br label %51

; <label>:51:                                     ; preds = %47, %51
  %52 = phi i32 [ %45, %47 ], [ %50, %51 ]
  %53 = phi i32 [ 0, %47 ], [ %59, %51 ]
  %IndexSExt21 = sext i32 %11 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 70
  %IndexValAdd23 = add i64 %IndexValMul22, 43
  %54 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %54
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %54
  %55 = mul nsw i32 %52, %43
  %56 = add nsw i32 %55, %53
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds double, double* %49, i64 %57
  store double 0.000000e+00, double* %58, align 8, !tbaa !6
  %59 = add nuw nsw i32 %53, 1
  %60 = icmp slt i32 %59, %50
  br i1 %60, label %51, label %61

; <label>:61:                                     ; preds = %51, %42
  %IndexSExt26 = sext i32 %11 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 70
  %IndexValAdd28 = add i64 %IndexValMul27, 44
  %62 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %62
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %62
  %63 = load i32, i32* %4, align 4, !tbaa !2
  %64 = icmp sgt i32 %63, 0
  br i1 %64, label %65, label %128

; <label>:65:                                     ; preds = %61
  %IndexSExt31 = sext i32 %11 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 70
  %IndexValAdd33 = add i64 %IndexValMul32, 45
  %66 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %66
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %66
  br label %67

; <label>:67:                                     ; preds = %65, %123
  %68 = phi i32 [ %125, %123 ], [ 0, %65 ]
  %IndexSExt36 = sext i32 %11 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 70
  %IndexValAdd38 = add i64 %IndexValMul37, 46
  %69 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %69
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %69
  %70 = icmp eq i32 %43, %68
  br i1 %70, label %123, label %71

; <label>:71:                                     ; preds = %67
  %IndexSExt41 = sext i32 %11 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 70
  %IndexValAdd43 = add i64 %IndexValMul42, 47
  %72 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %72
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %72
  %73 = load i32, i32* %5, align 4, !tbaa !2
  %74 = load double*, double** %7, align 8, !tbaa !10
  %75 = mul nsw i32 %73, %43
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds double, double* %74, i64 %76
  %78 = mul nsw i32 %73, %68
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds double, double* %74, i64 %79
  %81 = call double @dist(i32 %73, double* %77, double* %80, double* nonnull %41)
  %82 = load double, double* %8, align 8, !tbaa !6
  %83 = fcmp olt double %81, %82
  %84 = select i1 %83, double %81, double %82
  %85 = load double, double* %18, align 8, !tbaa !6
  %86 = call double @sin(double %84) #4
  %87 = fmul double %86, %86
  %88 = fmul double %87, 5.000000e-01
  %89 = fadd double %85, %88
  store double %89, double* %18, align 8, !tbaa !6
  %90 = load i32, i32* %5, align 4, !tbaa !2
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %123

; <label>:92:                                     ; preds = %71
  %IndexSExt46 = sext i32 %11 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 70
  %IndexValAdd48 = add i64 %IndexValMul47, 48
  %93 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %93
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %93
  %94 = fmul double %84, 2.000000e+00
  br label %95

; <label>:95:                                     ; preds = %92, %95
  %96 = phi i64 [ 0, %92 ], [ %119, %95 ]
  %97 = phi i32 [ %90, %92 ], [ %120, %95 ]
  %IndexSExt51 = sext i32 %11 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 70
  %IndexValAdd53 = add i64 %IndexValMul52, 49
  %98 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %98
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %98
  %99 = load double*, double** %6, align 8, !tbaa !10
  %100 = mul nsw i32 %97, %43
  %101 = trunc i64 %96 to i32
  %102 = add nsw i32 %100, %101
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds double, double* %99, i64 %103
  %105 = load double, double* %104, align 8, !tbaa !6
  %106 = getelementptr inbounds [3 x double], [3 x double]* %13, i64 0, i64 %96
  %107 = load double, double* %106, align 8, !tbaa !6
  %108 = call double @sin(double %94) #4
  %109 = fmul double %107, %108
  %110 = fdiv double %109, %81
  %111 = fsub double %105, %110
  %112 = load double*, double** %6, align 8, !tbaa !10
  %113 = load i32, i32* %5, align 4, !tbaa !2
  %114 = mul nsw i32 %113, %43
  %115 = trunc i64 %96 to i32
  %116 = add nsw i32 %114, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds double, double* %112, i64 %117
  store double %111, double* %118, align 8, !tbaa !6
  %119 = add nuw nsw i64 %96, 1
  %120 = load i32, i32* %5, align 4, !tbaa !2
  %121 = sext i32 %120 to i64
  %122 = icmp slt i64 %119, %121
  br i1 %122, label %95, label %123

; <label>:123:                                    ; preds = %95, %71, %67
  %IndexSExt56 = sext i32 %11 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 70
  %IndexValAdd58 = add i64 %IndexValMul57, 50
  %124 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %124
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %124
  %125 = add nuw nsw i32 %68, 1
  %126 = load i32, i32* %4, align 4, !tbaa !2
  %127 = icmp slt i32 %125, %126
  br i1 %127, label %67, label %128

; <label>:128:                                    ; preds = %123, %61
  %IndexSExt61 = sext i32 %11 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 70
  %IndexValAdd63 = add i64 %IndexValMul62, 51
  %129 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %129
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %129
  %130 = load i32, i32* %5, align 4, !tbaa !2
  %131 = icmp sgt i32 %130, 0
  br i1 %131, label %132, label %150

; <label>:132:                                    ; preds = %128
  %IndexSExt66 = sext i32 %11 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 70
  %IndexValAdd68 = add i64 %IndexValMul67, 52
  %133 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %133
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %133
  %134 = load double*, double** %9, align 8, !tbaa !10
  %135 = load i32, i32* %5, align 4, !tbaa !2
  br label %136

; <label>:136:                                    ; preds = %132, %136
  %137 = phi i32 [ %130, %132 ], [ %135, %136 ]
  %138 = phi i32 [ 0, %132 ], [ %148, %136 ]
  %IndexSExt71 = sext i32 %11 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 70
  %IndexValAdd73 = add i64 %IndexValMul72, 53
  %139 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %139
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %139
  %140 = load double, double* %19, align 8, !tbaa !6
  %141 = mul nsw i32 %137, %43
  %142 = add nsw i32 %141, %138
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds double, double* %134, i64 %143
  %145 = load double, double* %144, align 8, !tbaa !6
  %146 = fmul double %145, %145
  %147 = fadd double %140, %146
  store double %147, double* %19, align 8, !tbaa !6
  %148 = add nuw nsw i32 %138, 1
  %149 = icmp slt i32 %148, %135
  br i1 %149, label %136, label %150

; <label>:150:                                    ; preds = %136, %128
  %IndexSExt76 = sext i32 %11 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 70
  %IndexValAdd78 = add i64 %IndexValMul77, 54
  %151 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %151
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %151
  %152 = add nsw i32 %43, 1
  %153 = load i32, i32* %15, align 4, !tbaa !2
  %154 = icmp slt i32 %43, %153
  br i1 %154, label %42, label %155

; <label>:155:                                    ; preds = %150, %25
  %IndexSExt81 = sext i32 %11 to i64
  %IndexValMul82 = mul i64 %IndexSExt81, 70
  %IndexValAdd83 = add i64 %IndexValMul82, 55
  %156 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd83
  %OldBBCounter84 = load i64, i64* %156
  %NewBBCounter85 = add i64 %OldBBCounter84, 1
  store i64 %NewBBCounter85, i64* %156
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %33) #4
  %157 = bitcast [2 x i8*]* %20 to double**
  store double* %18, double** %157, align 8
  %158 = getelementptr inbounds [2 x i8*], [2 x i8*]* %20, i64 0, i64 1
  %159 = bitcast i8** %158 to double**
  store double* %19, double** %159, align 8
  %160 = bitcast [2 x i8*]* %20 to i8*
  %161 = call i32 @__kmpc_reduce(%ident_t* nonnull @3, i32 %33, i32 2, i64 16, i8* nonnull %160, void (i8*, i8*)* nonnull @.omp.reduction.reduction_func, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #4
  switch i32 %161, label %200 [
    i32 1, label %162
    i32 2, label %170
  ]

; <label>:162:                                    ; preds = %155
  %IndexSExt86 = sext i32 %11 to i64
  %IndexValMul87 = mul i64 %IndexSExt86, 70
  %IndexValAdd88 = add i64 %IndexValMul87, 56
  %163 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd88
  %OldBBCounter89 = load i64, i64* %163
  %NewBBCounter90 = add i64 %OldBBCounter89, 1
  store i64 %NewBBCounter90, i64* %163
  %164 = load double, double* %2, align 8, !tbaa !6
  %165 = load double, double* %18, align 8, !tbaa !6
  %166 = fadd double %164, %165
  store double %166, double* %2, align 8, !tbaa !6
  %167 = load double, double* %3, align 8, !tbaa !6
  %168 = load double, double* %19, align 8, !tbaa !6
  %169 = fadd double %167, %168
  store double %169, double* %3, align 8, !tbaa !6
  call void @__kmpc_end_reduce(%ident_t* nonnull @3, i32 %33, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #4
  br label %200

; <label>:170:                                    ; preds = %155
  %IndexSExt91 = sext i32 %11 to i64
  %IndexValMul92 = mul i64 %IndexSExt91, 70
  %IndexValAdd93 = add i64 %IndexValMul92, 57
  %171 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd93
  %OldBBCounter94 = load i64, i64* %171
  %NewBBCounter95 = add i64 %OldBBCounter94, 1
  store i64 %NewBBCounter95, i64* %171
  %172 = bitcast double* %2 to i64*
  %173 = load atomic i64, i64* %172 monotonic, align 8, !tbaa !6
  %174 = load double, double* %18, align 8, !tbaa !6
  br label %175

; <label>:175:                                    ; preds = %175, %170
  %176 = phi i64 [ %173, %170 ], [ %182, %175 ]
  %IndexSExt96 = sext i32 %11 to i64
  %IndexValMul97 = mul i64 %IndexSExt96, 70
  %IndexValAdd98 = add i64 %IndexValMul97, 58
  %177 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd98
  %OldBBCounter99 = load i64, i64* %177
  %NewBBCounter100 = add i64 %OldBBCounter99, 1
  store i64 %NewBBCounter100, i64* %177
  %178 = bitcast i64 %176 to double
  %179 = fadd double %174, %178
  %180 = bitcast double %179 to i64
  %181 = cmpxchg i64* %172, i64 %176, i64 %180 monotonic monotonic
  %182 = extractvalue { i64, i1 } %181, 0
  %183 = extractvalue { i64, i1 } %181, 1
  br i1 %183, label %184, label %175

; <label>:184:                                    ; preds = %175
  %IndexSExt101 = sext i32 %11 to i64
  %IndexValMul102 = mul i64 %IndexSExt101, 70
  %IndexValAdd103 = add i64 %IndexValMul102, 59
  %185 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd103
  %OldBBCounter104 = load i64, i64* %185
  %NewBBCounter105 = add i64 %OldBBCounter104, 1
  store i64 %NewBBCounter105, i64* %185
  %186 = bitcast double* %3 to i64*
  %187 = load atomic i64, i64* %186 monotonic, align 8, !tbaa !6
  %188 = load double, double* %19, align 8, !tbaa !6
  br label %189

; <label>:189:                                    ; preds = %189, %184
  %190 = phi i64 [ %187, %184 ], [ %196, %189 ]
  %IndexSExt106 = sext i32 %11 to i64
  %IndexValMul107 = mul i64 %IndexSExt106, 70
  %IndexValAdd108 = add i64 %IndexValMul107, 60
  %191 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd108
  %OldBBCounter109 = load i64, i64* %191
  %NewBBCounter110 = add i64 %OldBBCounter109, 1
  store i64 %NewBBCounter110, i64* %191
  %192 = bitcast i64 %190 to double
  %193 = fadd double %188, %192
  %194 = bitcast double %193 to i64
  %195 = cmpxchg i64* %186, i64 %190, i64 %194 monotonic monotonic
  %196 = extractvalue { i64, i1 } %195, 0
  %197 = extractvalue { i64, i1 } %195, 1
  br i1 %197, label %198, label %189

; <label>:198:                                    ; preds = %189
  %IndexSExt111 = sext i32 %11 to i64
  %IndexValMul112 = mul i64 %IndexSExt111, 70
  %IndexValAdd113 = add i64 %IndexValMul112, 61
  %199 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd113
  %OldBBCounter114 = load i64, i64* %199
  %NewBBCounter115 = add i64 %OldBBCounter114, 1
  store i64 %NewBBCounter115, i64* %199
  call void @__kmpc_end_reduce(%ident_t* nonnull @3, i32 %33, [8 x i32]* nonnull @.gomp_critical_user_.reduction.var) #4
  br label %200

; <label>:200:                                    ; preds = %198, %162, %155
  %IndexSExt116 = sext i32 %11 to i64
  %IndexValMul117 = mul i64 %IndexSExt116, 70
  %IndexValAdd118 = add i64 %IndexValMul117, 62
  %201 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd118
  %OldBBCounter119 = load i64, i64* %201
  %NewBBCounter120 = add i64 %OldBBCounter119, 1
  store i64 %NewBBCounter120, i64* %201
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #4
  br label %202

; <label>:202:                                    ; preds = %200, %10
  %IndexSExt121 = sext i32 %11 to i64
  %IndexValMul122 = mul i64 %IndexSExt121, 70
  %IndexValAdd123 = add i64 %IndexValMul122, 63
  %203 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd123
  %OldBBCounter124 = load i64, i64* %203
  %NewBBCounter125 = add i64 %OldBBCounter124, 1
  store i64 %NewBBCounter125, i64* %203
  %204 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %204) #4
  %205 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %205) #4
  %206 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %206) #4
  %207 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %207) #4
  %208 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %208) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #4
  ret void
}

; Function Attrs: nounwind uwtable
define double @dist(i32, double* nocapture readonly, double* nocapture readonly, double* nocapture) local_unnamed_addr #0 {
  %5 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %5 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 64
  %6 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %6
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %6
  %7 = icmp sgt i32 %0, 0
  br i1 %7, label %8, label %25

; <label>:8:                                      ; preds = %4
  %IndexSExt1 = sext i32 %5 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 70
  %IndexValAdd3 = add i64 %IndexValMul2, 65
  %9 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %9
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %9
  %10 = zext i32 %0 to i64
  br label %11

; <label>:11:                                     ; preds = %11, %8
  %12 = phi i64 [ 0, %8 ], [ %23, %11 ]
  %13 = phi double [ 0.000000e+00, %8 ], [ %22, %11 ]
  %IndexSExt6 = sext i32 %5 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 70
  %IndexValAdd8 = add i64 %IndexValMul7, 66
  %14 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %14
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %14
  %15 = getelementptr inbounds double, double* %1, i64 %12
  %16 = load double, double* %15, align 8, !tbaa !6
  %17 = getelementptr inbounds double, double* %2, i64 %12
  %18 = load double, double* %17, align 8, !tbaa !6
  %19 = fsub double %16, %18
  %20 = getelementptr inbounds double, double* %3, i64 %12
  store double %19, double* %20, align 8, !tbaa !6
  %21 = fmul double %19, %19
  %22 = fadd double %13, %21
  %23 = add nuw nsw i64 %12, 1
  %24 = icmp eq i64 %23, %10
  br i1 %24, label %25, label %11

; <label>:25:                                     ; preds = %11, %4
  %26 = phi double [ 0.000000e+00, %4 ], [ %22, %11 ]
  %IndexSExt11 = sext i32 %5 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 70
  %IndexValAdd13 = add i64 %IndexValMul12, 67
  %27 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %27
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %27
  %28 = tail call double @sqrt(double %26) #4
  ret double %28
}

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #3

; Function Attrs: norecurse nounwind uwtable
define internal void @.omp.reduction.reduction_func(i8* nocapture readonly, i8* nocapture readonly) #5 {
  %3 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %3 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 68
  %4 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %4
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %4
  %5 = bitcast i8* %1 to double**
  %6 = load double*, double** %5, align 8
  %7 = bitcast i8* %0 to double**
  %8 = load double*, double** %7, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 8
  %10 = bitcast i8* %9 to double**
  %11 = load double*, double** %10, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 8
  %13 = bitcast i8* %12 to double**
  %14 = load double*, double** %13, align 8
  %15 = load double, double* %8, align 8, !tbaa !6
  %16 = load double, double* %6, align 8, !tbaa !6
  %17 = fadd double %15, %16
  store double %17, double* %8, align 8, !tbaa !6
  %18 = load double, double* %14, align 8, !tbaa !6
  %19 = load double, double* %11, align 8, !tbaa !6
  %20 = fadd double %18, %19
  store double %20, double* %14, align 8, !tbaa !6
  ret void
}

declare i32 @__kmpc_reduce(%ident_t*, i32, i32, i64, i8*, void (i8*, i8*)*, [8 x i32]*) local_unnamed_addr

declare void @__kmpc_end_reduce(%ident_t*, i32, [8 x i32]*) local_unnamed_addr

; Function Attrs: nounwind
declare double @sqrt(double) local_unnamed_addr #3

; Function Attrs: norecurse nounwind uwtable
define double @r8_uniform_01(i32* nocapture) local_unnamed_addr #5 {
  %2 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %2 to i64
  %IndexValMul = mul i64 %IndexSExt, 70
  %IndexValAdd = add i64 %IndexValMul, 69
  %3 = getelementptr [5040 x i64], [5040 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %3
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %3
  %4 = load i32, i32* %0, align 4, !tbaa !2
  %5 = sdiv i32 %4, 127773
  %6 = mul i32 %5, -127773
  %7 = add i32 %6, %4
  %8 = mul nsw i32 %7, 16807
  %9 = mul nsw i32 %5, -2836
  %10 = add i32 %8, %9
  %11 = icmp slt i32 %10, 0
  %12 = add nsw i32 %10, 2147483647
  %13 = select i1 %11, i32 %12, i32 %10
  store i32 %13, i32* %0, align 4, !tbaa !2
  %14 = sitofp i32 %13 to double
  %15 = fmul double %14, 0x3E000000001C5F68
  ret double %15
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i32, i1) #1

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #3

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) local_unnamed_addr #3

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) local_unnamed_addr #3

; Function Attrs: noinline optnone uwtable
define void @_Z18WriteOpenMPProfilePll(i64*, i64) #6 {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca [150 x i8], align 16
  %6 = alloca [100 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct._IO_FILE*, align 8
  %9 = alloca i32, align 4
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  %10 = call i32 @getpid() #4
  store i32 %10, i32* %7, align 4
  %11 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %12 = call i32 @gethostname(i8* %11, i64 99) #4
  %13 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %15 = load i32, i32* %7, align 4
  %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* %14, i32 %15) #4
  %17 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* %17)
  %19 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %20 = call %struct._IO_FILE* @fopen(i8* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store %struct._IO_FILE* %20, %struct._IO_FILE** %8, align 8
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %22 = icmp eq %struct._IO_FILE* %21, null
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  br label %45

; <label>:25:                                     ; preds = %2
  store i32 0, i32* %9, align 4
  br label %26

; <label>:26:                                     ; preds = %39, %25
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %4, align 8
  %30 = icmp slt i64 %28, %29
  br i1 %30, label %31, label %42

; <label>:31:                                     ; preds = %26
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %33 = load i64*, i64** %3, align 8
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i64, i64* %33, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.1, i32 0, i32 0), i64 %37)
  br label %39

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %9, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %9, align 4
  br label %26

; <label>:42:                                     ; preds = %26
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %44 = call i32 @fclose(%struct._IO_FILE* %43)
  br label %45

; <label>:45:                                     ; preds = %42, %23
  ret void
}

; Function Attrs: nounwind
declare i32 @getpid() #7

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #7

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #7

declare %struct._IO_FILE* @fopen(i8*, i8*) #8

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #8

declare i32 @fclose(%struct._IO_FILE*) #8

declare i32 @sched_getcpu()

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"double", !4, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"long", !4, i64 0}
!10 = !{!11, !11, i64 0}
!11 = !{!"any pointer", !4, i64 0}
