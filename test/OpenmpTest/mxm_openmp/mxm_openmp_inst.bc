; ModuleID = 'mxm_openmp_new.bc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%ident_t = type { i32, i32, i32, i32, i8* }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@timestamp.time_buffer = internal global [40 x i8] zeroinitializer, align 16
@.str.11 = private unnamed_addr constant [21 x i8] c"%d %B %Y %I:%M:%S %p\00", align 1
@str.15 = private unnamed_addr constant [12 x i8] c"MXM_OPENMP:\00"
@str.13 = private unnamed_addr constant [19 x i8] c"  C/OpenMP version\00"
@str.14 = private unnamed_addr constant [36 x i8] c"  Compute matrix product C = A * B.\00"
@.str.4 = private unnamed_addr constant [43 x i8] c"  The number of processors available = %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [43 x i8] c"  The number of threads available    = %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"  The matrix order N                 = %d\0A\00", align 1
@0 = private unnamed_addr constant %ident_t { i32 0, i32 2, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0) }, align 8
@.str.8 = private unnamed_addr constant [24 x i8] c"  Elapsed seconds = %g\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"  C(100,100)  = %g\0A\00", align 1
@str.16 = private unnamed_addr constant [27 x i8] c"  Normal end of execution.\00"
@1 = private unnamed_addr constant %ident_t { i32 0, i32 514, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0) }, align 8
@2 = private unnamed_addr constant %ident_t { i32 0, i32 66, i32 0, i32 0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i32 0, i32 0) }, align 8
@.str.7 = private unnamed_addr constant [23 x i8] c";unknown;unknown;0;0;;\00", align 1
@.str = private unnamed_addr constant [13 x i8] c"%s.%d.bbfout\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"hello world  %s\0A\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"open file wrong\0A\00", align 1
@.str.4.1 = private unnamed_addr constant [5 x i8] c"%ld\09\00", align 1
@BBCounters = internal global [3528 x i64] zeroinitializer

; Function Attrs: nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %1 to i64
  %IndexValMul = mul i64 %IndexSExt, 49
  %IndexValAdd = add i64 %IndexValMul, 0
  %2 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %2
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %2
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca [500 x [500 x double]], align 16
  %6 = alloca [500 x [500 x double]], align 16
  %7 = alloca [500 x [500 x double]], align 16
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = bitcast [500 x [500 x double]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2000000, i8* nonnull %11) #3
  %12 = bitcast [500 x [500 x double]]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2000000, i8* nonnull %12) #3
  %13 = bitcast [500 x [500 x double]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2000000, i8* nonnull %13) #3
  %14 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #3
  store i32 500, i32* %8, align 4, !tbaa !2
  %15 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #3
  store double 0x400921FB54442D18, double* %9, align 8, !tbaa !6
  %16 = bitcast double* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #3
  %17 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #3
  %18 = tail call i64 @time(i64* null) #3
  store i64 %18, i64* %4, align 8, !tbaa !8
  %19 = call %struct.tm* @localtime(i64* nonnull %4) #3
  %20 = call i64 @strftime(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0), i64 40, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), %struct.tm* %19) #3
  %21 = call i32 @puts(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #3
  %22 = call i32 @putchar(i32 10)
  %23 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.15, i64 0, i64 0))
  %24 = call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.13, i64 0, i64 0))
  %25 = call i32 @puts(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str.14, i64 0, i64 0))
  %26 = call i32 @omp_get_max_threads() #3
  %27 = call i32 @putchar(i32 10)
  %28 = call i32 @omp_get_num_procs() #3
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4, i64 0, i64 0), i32 %28)
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.5, i64 0, i64 0), i32 %26)
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0), i32 500)
  store double 0x3FA6E5B7D16657E1, double* %10, align 8, !tbaa !6
  %32 = call double @omp_get_wtime() #3
  call void (%ident_t*, i32, void (i32*, i32*, ...)*, ...) @__kmpc_fork_call(%ident_t* nonnull @0, i32 6, void (i32*, i32*, ...)* bitcast (void (i32*, i32*, i32*, double*, [500 x [500 x double]]*, double*, [500 x [500 x double]]*, [500 x [500 x double]]*)* @.omp_outlined. to void (i32*, i32*, ...)*), i32* nonnull %8, double* nonnull %9, [500 x [500 x double]]* nonnull %5, double* nonnull %10, [500 x [500 x double]]* nonnull %6, [500 x [500 x double]]* nonnull %7) #3
  %33 = call i32 @sched_getcpu()
  %IndexSExt1 = sext i32 %33 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 49
  %IndexValAdd3 = add i64 %IndexValMul2, 1
  %34 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %34
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %34
  %35 = call double @omp_get_wtime() #3
  %36 = fsub double %35, %32
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0), double %36)
  %38 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %7, i64 0, i64 99, i64 99
  %39 = load double, double* %38, align 8, !tbaa !6
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0), double %39)
  %41 = call i32 @putchar(i32 10)
  %42 = call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.15, i64 0, i64 0))
  %43 = call i32 @puts(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.16, i64 0, i64 0))
  %44 = call i32 @putchar(i32 10)
  %45 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #3
  %46 = call i64 @time(i64* null) #3
  store i64 %46, i64* %3, align 8, !tbaa !8
  %47 = call %struct.tm* @localtime(i64* nonnull %3) #3
  %48 = call i64 @strftime(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0), i64 40, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), %struct.tm* %47) #3
  %49 = call i32 @puts(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0)) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #3
  call void @llvm.lifetime.end.p0i8(i64 2000000, i8* nonnull %13) #3
  call void @llvm.lifetime.end.p0i8(i64 2000000, i8* nonnull %12) #3
  call void @llvm.lifetime.end.p0i8(i64 2000000, i8* nonnull %11) #3
  call void @_Z18WriteOpenMPProfilePll(i64* getelementptr inbounds ([3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 0), i64 3528)
  ret i32 0
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i64 @time(i64*) local_unnamed_addr #2

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i64 @strftime(i8*, i64, i8*, %struct.tm*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64, i8* nocapture) #1

; Function Attrs: nounwind
declare i32 @putchar(i32) local_unnamed_addr #3

declare i32 @omp_get_max_threads() local_unnamed_addr #4

declare i32 @omp_get_num_procs() local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #2

declare double @omp_get_wtime() local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define internal void @.omp_outlined.(i32* noalias nocapture readonly, i32* noalias nocapture readnone, i32* nocapture readonly dereferenceable(4), double* nocapture readonly dereferenceable(8), [500 x [500 x double]]* nocapture dereferenceable(2000000), double* nocapture readonly dereferenceable(8), [500 x [500 x double]]* nocapture dereferenceable(2000000), [500 x [500 x double]]* nocapture dereferenceable(2000000)) #0 {
  %9 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %9 to i64
  %IndexValMul = mul i64 %IndexSExt, 49
  %IndexValAdd = add i64 %IndexValMul, 2
  %10 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %10
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %10
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = load i32, i32* %2, align 4, !tbaa !2
  %24 = add nsw i32 %23, -1
  %25 = icmp sgt i32 %23, 0
  br i1 %25, label %33, label %26

; <label>:26:                                     ; preds = %8
  %IndexSExt1 = sext i32 %9 to i64
  %IndexValMul2 = mul i64 %IndexSExt1, 49
  %IndexValAdd3 = add i64 %IndexValMul2, 3
  %27 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd3
  %OldBBCounter4 = load i64, i64* %27
  %NewBBCounter5 = add i64 %OldBBCounter4, 1
  store i64 %NewBBCounter5, i64* %27
  %28 = load i32, i32* %0, align 4, !tbaa !2
  %29 = bitcast i32* %14 to i8*
  %30 = bitcast i32* %13 to i8*
  %31 = bitcast i32* %12 to i8*
  %32 = bitcast i32* %11 to i8*
  br label %93

; <label>:33:                                     ; preds = %8
  %IndexSExt6 = sext i32 %9 to i64
  %IndexValMul7 = mul i64 %IndexSExt6, 49
  %IndexValAdd8 = add i64 %IndexValMul7, 4
  %34 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd8
  %OldBBCounter9 = load i64, i64* %34
  %NewBBCounter10 = add i64 %OldBBCounter9, 1
  store i64 %NewBBCounter10, i64* %34
  %35 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35) #3
  store i32 0, i32* %11, align 4, !tbaa !2
  %36 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36) #3
  store i32 %24, i32* %12, align 4, !tbaa !2
  %37 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #3
  store i32 1, i32* %13, align 4, !tbaa !2
  %38 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38) #3
  store i32 0, i32* %14, align 4, !tbaa !2
  %39 = load i32, i32* %0, align 4, !tbaa !2
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %39, i32 34, i32* nonnull %14, i32* nonnull %11, i32* nonnull %12, i32* nonnull %13, i32 1, i32 1) #3
  %40 = load i32, i32* %12, align 4, !tbaa !2
  %41 = icmp sgt i32 %40, %24
  %42 = select i1 %41, i32 %24, i32 %40
  store i32 %42, i32* %12, align 4, !tbaa !2
  %43 = load i32, i32* %11, align 4, !tbaa !2
  %44 = icmp sgt i32 %43, %42
  br i1 %44, label %91, label %45

; <label>:45:                                     ; preds = %33
  %IndexSExt11 = sext i32 %9 to i64
  %IndexValMul12 = mul i64 %IndexSExt11, 49
  %IndexValAdd13 = add i64 %IndexValMul12, 5
  %46 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd13
  %OldBBCounter14 = load i64, i64* %46
  %NewBBCounter15 = add i64 %OldBBCounter14, 1
  store i64 %NewBBCounter15, i64* %46
  %47 = sext i32 %43 to i64
  %48 = load i32, i32* %2, align 4, !tbaa !2
  br label %49

; <label>:49:                                     ; preds = %84, %45
  %50 = phi i32 [ %85, %84 ], [ %42, %45 ]
  %51 = phi i32 [ %86, %84 ], [ %48, %45 ]
  %52 = phi i64 [ %88, %84 ], [ %47, %45 ]
  %IndexSExt16 = sext i32 %9 to i64
  %IndexValMul17 = mul i64 %IndexSExt16, 49
  %IndexValAdd18 = add i64 %IndexValMul17, 6
  %53 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd18
  %OldBBCounter19 = load i64, i64* %53
  %NewBBCounter20 = add i64 %OldBBCounter19, 1
  store i64 %NewBBCounter20, i64* %53
  %54 = icmp sgt i32 %51, 0
  br i1 %54, label %55, label %84

; <label>:55:                                     ; preds = %49
  %IndexSExt21 = sext i32 %9 to i64
  %IndexValMul22 = mul i64 %IndexSExt21, 49
  %IndexValAdd23 = add i64 %IndexValMul22, 7
  %56 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd23
  %OldBBCounter24 = load i64, i64* %56
  %NewBBCounter25 = add i64 %OldBBCounter24, 1
  store i64 %NewBBCounter25, i64* %56
  %57 = trunc i64 %52 to i32
  %58 = sitofp i32 %57 to double
  br label %59

; <label>:59:                                     ; preds = %55, %59
  %60 = phi i64 [ 0, %55 ], [ %77, %59 ]
  %61 = phi i32 [ %51, %55 ], [ %78, %59 ]
  %IndexSExt26 = sext i32 %9 to i64
  %IndexValMul27 = mul i64 %IndexSExt26, 49
  %IndexValAdd28 = add i64 %IndexValMul27, 8
  %62 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd28
  %OldBBCounter29 = load i64, i64* %62
  %NewBBCounter30 = add i64 %OldBBCounter29, 1
  store i64 %NewBBCounter30, i64* %62
  %63 = load double, double* %3, align 8, !tbaa !6
  %64 = fmul double %63, 2.000000e+00
  %65 = fmul double %64, %58
  %66 = trunc i64 %60 to i32
  %67 = sitofp i32 %66 to double
  %68 = fmul double %65, %67
  %69 = sitofp i32 %61 to double
  %70 = fdiv double %68, %69
  %71 = load double, double* %5, align 8, !tbaa !6
  %72 = call double @sin(double %70) #3
  %73 = call double @cos(double %70) #3
  %74 = fadd double %72, %73
  %75 = fmul double %71, %74
  %76 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %52, i64 %60
  store double %75, double* %76, align 8, !tbaa !6
  %77 = add nuw nsw i64 %60, 1
  %78 = load i32, i32* %2, align 4, !tbaa !2
  %79 = sext i32 %78 to i64
  %80 = icmp slt i64 %77, %79
  br i1 %80, label %59, label %81

; <label>:81:                                     ; preds = %59
  %IndexSExt31 = sext i32 %9 to i64
  %IndexValMul32 = mul i64 %IndexSExt31, 49
  %IndexValAdd33 = add i64 %IndexValMul32, 9
  %82 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd33
  %OldBBCounter34 = load i64, i64* %82
  %NewBBCounter35 = add i64 %OldBBCounter34, 1
  store i64 %NewBBCounter35, i64* %82
  %83 = load i32, i32* %12, align 4, !tbaa !2
  br label %84

; <label>:84:                                     ; preds = %81, %49
  %85 = phi i32 [ %83, %81 ], [ %50, %49 ]
  %86 = phi i32 [ %78, %81 ], [ %51, %49 ]
  %IndexSExt36 = sext i32 %9 to i64
  %IndexValMul37 = mul i64 %IndexSExt36, 49
  %IndexValAdd38 = add i64 %IndexValMul37, 10
  %87 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd38
  %OldBBCounter39 = load i64, i64* %87
  %NewBBCounter40 = add i64 %OldBBCounter39, 1
  store i64 %NewBBCounter40, i64* %87
  %88 = add nsw i64 %52, 1
  %89 = sext i32 %85 to i64
  %90 = icmp slt i64 %52, %89
  br i1 %90, label %49, label %91

; <label>:91:                                     ; preds = %84, %33
  %IndexSExt41 = sext i32 %9 to i64
  %IndexValMul42 = mul i64 %IndexSExt41, 49
  %IndexValAdd43 = add i64 %IndexValMul42, 11
  %92 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd43
  %OldBBCounter44 = load i64, i64* %92
  %NewBBCounter45 = add i64 %OldBBCounter44, 1
  store i64 %NewBBCounter45, i64* %92
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %39) #3
  br label %93

; <label>:93:                                     ; preds = %26, %91
  %94 = phi i8* [ %32, %26 ], [ %35, %91 ]
  %95 = phi i8* [ %31, %26 ], [ %36, %91 ]
  %96 = phi i8* [ %30, %26 ], [ %37, %91 ]
  %97 = phi i8* [ %29, %26 ], [ %38, %91 ]
  %98 = phi i32 [ %28, %26 ], [ %39, %91 ]
  %IndexSExt46 = sext i32 %9 to i64
  %IndexValMul47 = mul i64 %IndexSExt46, 49
  %IndexValAdd48 = add i64 %IndexValMul47, 12
  %99 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd48
  %OldBBCounter49 = load i64, i64* %99
  %NewBBCounter50 = add i64 %OldBBCounter49, 1
  store i64 %NewBBCounter50, i64* %99
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %97) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %96) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %95) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #3
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %98) #3
  %100 = load i32, i32* %2, align 4, !tbaa !2
  %101 = add nsw i32 %100, -1
  %102 = icmp sgt i32 %100, 0
  br i1 %102, label %109, label %103

; <label>:103:                                    ; preds = %93
  %IndexSExt51 = sext i32 %9 to i64
  %IndexValMul52 = mul i64 %IndexSExt51, 49
  %IndexValAdd53 = add i64 %IndexValMul52, 13
  %104 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd53
  %OldBBCounter54 = load i64, i64* %104
  %NewBBCounter55 = add i64 %OldBBCounter54, 1
  store i64 %NewBBCounter55, i64* %104
  %105 = bitcast i32* %18 to i8*
  %106 = bitcast i32* %17 to i8*
  %107 = bitcast i32* %16 to i8*
  %108 = bitcast i32* %15 to i8*
  br label %265

; <label>:109:                                    ; preds = %93
  %IndexSExt56 = sext i32 %9 to i64
  %IndexValMul57 = mul i64 %IndexSExt56, 49
  %IndexValAdd58 = add i64 %IndexValMul57, 14
  %110 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd58
  %OldBBCounter59 = load i64, i64* %110
  %NewBBCounter60 = add i64 %OldBBCounter59, 1
  store i64 %NewBBCounter60, i64* %110
  %111 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %111) #3
  store i32 0, i32* %15, align 4, !tbaa !2
  %112 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %112) #3
  store i32 %101, i32* %16, align 4, !tbaa !2
  %113 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %113) #3
  store i32 1, i32* %17, align 4, !tbaa !2
  %114 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %114) #3
  store i32 0, i32* %18, align 4, !tbaa !2
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %98, i32 34, i32* nonnull %18, i32* nonnull %15, i32* nonnull %16, i32* nonnull %17, i32 1, i32 1) #3
  %115 = load i32, i32* %16, align 4, !tbaa !2
  %116 = icmp sgt i32 %115, %101
  %117 = select i1 %116, i32 %101, i32 %115
  store i32 %117, i32* %16, align 4, !tbaa !2
  %118 = load i32, i32* %15, align 4, !tbaa !2
  %119 = icmp sgt i32 %118, %117
  br i1 %119, label %263, label %120

; <label>:120:                                    ; preds = %109
  %IndexSExt61 = sext i32 %9 to i64
  %IndexValMul62 = mul i64 %IndexSExt61, 49
  %IndexValAdd63 = add i64 %IndexValMul62, 15
  %121 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd63
  %OldBBCounter64 = load i64, i64* %121
  %NewBBCounter65 = add i64 %OldBBCounter64, 1
  store i64 %NewBBCounter65, i64* %121
  %122 = load i32, i32* %2, align 4
  %123 = icmp sgt i32 %122, 0
  %124 = sext i32 %118 to i64
  %125 = sext i32 %117 to i64
  %126 = zext i32 %122 to i64
  %127 = and i64 %126, 4294967292
  %128 = add nsw i64 %127, -4
  %129 = lshr exact i64 %128, 2
  %130 = add nuw nsw i64 %129, 1
  %131 = add nsw i64 %126, -1
  %132 = icmp ult i32 %122, 4
  %133 = and i64 %126, 3
  %134 = icmp eq i64 %133, 0
  %135 = and i64 %126, 4294967292
  %136 = and i64 %130, 1
  %137 = icmp eq i64 %128, 0
  %138 = sub nsw i64 %130, %136
  %139 = icmp eq i64 %136, 0
  %140 = icmp eq i64 %135, %126
  br label %141

; <label>:141:                                    ; preds = %258, %120
  %142 = phi i64 [ %262, %258 ], [ 0, %120 ]
  %143 = phi i64 [ %260, %258 ], [ %124, %120 ]
  %IndexSExt66 = sext i32 %9 to i64
  %IndexValMul67 = mul i64 %IndexSExt66, 49
  %IndexValAdd68 = add i64 %IndexValMul67, 16
  %144 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd68
  %OldBBCounter69 = load i64, i64* %144
  %NewBBCounter70 = add i64 %OldBBCounter69, 1
  store i64 %NewBBCounter70, i64* %144
  %145 = add i64 %142, %124
  %146 = getelementptr [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %145, i64 0
  %147 = getelementptr [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %145, i64 %126
  %148 = getelementptr [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %145, i64 0
  %149 = getelementptr [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %145, i64 %126
  br i1 %123, label %150, label %258

; <label>:150:                                    ; preds = %141
  %IndexSExt71 = sext i32 %9 to i64
  %IndexValMul72 = mul i64 %IndexSExt71, 49
  %IndexValAdd73 = add i64 %IndexValMul72, 17
  %151 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd73
  %OldBBCounter74 = load i64, i64* %151
  %NewBBCounter75 = add i64 %OldBBCounter74, 1
  store i64 %NewBBCounter75, i64* %151
  br i1 %132, label %206, label %152

; <label>:152:                                    ; preds = %150
  %IndexSExt76 = sext i32 %9 to i64
  %IndexValMul77 = mul i64 %IndexSExt76, 49
  %IndexValAdd78 = add i64 %IndexValMul77, 18
  %153 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd78
  %OldBBCounter79 = load i64, i64* %153
  %NewBBCounter80 = add i64 %OldBBCounter79, 1
  store i64 %NewBBCounter80, i64* %153
  %154 = icmp ult double* %146, %149
  %155 = icmp ult double* %148, %147
  %156 = and i1 %154, %155
  br i1 %156, label %206, label %157

; <label>:157:                                    ; preds = %152
  %IndexSExt81 = sext i32 %9 to i64
  %IndexValMul82 = mul i64 %IndexSExt81, 49
  %IndexValAdd83 = add i64 %IndexValMul82, 19
  %158 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd83
  %OldBBCounter84 = load i64, i64* %158
  %NewBBCounter85 = add i64 %OldBBCounter84, 1
  store i64 %NewBBCounter85, i64* %158
  br i1 %137, label %189, label %159

; <label>:159:                                    ; preds = %157
  %IndexSExt86 = sext i32 %9 to i64
  %IndexValMul87 = mul i64 %IndexSExt86, 49
  %IndexValAdd88 = add i64 %IndexValMul87, 20
  %160 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd88
  %OldBBCounter89 = load i64, i64* %160
  %NewBBCounter90 = add i64 %OldBBCounter89, 1
  store i64 %NewBBCounter90, i64* %160
  br label %161

; <label>:161:                                    ; preds = %161, %159
  %162 = phi i64 [ 0, %159 ], [ %186, %161 ]
  %163 = phi i64 [ %138, %159 ], [ %187, %161 ]
  %IndexSExt91 = sext i32 %9 to i64
  %IndexValMul92 = mul i64 %IndexSExt91, 49
  %IndexValAdd93 = add i64 %IndexValMul92, 21
  %164 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd93
  %OldBBCounter94 = load i64, i64* %164
  %NewBBCounter95 = add i64 %OldBBCounter94, 1
  store i64 %NewBBCounter95, i64* %164
  %165 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %162
  %166 = bitcast double* %165 to <2 x i64>*
  %167 = load <2 x i64>, <2 x i64>* %166, align 8, !tbaa !6, !alias.scope !10
  %168 = getelementptr double, double* %165, i64 2
  %169 = bitcast double* %168 to <2 x i64>*
  %170 = load <2 x i64>, <2 x i64>* %169, align 8, !tbaa !6, !alias.scope !10
  %171 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %162
  %172 = bitcast double* %171 to <2 x i64>*
  store <2 x i64> %167, <2 x i64>* %172, align 8, !tbaa !6, !alias.scope !13, !noalias !10
  %173 = getelementptr double, double* %171, i64 2
  %174 = bitcast double* %173 to <2 x i64>*
  store <2 x i64> %170, <2 x i64>* %174, align 8, !tbaa !6, !alias.scope !13, !noalias !10
  %175 = or i64 %162, 4
  %176 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %175
  %177 = bitcast double* %176 to <2 x i64>*
  %178 = load <2 x i64>, <2 x i64>* %177, align 8, !tbaa !6, !alias.scope !10
  %179 = getelementptr double, double* %176, i64 2
  %180 = bitcast double* %179 to <2 x i64>*
  %181 = load <2 x i64>, <2 x i64>* %180, align 8, !tbaa !6, !alias.scope !10
  %182 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %175
  %183 = bitcast double* %182 to <2 x i64>*
  store <2 x i64> %178, <2 x i64>* %183, align 8, !tbaa !6, !alias.scope !13, !noalias !10
  %184 = getelementptr double, double* %182, i64 2
  %185 = bitcast double* %184 to <2 x i64>*
  store <2 x i64> %181, <2 x i64>* %185, align 8, !tbaa !6, !alias.scope !13, !noalias !10
  %186 = add i64 %162, 8
  %187 = add i64 %163, -2
  %188 = icmp eq i64 %187, 0
  br i1 %188, label %189, label %161, !llvm.loop !15

; <label>:189:                                    ; preds = %161, %157
  %190 = phi i64 [ 0, %157 ], [ %186, %161 ]
  %IndexSExt96 = sext i32 %9 to i64
  %IndexValMul97 = mul i64 %IndexSExt96, 49
  %IndexValAdd98 = add i64 %IndexValMul97, 22
  %191 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd98
  %OldBBCounter99 = load i64, i64* %191
  %NewBBCounter100 = add i64 %OldBBCounter99, 1
  store i64 %NewBBCounter100, i64* %191
  br i1 %139, label %204, label %192

; <label>:192:                                    ; preds = %189
  %IndexSExt101 = sext i32 %9 to i64
  %IndexValMul102 = mul i64 %IndexSExt101, 49
  %IndexValAdd103 = add i64 %IndexValMul102, 23
  %193 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd103
  %OldBBCounter104 = load i64, i64* %193
  %NewBBCounter105 = add i64 %OldBBCounter104, 1
  store i64 %NewBBCounter105, i64* %193
  %194 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %190
  %195 = bitcast double* %194 to <2 x i64>*
  %196 = load <2 x i64>, <2 x i64>* %195, align 8, !tbaa !6, !alias.scope !10
  %197 = getelementptr double, double* %194, i64 2
  %198 = bitcast double* %197 to <2 x i64>*
  %199 = load <2 x i64>, <2 x i64>* %198, align 8, !tbaa !6, !alias.scope !10
  %200 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %190
  %201 = bitcast double* %200 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %201, align 8, !tbaa !6, !alias.scope !13, !noalias !10
  %202 = getelementptr double, double* %200, i64 2
  %203 = bitcast double* %202 to <2 x i64>*
  store <2 x i64> %199, <2 x i64>* %203, align 8, !tbaa !6, !alias.scope !13, !noalias !10
  br label %204

; <label>:204:                                    ; preds = %189, %192
  %IndexSExt106 = sext i32 %9 to i64
  %IndexValMul107 = mul i64 %IndexSExt106, 49
  %IndexValAdd108 = add i64 %IndexValMul107, 24
  %205 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd108
  %OldBBCounter109 = load i64, i64* %205
  %NewBBCounter110 = add i64 %OldBBCounter109, 1
  store i64 %NewBBCounter110, i64* %205
  br i1 %140, label %258, label %206

; <label>:206:                                    ; preds = %204, %152, %150
  %207 = phi i64 [ 0, %152 ], [ 0, %150 ], [ %135, %204 ]
  %IndexSExt111 = sext i32 %9 to i64
  %IndexValMul112 = mul i64 %IndexSExt111, 49
  %IndexValAdd113 = add i64 %IndexValMul112, 25
  %208 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd113
  %OldBBCounter114 = load i64, i64* %208
  %NewBBCounter115 = add i64 %OldBBCounter114, 1
  store i64 %NewBBCounter115, i64* %208
  %209 = sub nsw i64 %131, %207
  br i1 %134, label %224, label %210

; <label>:210:                                    ; preds = %206
  %IndexSExt116 = sext i32 %9 to i64
  %IndexValMul117 = mul i64 %IndexSExt116, 49
  %IndexValAdd118 = add i64 %IndexValMul117, 26
  %211 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd118
  %OldBBCounter119 = load i64, i64* %211
  %NewBBCounter120 = add i64 %OldBBCounter119, 1
  store i64 %NewBBCounter120, i64* %211
  br label %212

; <label>:212:                                    ; preds = %212, %210
  %213 = phi i64 [ %221, %212 ], [ %207, %210 ]
  %214 = phi i64 [ %222, %212 ], [ %133, %210 ]
  %IndexSExt121 = sext i32 %9 to i64
  %IndexValMul122 = mul i64 %IndexSExt121, 49
  %IndexValAdd123 = add i64 %IndexValMul122, 27
  %215 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd123
  %OldBBCounter124 = load i64, i64* %215
  %NewBBCounter125 = add i64 %OldBBCounter124, 1
  store i64 %NewBBCounter125, i64* %215
  %216 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %213
  %217 = bitcast double* %216 to i64*
  %218 = load i64, i64* %217, align 8, !tbaa !6
  %219 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %213
  %220 = bitcast double* %219 to i64*
  store i64 %218, i64* %220, align 8, !tbaa !6
  %221 = add nuw nsw i64 %213, 1
  %222 = add i64 %214, -1
  %223 = icmp eq i64 %222, 0
  br i1 %223, label %224, label %212, !llvm.loop !17

; <label>:224:                                    ; preds = %212, %206
  %225 = phi i64 [ %207, %206 ], [ %221, %212 ]
  %IndexSExt126 = sext i32 %9 to i64
  %IndexValMul127 = mul i64 %IndexSExt126, 49
  %IndexValAdd128 = add i64 %IndexValMul127, 28
  %226 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd128
  %OldBBCounter129 = load i64, i64* %226
  %NewBBCounter130 = add i64 %OldBBCounter129, 1
  store i64 %NewBBCounter130, i64* %226
  %227 = icmp ult i64 %209, 3
  br i1 %227, label %258, label %228

; <label>:228:                                    ; preds = %224
  %IndexSExt131 = sext i32 %9 to i64
  %IndexValMul132 = mul i64 %IndexSExt131, 49
  %IndexValAdd133 = add i64 %IndexValMul132, 29
  %229 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd133
  %OldBBCounter134 = load i64, i64* %229
  %NewBBCounter135 = add i64 %OldBBCounter134, 1
  store i64 %NewBBCounter135, i64* %229
  br label %230

; <label>:230:                                    ; preds = %230, %228
  %231 = phi i64 [ %225, %228 ], [ %256, %230 ]
  %IndexSExt136 = sext i32 %9 to i64
  %IndexValMul137 = mul i64 %IndexSExt136, 49
  %IndexValAdd138 = add i64 %IndexValMul137, 30
  %232 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd138
  %OldBBCounter139 = load i64, i64* %232
  %NewBBCounter140 = add i64 %OldBBCounter139, 1
  store i64 %NewBBCounter140, i64* %232
  %233 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %231
  %234 = bitcast double* %233 to i64*
  %235 = load i64, i64* %234, align 8, !tbaa !6
  %236 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %231
  %237 = bitcast double* %236 to i64*
  store i64 %235, i64* %237, align 8, !tbaa !6
  %238 = add nuw nsw i64 %231, 1
  %239 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %238
  %240 = bitcast double* %239 to i64*
  %241 = load i64, i64* %240, align 8, !tbaa !6
  %242 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %238
  %243 = bitcast double* %242 to i64*
  store i64 %241, i64* %243, align 8, !tbaa !6
  %244 = add nsw i64 %231, 2
  %245 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %244
  %246 = bitcast double* %245 to i64*
  %247 = load i64, i64* %246, align 8, !tbaa !6
  %248 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %244
  %249 = bitcast double* %248 to i64*
  store i64 %247, i64* %249, align 8, !tbaa !6
  %250 = add nsw i64 %231, 3
  %251 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %143, i64 %250
  %252 = bitcast double* %251 to i64*
  %253 = load i64, i64* %252, align 8, !tbaa !6
  %254 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %143, i64 %250
  %255 = bitcast double* %254 to i64*
  store i64 %253, i64* %255, align 8, !tbaa !6
  %256 = add nsw i64 %231, 4
  %257 = icmp eq i64 %256, %126
  br i1 %257, label %258, label %230, !llvm.loop !19

; <label>:258:                                    ; preds = %224, %230, %204, %141
  %IndexSExt141 = sext i32 %9 to i64
  %IndexValMul142 = mul i64 %IndexSExt141, 49
  %IndexValAdd143 = add i64 %IndexValMul142, 31
  %259 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd143
  %OldBBCounter144 = load i64, i64* %259
  %NewBBCounter145 = add i64 %OldBBCounter144, 1
  store i64 %NewBBCounter145, i64* %259
  %260 = add nsw i64 %143, 1
  %261 = icmp slt i64 %143, %125
  %262 = add i64 %142, 1
  br i1 %261, label %141, label %263

; <label>:263:                                    ; preds = %258, %109
  %IndexSExt146 = sext i32 %9 to i64
  %IndexValMul147 = mul i64 %IndexSExt146, 49
  %IndexValAdd148 = add i64 %IndexValMul147, 32
  %264 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd148
  %OldBBCounter149 = load i64, i64* %264
  %NewBBCounter150 = add i64 %OldBBCounter149, 1
  store i64 %NewBBCounter150, i64* %264
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %98) #3
  br label %265

; <label>:265:                                    ; preds = %103, %263
  %266 = phi i8* [ %108, %103 ], [ %111, %263 ]
  %267 = phi i8* [ %107, %103 ], [ %112, %263 ]
  %268 = phi i8* [ %106, %103 ], [ %113, %263 ]
  %269 = phi i8* [ %105, %103 ], [ %114, %263 ]
  %IndexSExt151 = sext i32 %9 to i64
  %IndexValMul152 = mul i64 %IndexSExt151, 49
  %IndexValAdd153 = add i64 %IndexValMul152, 33
  %270 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd153
  %OldBBCounter154 = load i64, i64* %270
  %NewBBCounter155 = add i64 %OldBBCounter154, 1
  store i64 %NewBBCounter155, i64* %270
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %269) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %268) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %267) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %266) #3
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %98) #3
  %271 = load i32, i32* %2, align 4, !tbaa !2
  %272 = add nsw i32 %271, -1
  %273 = icmp sgt i32 %271, 0
  br i1 %273, label %280, label %274

; <label>:274:                                    ; preds = %265
  %IndexSExt156 = sext i32 %9 to i64
  %IndexValMul157 = mul i64 %IndexSExt156, 49
  %IndexValAdd158 = add i64 %IndexValMul157, 34
  %275 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd158
  %OldBBCounter159 = load i64, i64* %275
  %NewBBCounter160 = add i64 %OldBBCounter159, 1
  store i64 %NewBBCounter160, i64* %275
  %276 = bitcast i32* %22 to i8*
  %277 = bitcast i32* %21 to i8*
  %278 = bitcast i32* %20 to i8*
  %279 = bitcast i32* %19 to i8*
  br label %357

; <label>:280:                                    ; preds = %265
  %IndexSExt161 = sext i32 %9 to i64
  %IndexValMul162 = mul i64 %IndexSExt161, 49
  %IndexValAdd163 = add i64 %IndexValMul162, 35
  %281 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd163
  %OldBBCounter164 = load i64, i64* %281
  %NewBBCounter165 = add i64 %OldBBCounter164, 1
  store i64 %NewBBCounter165, i64* %281
  %282 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %282) #3
  store i32 0, i32* %19, align 4, !tbaa !2
  %283 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %283) #3
  store i32 %272, i32* %20, align 4, !tbaa !2
  %284 = bitcast i32* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %284) #3
  store i32 1, i32* %21, align 4, !tbaa !2
  %285 = bitcast i32* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %285) #3
  store i32 0, i32* %22, align 4, !tbaa !2
  call void @__kmpc_for_static_init_4(%ident_t* nonnull @1, i32 %98, i32 34, i32* nonnull %22, i32* nonnull %19, i32* nonnull %20, i32* nonnull %21, i32 1, i32 1) #3
  %286 = load i32, i32* %20, align 4, !tbaa !2
  %287 = icmp sgt i32 %286, %272
  %288 = select i1 %287, i32 %272, i32 %286
  store i32 %288, i32* %20, align 4, !tbaa !2
  %289 = load i32, i32* %19, align 4, !tbaa !2
  %290 = icmp sgt i32 %289, %288
  br i1 %290, label %355, label %291

; <label>:291:                                    ; preds = %280
  %IndexSExt166 = sext i32 %9 to i64
  %IndexValMul167 = mul i64 %IndexSExt166, 49
  %IndexValAdd168 = add i64 %IndexValMul167, 36
  %292 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd168
  %OldBBCounter169 = load i64, i64* %292
  %NewBBCounter170 = add i64 %OldBBCounter169, 1
  store i64 %NewBBCounter170, i64* %292
  %293 = load i32, i32* %2, align 4
  %294 = icmp sgt i32 %293, 0
  %295 = sext i32 %289 to i64
  %296 = sext i32 %288 to i64
  %297 = zext i32 %293 to i64
  %298 = zext i32 %293 to i64
  %299 = and i64 %297, 1
  %300 = icmp eq i32 %293, 1
  %301 = sub nsw i64 %297, %299
  %302 = icmp eq i64 %299, 0
  br label %303

; <label>:303:                                    ; preds = %351, %291
  %304 = phi i64 [ %353, %351 ], [ %295, %291 ]
  %IndexSExt171 = sext i32 %9 to i64
  %IndexValMul172 = mul i64 %IndexSExt171, 49
  %IndexValAdd173 = add i64 %IndexValMul172, 37
  %305 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd173
  %OldBBCounter174 = load i64, i64* %305
  %NewBBCounter175 = add i64 %OldBBCounter174, 1
  store i64 %NewBBCounter175, i64* %305
  br i1 %294, label %306, label %351

; <label>:306:                                    ; preds = %303
  %IndexSExt176 = sext i32 %9 to i64
  %IndexValMul177 = mul i64 %IndexSExt176, 49
  %IndexValAdd178 = add i64 %IndexValMul177, 38
  %307 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd178
  %OldBBCounter179 = load i64, i64* %307
  %NewBBCounter180 = add i64 %OldBBCounter179, 1
  store i64 %NewBBCounter180, i64* %307
  br label %308

; <label>:308:                                    ; preds = %306, %347
  %309 = phi i64 [ %349, %347 ], [ 0, %306 ]
  %IndexSExt181 = sext i32 %9 to i64
  %IndexValMul182 = mul i64 %IndexSExt181, 49
  %IndexValAdd183 = add i64 %IndexValMul182, 39
  %310 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd183
  %OldBBCounter184 = load i64, i64* %310
  %NewBBCounter185 = add i64 %OldBBCounter184, 1
  store i64 %NewBBCounter185, i64* %310
  %311 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %7, i64 0, i64 %304, i64 %309
  store double 0.000000e+00, double* %311, align 8, !tbaa !6
  br i1 %300, label %335, label %312

; <label>:312:                                    ; preds = %308
  %IndexSExt186 = sext i32 %9 to i64
  %IndexValMul187 = mul i64 %IndexSExt186, 49
  %IndexValAdd188 = add i64 %IndexValMul187, 40
  %313 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd188
  %OldBBCounter189 = load i64, i64* %313
  %NewBBCounter190 = add i64 %OldBBCounter189, 1
  store i64 %NewBBCounter190, i64* %313
  br label %314

; <label>:314:                                    ; preds = %314, %312
  %315 = phi double [ 0.000000e+00, %312 ], [ %331, %314 ]
  %316 = phi i64 [ 0, %312 ], [ %332, %314 ]
  %317 = phi i64 [ %301, %312 ], [ %333, %314 ]
  %IndexSExt191 = sext i32 %9 to i64
  %IndexValMul192 = mul i64 %IndexSExt191, 49
  %IndexValAdd193 = add i64 %IndexValMul192, 41
  %318 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd193
  %OldBBCounter194 = load i64, i64* %318
  %NewBBCounter195 = add i64 %OldBBCounter194, 1
  store i64 %NewBBCounter195, i64* %318
  %319 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %304, i64 %316
  %320 = load double, double* %319, align 8, !tbaa !6
  %321 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %316, i64 %309
  %322 = load double, double* %321, align 8, !tbaa !6
  %323 = fmul double %320, %322
  %324 = fadd double %315, %323
  store double %324, double* %311, align 8, !tbaa !6
  %325 = or i64 %316, 1
  %326 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %304, i64 %325
  %327 = load double, double* %326, align 8, !tbaa !6
  %328 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %325, i64 %309
  %329 = load double, double* %328, align 8, !tbaa !6
  %330 = fmul double %327, %329
  %331 = fadd double %324, %330
  store double %331, double* %311, align 8, !tbaa !6
  %332 = add nuw nsw i64 %316, 2
  %333 = add i64 %317, -2
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %335, label %314

; <label>:335:                                    ; preds = %314, %308
  %336 = phi double [ 0.000000e+00, %308 ], [ %331, %314 ]
  %337 = phi i64 [ 0, %308 ], [ %332, %314 ]
  %IndexSExt196 = sext i32 %9 to i64
  %IndexValMul197 = mul i64 %IndexSExt196, 49
  %IndexValAdd198 = add i64 %IndexValMul197, 42
  %338 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd198
  %OldBBCounter199 = load i64, i64* %338
  %NewBBCounter200 = add i64 %OldBBCounter199, 1
  store i64 %NewBBCounter200, i64* %338
  br i1 %302, label %347, label %339

; <label>:339:                                    ; preds = %335
  %IndexSExt201 = sext i32 %9 to i64
  %IndexValMul202 = mul i64 %IndexSExt201, 49
  %IndexValAdd203 = add i64 %IndexValMul202, 43
  %340 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd203
  %OldBBCounter204 = load i64, i64* %340
  %NewBBCounter205 = add i64 %OldBBCounter204, 1
  store i64 %NewBBCounter205, i64* %340
  %341 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %4, i64 0, i64 %304, i64 %337
  %342 = load double, double* %341, align 8, !tbaa !6
  %343 = getelementptr inbounds [500 x [500 x double]], [500 x [500 x double]]* %6, i64 0, i64 %337, i64 %309
  %344 = load double, double* %343, align 8, !tbaa !6
  %345 = fmul double %342, %344
  %346 = fadd double %336, %345
  store double %346, double* %311, align 8, !tbaa !6
  br label %347

; <label>:347:                                    ; preds = %335, %339
  %IndexSExt206 = sext i32 %9 to i64
  %IndexValMul207 = mul i64 %IndexSExt206, 49
  %IndexValAdd208 = add i64 %IndexValMul207, 44
  %348 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd208
  %OldBBCounter209 = load i64, i64* %348
  %NewBBCounter210 = add i64 %OldBBCounter209, 1
  store i64 %NewBBCounter210, i64* %348
  %349 = add nuw nsw i64 %309, 1
  %350 = icmp eq i64 %349, %298
  br i1 %350, label %351, label %308

; <label>:351:                                    ; preds = %347, %303
  %IndexSExt211 = sext i32 %9 to i64
  %IndexValMul212 = mul i64 %IndexSExt211, 49
  %IndexValAdd213 = add i64 %IndexValMul212, 45
  %352 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd213
  %OldBBCounter214 = load i64, i64* %352
  %NewBBCounter215 = add i64 %OldBBCounter214, 1
  store i64 %NewBBCounter215, i64* %352
  %353 = add nsw i64 %304, 1
  %354 = icmp slt i64 %304, %296
  br i1 %354, label %303, label %355

; <label>:355:                                    ; preds = %351, %280
  %IndexSExt216 = sext i32 %9 to i64
  %IndexValMul217 = mul i64 %IndexSExt216, 49
  %IndexValAdd218 = add i64 %IndexValMul217, 46
  %356 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd218
  %OldBBCounter219 = load i64, i64* %356
  %NewBBCounter220 = add i64 %OldBBCounter219, 1
  store i64 %NewBBCounter220, i64* %356
  call void @__kmpc_for_static_fini(%ident_t* nonnull @1, i32 %98) #3
  br label %357

; <label>:357:                                    ; preds = %274, %355
  %358 = phi i8* [ %279, %274 ], [ %282, %355 ]
  %359 = phi i8* [ %278, %274 ], [ %283, %355 ]
  %360 = phi i8* [ %277, %274 ], [ %284, %355 ]
  %361 = phi i8* [ %276, %274 ], [ %285, %355 ]
  %IndexSExt221 = sext i32 %9 to i64
  %IndexValMul222 = mul i64 %IndexSExt221, 49
  %IndexValAdd223 = add i64 %IndexValMul222, 47
  %362 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd223
  %OldBBCounter224 = load i64, i64* %362
  %NewBBCounter225 = add i64 %OldBBCounter224, 1
  store i64 %NewBBCounter225, i64* %362
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %361) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %360) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %359) #3
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %358) #3
  call void @__kmpc_barrier(%ident_t* nonnull @2, i32 %98) #3
  ret void
}

declare void @__kmpc_fork_call(%ident_t*, i32, void (i32*, i32*, ...)*, ...) local_unnamed_addr

declare void @__kmpc_for_static_init_4(%ident_t*, i32, i32, i32*, i32*, i32*, i32*, i32, i32) local_unnamed_addr

; Function Attrs: nounwind
declare double @sin(double) local_unnamed_addr #2

; Function Attrs: nounwind
declare double @cos(double) local_unnamed_addr #2

declare void @__kmpc_for_static_fini(%ident_t*, i32) local_unnamed_addr

declare void @__kmpc_barrier(%ident_t*, i32) local_unnamed_addr

; Function Attrs: nounwind uwtable
define void @timestamp() local_unnamed_addr #0 {
  %1 = call i32 @sched_getcpu()
  %IndexSExt = sext i32 %1 to i64
  %IndexValMul = mul i64 %IndexSExt, 49
  %IndexValAdd = add i64 %IndexValMul, 48
  %2 = getelementptr [3528 x i64], [3528 x i64]* @BBCounters, i64 0, i64 %IndexValAdd
  %OldBBCounter = load i64, i64* %2
  %NewBBCounter = add i64 %OldBBCounter, 1
  store i64 %NewBBCounter, i64* %2
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #3
  %5 = tail call i64 @time(i64* null) #3
  store i64 %5, i64* %3, align 8, !tbaa !8
  %6 = call %struct.tm* @localtime(i64* nonnull %3) #3
  %7 = call i64 @strftime(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0), i64 40, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0), %struct.tm* %6) #3
  %8 = call i32 @puts(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @timestamp.time_buffer, i64 0, i64 0))
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #3
  ret void
}

; Function Attrs: noinline optnone uwtable
define void @_Z18WriteOpenMPProfilePll(i64*, i64) #5 {
  %3 = alloca i64*, align 8
  %4 = alloca i64, align 8
  %5 = alloca [150 x i8], align 16
  %6 = alloca [100 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca %struct._IO_FILE*, align 8
  %9 = alloca i32, align 4
  store i64* %0, i64** %3, align 8
  store i64 %1, i64* %4, align 8
  %10 = call i32 @getpid() #3
  store i32 %10, i32* %7, align 4
  %11 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %12 = call i32 @gethostname(i8* %11, i64 99) #3
  %13 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %14 = getelementptr inbounds [100 x i8], [100 x i8]* %6, i32 0, i32 0
  %15 = load i32, i32* %7, align 4
  %16 = call i32 (i8*, i8*, ...) @sprintf(i8* %13, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0), i8* %14, i32 %15) #3
  %17 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0), i8* %17)
  %19 = getelementptr inbounds [150 x i8], [150 x i8]* %5, i32 0, i32 0
  %20 = call %struct._IO_FILE* @fopen(i8* %19, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i32 0, i32 0))
  store %struct._IO_FILE* %20, %struct._IO_FILE** %8, align 8
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %22 = icmp eq %struct._IO_FILE* %21, null
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i32 0, i32 0))
  br label %45

; <label>:25:                                     ; preds = %2
  store i32 0, i32* %9, align 4
  br label %26

; <label>:26:                                     ; preds = %39, %25
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = load i64, i64* %4, align 8
  %30 = icmp slt i64 %28, %29
  br i1 %30, label %31, label %42

; <label>:31:                                     ; preds = %26
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %33 = load i64*, i64** %3, align 8
  %34 = load i32, i32* %9, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i64, i64* %33, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.1, i32 0, i32 0), i64 %37)
  br label %39

; <label>:39:                                     ; preds = %31
  %40 = load i32, i32* %9, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %9, align 4
  br label %26

; <label>:42:                                     ; preds = %26
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %8, align 8
  %44 = call i32 @fclose(%struct._IO_FILE* %43)
  br label %45

; <label>:45:                                     ; preds = %42, %23
  ret void
}

; Function Attrs: nounwind
declare i32 @getpid() #6

; Function Attrs: nounwind
declare i32 @gethostname(i8*, i64) #6

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #6

declare %struct._IO_FILE* @fopen(i8*, i8*) #7

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #7

declare i32 @fclose(%struct._IO_FILE*) #7

declare i32 @sched_getcpu()

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noinline optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2~16.04.1 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !3, i64 0}
!3 = !{!"int", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"double", !4, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"long", !4, i64 0}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.isvectorized", i32 1}
!17 = distinct !{!17, !18}
!18 = !{!"llvm.loop.unroll.disable"}
!19 = distinct !{!19, !16}
